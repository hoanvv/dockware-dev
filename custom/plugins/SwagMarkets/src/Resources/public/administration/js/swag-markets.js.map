{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-segment-dropdown/bf-sales-channel-shopware-segment-dropdown.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-modal/bf-amazon-connection-assistant-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-success/bf-amazon-connection-assistant-start-success.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-category-tree/bf-sales-channel-shopware-category-tree.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-visibility-select/bf-sales-channel-product-visibility-select.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-extended-configuration/bf-sales-channel-amazon-extended-configuration.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account/bf-amazon-connection-assistant-account.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/attributes-mapping-modal/attributes-mapping-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-modal/bf-sales-channel-product-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/custom-fields-mapping/custom-fields-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-account-status/bf-amazon-connection-assistant-account-status.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree/bf-tree.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-account-status/bf-amazon-connection-assistant-account-status.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-success/bf-ebay-connection-assistant-start-success.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-property-transfer/bf-sales-channel-detail-property-transfer.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-product/bf-ebay-connection-assistant-account-product.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-account-status/bf-ebay-connection-assistant-account-status.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree-item/bf-tree-item.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-best-offer/bf-sales-channel-ebay-best-offer.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-list/bf-sales-channel-property-mapping-list.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/page/index/index.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-support.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-api.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-connection-assistant.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-logo/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-account-status/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/page/index/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-authorize/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-success/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-marketplace/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-product/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-logo/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-account-status/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/page/index/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize-oauth/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-success/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-marketplace/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-product/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-category.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-property.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-unit.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-system-api.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-sales-channel.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-product-api.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-amazon.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-ebay.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-plugin-configuration.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/app/component/entity/sw-category-tree-field-override/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/app/component/base/sw-card-override/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-modal-grid/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-grid/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-contract/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-plugin-configuration/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts-permissions/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts-sub-processor/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-fba-prime-shipping-methods/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-extended-configuration/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-extended-configuration/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-best-offer/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-defaults-select-only/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-detail/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-policy/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-token-expires/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-payment-method/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-base/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-create/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-create-base/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-amazon-fba-prime/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-amazon-prime-fba/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping/bf-grid-column-tree-field/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping-tree-field/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-product/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-product-list/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-asin-management/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-visibility-select/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-category-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-filter-panel/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-grid/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-list/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-variation-properties-grid/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-custom-fields/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-property-transfer/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-segment-dropdown/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-segment-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/component/utils.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/attributes-mapping-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/properties-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/custom-fields-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree-item/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-category-tree/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-segment-category-tree/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-segment-category-tree-item/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-segment-category-tree/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-marketplace-category-tree/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-unit-mapping-grid/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-unit-mapping-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-unit-mapping/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/component/bf-support/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-marketplace-category-tree/bf-sales-channel-marketplace-category-tree.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/page/index/index.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-modal/bf-ebay-connection-assistant-modal.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-contract/bf-contract.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-amazon-prime-fba/bf-sales-channel-detail-amazon-prime-fba.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/app/component/base/sw-card-override/sw-card-override.tml.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-product/bf-sales-channel-product.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-variation-properties-grid/bf-sales-channel-variation-properties-grid.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-extended-configuration/bf-sales-channel-ebay-extended-configuration.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-category-mapping/component/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-modal/bf-amazon-connection-assistant-modal.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-product/bf-amazon-connection-assistant-account-product.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/component/bf-support/bf-support.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-property-transfer/bf-sales-channel-detail-property-transfer.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping-tree-field/bf-sales-channel-category-mapping-tree-field.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-payment-method/bf-sales-channel-ebay-payment-method.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-mapping/bf-sales-channel-detail-mapping.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/properties-mapping/properties-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-category-mapping/bf-sales-channel-product-category-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-segment-dropdown/bf-sales-channel-shopware-segment-dropdown.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-unit-mapping-grid/bf-sales-channel-unit-mapping-grid.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/page/index/index.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts-sub-processor/bf-bookable-contracts-sub-processor.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-filter-panel/bf-filter-panel.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/page/index/index.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-logo/bf-ebay-connection-assistant-logo.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-grid/bf-sales-channel-property-mapping-grid.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize-oauth/bf-ebay-connection-assistant-start-authorize-oauth.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize-oauth/bf-ebay-connection-assistant-start-authorize-oauth.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-unit-mapping/bf-sales-channel-detail-unit-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-token-expires/bf-sales-channel-ebay-token-expires.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-mapping/bf-sales-channel-detail-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping/bf-sales-channel-category-mapping.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-fba-prime-shipping-methods/bf-sales-channel-amazon-fba-prime-shipping-methods.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-marketplace/bf-amazon-connection-assistant-account-marketplace.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-logo/bf-ebay-connection-assistant-logo.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/state/category-mapping/category-mapping.state.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-success/bf-amazon-connection-assistant-start-success.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-product-list/bf-sales-channel-detail-product-list.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-authorize/bf-amazon-connection-assistant-start-authorize.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-custom-fields/bf-sales-channel-detail-custom-fields.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-modal/bf-ebay-connection-assistant-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/component/bf-ebay-connection-assistant-account-status/bf-ebay-connection-assistant-account-status.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/service/bf-contract.service.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-detail/bf-sales-channel-detail.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts.html.twig","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-defaults-select-only/bf-sales-channel-defaults-select-only.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-create/bf-sales-channel-create.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-modal-grid/bf-sales-channel-modal-grid.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-logo/bf-amazon-connection-assistant-logo.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-marketplace/bf-ebay-connection-assistant-account-marketplace.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-modal/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-base/bf-sales-channel-detail-base.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-product/bf-amazon-connection-assistant-account-product.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-collapse/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts-sub-processor/bf-bookable-contracts-sub-processor.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-detail-custom-fields/bf-sales-channel-detail-custom-fields.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start-authorize/bf-amazon-connection-assistant-start-authorize.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-bookable-contracts/bf-bookable-contracts-permissions/bf-bookable-contracts-permissions.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-payment-method/bf-sales-channel-ebay-payment-method.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-grid/bf-sales-channel-product-grid.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-contract/bf-contract.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-base/bf-sales-channel-detail-base.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-marketplace-category-tree/bf-sales-channel-marketplace-category-tree.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start/bf-ebay-connection-assistant-start.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree-item/bf-tree-item.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-product/bf-ebay-connection-assistant-account-product.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-product-grid/bf-sales-channel-product-grid.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-amazon-fba-prime/bf-sales-channel-amazon-fba-prime.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/page/bf-sales-channel-mapping/bf-sales-channel-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-success/bf-ebay-connection-assistant-start-success.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-sales-channel-menu/index.js","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-create-base/bf-sales-channel-create-base.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping-tree-field/bf-sales-channel-category-mapping-tree-field.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/app/component/entity/sw-category-tree-field-override/sw-category-tree-field-override.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping/bf-sales-channel-category-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start/bf-amazon-connection-assistant-start.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/app/component/entity/sw-category-tree-field-override/sw-category-tree-field-override.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-tree/bf-tree.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-policy/bf-sales-channel-ebay-policy.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/component/bf-amazon-connection-assistant-logo/bf-amazon-connection-assistant-logo.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize/bf-ebay-connection-assistant-start-authorize.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-attributes-mapping/bf-sales-channel-attributes-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-segment-category-tree-item/bf-segment-category-tree-item.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account-marketplace/bf-ebay-connection-assistant-account-marketplace.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-shopware-segment-category-tree/bf-sales-channel-shopware-segment-category-tree.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-amazon-asin-management/bf-sales-channel-amazon-asin-management.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-start/bf-amazon-connection-assistant-start.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-plugin-configuration/bf-plugin-configuration.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-ebay-best-offer/bf-sales-channel-ebay-best-offer.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/view/bf-sales-channel-detail-product-list/bf-sales-channel-detail-product-list.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-filter-panel/bf-filter-panel.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-unit-mapping-modal/bf-sales-channel-unit-mapping-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start-authorize/bf-ebay-connection-assistant-start-authorize.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-segment-mapping/bf-sales-channel-segment-mapping.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/structure/bf-segment-category-tree/bf-segment-category-tree.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-property-mapping-modal/bf-sales-channel-property-mapping-modal.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-account/bf-ebay-connection-assistant-account.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-ebay-connection-assistant/view/bf-ebay-connection-assistant-start/bf-ebay-connection-assistant-start.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-segment-mapping/bf-sales-channel-segment-mapping.scss","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-sales-channel-category-mapping/bf-grid-column-tree-field/bf-grid-column-tree-field.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-amazon-connection-assistant/view/bf-amazon-connection-assistant-account-marketplace/bf-amazon-connection-assistant-account-marketplace.html.twig","webpack:////app/custom/plugins/shopware_6_diy/src/Resources/app/administration/src/module/bf-sales-channel/component/bf-plugin-configuration/bf-plugin-configuration.html.twig"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","content","locals","add","default","Application","Shopware","BfSupportService","httpClient","loginService","apiEndpoint","apiUrl","localStorageKey","config","headers","data","this","post","getBasicHeaders","then","response","catch","error","Classes","ApiService","addServiceProvider","container","initContainer","getContainer","BfApiService","salesChannelId","salesChannelType","token","localStorage","getItem","authorize","result","setToken","JSON","parse","expiry","Date","now","access","expires_in","setItem","stringify","getConfig","integration_user","access_key","secret_key","secret_access_key","handleResponse","forceReload","swagMarkets_business_platform","shop_id","loadSalesChannelType","toLowerCase","getSalesChannelType","request","filter","field","type","amazon_configuration","marketplace_id","id","ebay_configuration","getToken","resource","getHeaders","params","delete","BfConnectionAssistantService","retailerId","mwsToken","marketplaceId","shopId","getShopId","mwsAuthToken","sellerId","siteId","channelName","toStoreParams","shopsConfigurations","channelType","tried","baseId","redirectUrl","document","location","origin","obj","undefined","length","Component","register","template","inject","title","$tc","buttonConfig","showModal","stepsToGetBack","accountData","nextIsDisabled","nextBtnIsClicked","isLoading","isFinished","showSupportModal","methods","closeModal","setTitle","redirect","routerName","$router","push","addStepsToGetBack","setAccountData","setNextBtnState","state","onClickNext","resetNextBtnIsClicked","setIsLoadingState","mounted","$route","watch","val","go","user","created","getUser","userService","$emit","getTitle","Mixin","Service","mixins","getByName","$parent","howToFirstPart","link","authorizeManual","validate","authorizeAmazon","success","status","storeShopsConfigurations","MERCHANT_ID","MWS_AUTH_TOKEN","createNotificationSuccess","message","createNotificationError","props","Boolean","canRetailerSell","tooltip","handler","nextStep","deep","marketplaceCheck","validateMarketplace","isAllowedToListAtMarketplace","MARKETPLACE","URL","mwsEndpoint","triggerCategoriesImport","hasRetailerProducts","showConfirmModal","showConfirmFinishModal","productCheck","marketplaceArticleExists","productsDataExists","confirmFinishModal","sendIsConnectedDataToBackend","is_connected","Authorization","Module","routes","index","component","path","children","start","account","marketplace","authTokenStateIntervalId","sleep","milliseconds","Promise","resolve","setTimeout","startCheckTokenState","setInterval","checkTokenState","ebayAuthorizationTokenState","isConnected","clearInterval","startCheckOAuthTokenState","checkOAuthTokenState","ebayAuthorizationOAuthTokenState","btnDisabled","errorGetConnectionLink","irpLink","onConnectBtnClicked","intervalId","getEbayConnectLink","ms","window","open","dummyAuthorize","authorizeEbay","$nextTick","ebayConnectLink","errorGetOAuthTokenLink","oAuthTokenLink","oAuthIntervalId","authorizeOAuth","getEbayOAuthTokenLink","ebayOAuthTokenLink","decodeURIComponent","siteIdCheck","ebaySiteIdCheck","EBAY_SITE_ID","errorProductCheck","articleListingExists","BfCategoryService","page","limit","loadRecursive","channelId","parentId","getChannelId","categoryId","values","filterCollection","forEach","categories","specificKey","category","external_channels_categories_id","ids","shopwareCategory","swCategoryId","channelsCategoriesId","preparedSegment","productSegments","segmentName","BfPropertyService","translations","productsAttributesCode","externProductsAttributesId","visibility","assignment","usage","keepOnImport","productsAttributesDescriptionData","json","productsAttributesId","mappingData","mappingId","attributeId","search","direction","groupBy","order","channelsAttributesName","configurationType","configurationValue","erpSystemsConfigurations","PROPERTIES_TO_IMPORT_AS_ATTRIBUTES","CUSTOM_FIELDS_TO_IMPORT_AS_ATTRIBUTES","item","BfUnitService","BfSystemApiService","client","BfSalesChannelService","currencyId","currencyEntity","attributes","languageId","languageEntity","localeId","localeEntity","paymentMethodId","paymentMethodEntity","active","clientState","clientExists","clientInProgress","integrationUserCredentials","swagMarkets_systems","erp_systems","base_configuration_is_set","API_URL","API_VERSION","ACCESS_KEY","API_KEY","API_SECRET_KEY","onSave","getBfConfigSwagMarketsSystem","shops_currencies_is_set","isoCode","externalId","externalValue","exchangeRate","factor","currenciesName","currenciesCode","currenciesSymbol","symbol","decimalPlaces","decimalPrecision","currenciesData","put","storeShopsCurrencies","getLocaleEntity","shops_languages_is_set","languagesData","code","storeShopsLanguages","mainLanguage","sortOrder","shopsLanguages","updateBfConfigSwagMarketsSystem","shops","currencyCode","mainCurrency","shopsCurrencies","salesChannel","paymentMethodMatchingData","shippingMethodId","salesChannelShippingData","shippingMethods","salesChannelPaymentData","paymentMethods","payment_methods_is_set","shipping_methods_is_set","paymentMethodsId","erpPaymentMethodsCode","erpSystemsMatchingShippingMethodsData","erpSystemsMatchingPaymentMethodsData","salesChannelConfig","apiVersion","IS_SHOPWARE6_ADMIN_API","countryId","configurationKey","salesChannelConfiguration","processingTime","parseInt","DEFAULT_DELIVERY_TIMES","merchantShippingGroupName","MERCHANT_SHIPPING_GROUP_NAME","enableFba","ENABLE_FBA","useAmazonTaxCalculationService","USE_AMAZON_TAX_CALCULATION_SERVICE","amazonFcShelfLifeAttribute","AMAZON_FC_SHELF_LIFE","payPalEmail","PAYPAL_EMAIL","ebayBestOfferAbsolute","EBAY_BEST_OFFER_ABSOLUTE","ebayBestOfferAbsoluteAutoAccept","EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT","ebayBestOfferActive","EBAY_BEST_OFFER_ACTIVE","ebayBestOfferAutoAccept","EBAY_BEST_OFFER_AUTO_ACCEPT","ebayBestOfferRelative","EBAY_BEST_OFFER_RELATIVE","ebayBestOfferRelativeAutoAccept","EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT","useBrandAsManufacturer","EBAY_EXPORT_BRANDS_AS_MANUFACTURER","ebayBestOfferFix","EBAY_FIX_BEST_OFFER","ebayLogo","EBAY_LOGO","ebayPlus","EBAY_PLUS_SELLER","sellerZip","sellerCity","feedbackComment","FEEDBACK_COMMENT","productSegment","productType","shippingPolicy","paymentPolicy","returnPolicy","BfProductApiService","shopsProductsIds","products","productIds","productId","bfProductId","productData","shopsProductsId","BfAmazonService","bfSalesChannelService","erpSystemsMatchingShippingMethods","shippingMethodsId","erpShippingMethodsCode","fba","prime","primeNextDay","primeSecondDay","amazonFbaPrimeShippingMethods","FBA_SHIPPING_METHODS_CODE","FBA_PAYMENT_METHODS_CODE","AMAZON_ARE_BATTERIES_REQUIRED","needsBatteryItem","AMAZON_DANGEROUS_GOODS_DEFAULT","dangerousGoodsItem","storeErpSystemsMatchingShippingMethods","console","log","amazonSegmentId","productTypesId","searchString","action","shopsProductsVariationsData","BfEbayService","ebayPaymentMethods","payment_methods_matching","isDirty","SHIPPING_POLICY","profileId","PAYMENT_POLICY","RETURN_POLICY","prepareShopsConfigurationData","mailIsValid","validateEmailAddress","logoUrlIsValid","validateLogoUrl","mailAddress","mailValidationRegEx","match","url","indexOf","BfPluginConfigurationService","override","showLabelName","showHelpTextIcon","helpTextDescription","String","helpTextWidth","Criteria","Data","sct","salesChannels","computed","salesChannelRepository","repositoryFactory","extendSalesChannelType","criteria","setPage","setLimit","addSorting","sort","addAssociation","Context","api","salesChannelTypes","_isCreated","typeId","assign","isCreated","extend","shopProductData","Array","required","currentContract","marketplaceName","selectedProduct","showProductDetailModal","showAsinManagement","checkClientState","getMarketplaceName","paginate","args","onEditProductClick","onAsinManagement","product","onOpenMarketplaceProductClick","getMarketplaceUrl","getProductId","marketplaceProductUrl","marketplaceProductId","productAsins","bookableContracts","userAuthorised","subProcessorData","showContractModal","showContractAgbModal","showContractCancelModal","selectedContract","confirmedAgb","confirmedPayment","currentLocale","totalProductsByChannel","showLoginModal","showPermissions","showSubProcessor","productRepository","formatDate","date","originDate","getDate","getMonth","getFullYear","openContractModal","getCountProductsFromBfChannels","closeLoginModal","openContractAgbModal","checkCurrentLocale","openContractCancelModal","openPermissionModal","onCloseContractModal","closePermissionsModal","goTo","openSubProcessorModal","closeSubProcessorModal","onCloseContractAgbModal","clearCheckboxes","onCloseContractCancelModal","onRemoveContract","bfContractService","cancelContract","identifier","handleSbpError","showAgbDialog","setNewContract","canCancelContract","productsCount","contractName","selectedContractLimit","items","setContract","setUserShopId","customerIdentifier","currentIsoLocale","split","manufacturer","getProductsBySalesChannel","productCriteria","addFilter","equals","total","repairIntegrationUser","bfPluginConfigurationService","tableData","acceptTermsAndConditions","acceptSubProcessor","prepareTableContractsData","openTermsAndConditions","feelContractFees","feelContractTransactions","feelContractLimits","tableRows","feelContractCheckMarksRow","row","contract","price","Intl","NumberFormat","style","currency","format","included","tableRow","columnNumber","closePermissionModal","currentContractName","isSalesChannelAmazon","oldSalesChannel","meta","$module","getSalesChannelByTypeId","loadComponent","newShippingMethods","oldShippingMethods","getIds","isDisabled","changedItem","propName","shippingMethodEntity","me","shippingItem","label","disabled","setDefaultShippingData","defaultShippingMethodsId","defaultShippingMethodsCode","includes","_isNew","beforeCreate","dangerousGoods","needsBattery","newSalesChannel","getShopsConfigurations","changedBattery","changedDangerousGoods","changedEnableFba","isSalesChannelEbay","isGeneralPage","Number","changeInput","fieldName","event","showErrorNotification","messageKey","propertyName","propertyLabel","defaultPropertyName","defaultPropertyLabel","propertyNameInDomain","helpText","propertyCollection","set","newCollection","defaultId","newDefaultId","propertyEntityName","entity","propertyNameKebabCase","Utils","string","kebabCase","multiSelectClass","singleSelectClass","defaultsValueError","State","getters","updateCollection","collection","addItem","removeItem","getNotInCollection","collectionWith","collectionWithout","find","searched","some","added","removed","domain","getDomainUsingValue","domains","updateDefault","defaultEntity","remove","has","Defaults","getComponentHelper","mapGetters","mapMutations","shortcuts","customFieldSets","isSaveSuccessful","metaInfo","$createTitle","toolTipSave","systemKey","$device","getSystemKey","appearance","createdComponent","loadEntityData","loadSalesChannel","getLoadSalesChannelCriteria","maintenanceIpWhitelist","setSalesChannelType","loadShopsConfigurations","loadErpSystemsConfiguration","storeApiVersion","setUseAdminApi","buildShopsConfigurations","getErpSystemsConfiguration","erpSystemsConfiguration","erpSystemsConfigurationObj","useNetPrice","USE_NET_PRICE","saveFinish","createEbaySalesChannelIsValid","storeEbayPolicies","storeEbaySpecificShopsConfigurations","storeAmazonSpecificShopsConfigurations","storeCurrencies","storeLanguages","storeErpSystemsConfiguration","storeSegmentMapping","storeCategoriesMapping","createDomainForSalesChannel","getPaymentMethodIdForAmazon","getPaymentMethodForAmazon","getPaymentMethodIdForEbay","getPaymentMethodForEbay","saveSalesChannelData","save","processing_time","activateDeactivateSalesChannelCronJobs","activateDeactivateFbaOrdersCron","updateMarketplaceConfiguration","storeSalesChannelLanguage","storeSalesChannelCountry","storeSalesChannelCurrency","$root","errors","salesChannelTypeName","placeholder","marketPlaceUrlPrefix","snippetSetEntity","pop","first","domainsEntity","hostname","language","snippetSet","snippetSetId","hreflangUseOnlyLocale","abortOnLanguageChange","hasChanges","saveOnLanguageChange","onChangeLanguage","setPolicy","policyName","storeErpSystemMatchingData","storeShopsConfigurationData","ebayNotifications","getSelectedCurrencyEntity","storeErpSystemsConfigurationCurrenciesMatching","getSelectedLanguagesEntity","storeErpSystemsConfigurationLanguagesMatching","storeUseAdminApi","preparedSegmentToSave","storeCategorySegmentMapping","getSelectedPaymentMethodEntity","clientRdy","showPolicies","shippingPolicies","shippingPoliciesIsLoading","selectedShippingPolicy","paymentPolicies","paymentPoliciesIsLoading","selectedPaymentPolicy","returnPolicies","returnPoliciesIsLoading","selectedReturnPolicy","errorLoadingPolicies","loadPolicies","loadData","getShippingPolicies","getPaymentPolicies","getReturnPolicies","getEbayPolicy","buildPolicies","policies","profileName","showTokenCard","oAuthTokenDate","authTokenDate","errorLoadingTokens","tokenLink","errorAuthTokenLink","errorOAuthTokenLink","getEbayTokenLink","getEbayOAuthToken","getEbayTokenExpires","oauthToken","tokenExpired","authorizeAuthToken","authorizeOAuthToken","paymentToBfInternalPaymentId","payPal","moneyXferAcceptedInCheckout","cashOnPickup","cod","ebayPayments","EntityCollection","payments","selectedPayment","focusPropName","paymentMethodsCreated","paymentMethodObjectCount","loadingPaymentMatching","newVal","oldVal","paymentMethodRepository","changedEbayPayment","paymentMethodProp","fromCollection","removeEbayPaymentData","prepareEbayPaymentData","enableSelectValue","updateCollectionData","setNoPaymentMethodMatching","noPaymentMethodMatching","getPaymentMethods","loadPaymentMethodsMatching","payment","reMapIdToPayment","map","replace","updateDefaultId","paymentPropName","found","splice","bfInternalPaymentIdToPayment","13","2","10","3","61","mapPropertyErrors","creatingNewSalesChannel","showDeleteModal","defaultSnippetSetId","marketplaceSettings","isSegmentLoading","showNotificationBox","isLoadingBaseData","connectionAssistantRouterLink","bfBpUnauthorized","connectionAssistantBtnStartDisabled","startInterval","productMigrationRequest","secretAccessKeyFieldType","showSecretAccessKey","mainNavigationCriteria","isDomainAware","storefrontSalesChannelTypeId","apiSalesChannelTypeId","customFieldCriteria","getProductMigrationRequestStatus","timedClientStateCheck","setCurrentSegment","currentSegment","$refs","segmentDropdown","currentCategorySegment","productSegmentsName","productTypesName","setSalesChannelAttributeValue","attributeName","getAssignedProductSegmentAndType","setSegment","onGenerateKeys","salesChannelService","generateKey","accessKey","onToggleActive","onCloseDeleteModal","onConfirmDelete","deleteSalesChannel","sendSystemData","sendErpSystemMatching","getIsMarketplaceConnected","buildConnectionAssistantRouterLink","isSalesChannelActivationSwitchEnabled","getMarketplaceId","storeIntegrationUserCredentialsToBf","storeSalesChannelDataToBf","SHOPWARE_SALES_CHANNEL_ID","SHOPWARE_SALES_CHANNEL_KEY","getContract","errorResponse","description","onSetNewContract","onCancelContract","getUserInformation","longLifeToken","shopSecret","getContractDetails","setSalesChannelId","getSalesChannelConfiguration","configuration","product_migration_request","getContracts","contracts","current","bookable","subprocessors","StateDeprecated","utils","navigationCategoryId","beforeRouteEnter","to","from","next","createId","languageStore","getStore","categoryRepository","commit","getMainCategoryId","$super","marketplaces","countries","currencies","languages","marketplaceSettingsRepository","marketplaceRepository","getMarketplaces","channel_specific_id","onUpdateMarketplace","resetAssociationEntities","categoriesReloadTriggerEvent","swCategories","swCategoriesIds","marketplaceCategoriesId","channelsId","gridItems","isLoadingMarketplaceCategories","categoriesMappingStorage","shopsCategoriesGroups","toDeleteSwCategoryId","showEmptyState","categoriesRepository","columns","getColumns","loadMarketplaceId","loadSelectedSwCategories","reset","getMappedCategories","totalCount","shopsCategoriesGroupsExternShopsCategoriesIds","externGroupsId","externShopsCategoriesId","el","toString","loadShopwareCategories","equalsAny","categoryEntities","categoryEntity","swSelectionAdd","sortGridItems","marketplaceCategoriesIds","categoryAlreadyExists","breadCrumb","counter","breadCrumbLength","breadcrumb","itemName","crumb","addToStorage","translated","swCategoriesId","getCategoriesMappingStorage","$store","closeShowModal","removeCategoryAssignment","objects","entries","categoryMapping","saveCategoryMapping","pageChange","a","b","rawData","height","createColumnHeaderLabelForMarketplaceColumn","marketplaceCategories","categoryTree","loadMarketplaceCategoriesData","categoryCollection","findCategoriesById","getCategoryTree","parent_id","childCount","afterCategoryId","getCategoryById","marketplaceCategorySelectionAdd","marketplaceCategoryId","marketplaceCategoriesSelectionRemove","keyToRemove","parentProperty","tagLimit","term","newTerm","getTreeItems","selectedCategoriesPathIds","categoriesCollection","reduce","acc","visibleTags","slice","getCategories","isDeleted","parentVersionId","afterCategoryVersionId","splitBreadCrumb","isFetching","searchCategories","findCategoryByName","filterIsExpanded","bfProductsErrors","dangerZone","warningZone","greenZone","searchWord","shopProductsErrors","showProductsErrorsModal","sortBy","sortDirection","naturalSorting","fullPage","channelLimit","license","bfFilterCriteria","defaultFilters","storeKey","isExpanded","activeFilterNumber","getList","getProductColumns","listFilter","filterFactory","setTerm","bfProductApiService","loadMarketplace","getMarketplace","criteriaChanged","mergeWithStoredFilters","filters","getProductData","getProductErrors","productErrors","shopProductDataItem","shopsProductsData","externProductsId","paginateBf","openProductErrorsModal","productItem","errorCode","shopsTypesErrorsData","shopsTypesErrorsCode","parsedError","shopsProductsErrorsMessage","failedShopsFilter","marketplaceInitialDate","getProductNotTransferredError","expand","expanded","getErrorColumns","primary","width","translationKey","allowResize","align","sortable","visible","allConditions","allPolicies","shipping","returns","activeTab","formData","conditionAttribute","conditionNote","ebayProposedPrice","searchTerms","platinumKeywords","fbaActive","parentProduct","componentCreated","join","conditionId","returnsPolicy","paymentsPolicy","getAllConditions","changeFormInputValue","channels_id","saveData","saveProductData","proposedPrice","shopsCategories","defaultConditionValue","getAllAmazonConditions","getAllEbayConditions","dataSource","loadShopsProductsVariationsData","loadProductVariationData","hasAsin","shopsProductsVariationsOffers","shopsProductsVariationsId","bfShopsProductsVariationsId","productNumber","productsVariationsItemNumber","externShopsProductsVariationsId","shopsProductsVariationsOffersId","inlineEditSave","saveAmazonAsin","paginationData","allowInlineEdit","inlineEdit","skuLimit","getSkuLimit","bfSystemApiService","isSelected","associationEntity","currentCollection","debounce","attributeMappingData","showPropertyMappingModal","selectedProperty","getBfAttributeMappingData","attributeMapping","internalValue","getExternalName","onEditPropertyMappingClick","bfAttributeMappingData","externalName","attributeData","loadAttributeData","getBfMappingId","bfMappingId","selectionCount","createNotificationWarning","bfPropertyService","saveAttributeMappingData","selection","getUniqueValues","allElements","findIndex","element","sortList","variationProperties","gridColumns","showActions","showEmptyStateVariationProperties","propertyRepository","dataIndex","getVariationProperties","variationPropertiesIds","mappedVariationsProperties","getVariationsDiffsOptionsMapping","externProductsVariationsDiffsOptionsId","entityCollection","mappedInformation","getMappedInformation","selectedVariation","onInlineEditSave","propertyId","storeVariationsDiffsOptionsMapping","onDbClickCell","onEditCellValue","propertyGroup","transferredCustomFields","getTransferredCustomFields","customFieldsRepository","defaultCriteria","useNaturalSorting","getPropertyColumns","routerLink","checked","createPropertyUniqName","toggleItemCheck","$event","uniqueName","loadPropertyData","transferredProperties","getTransferredProperties","allProductsSegments","productsTypes","selectedSegment","selectedType","productSegmentAndType","getAllSegments","getSegmentTypes","prepareCategorySegmentSaveObject","segmentAndType","segmentKey","productTypeKey","feelSegmentTypesField","getSegmentsTypes","types","typeError","onSelectSegment","onSelectType","getSegments","clearMappedData","activeCategoryId","getSalesChannelInfo","setCurrentCategorySegment","mapObject","onSelectCategory","getCategorySegment","salesChannelTypeId","onSalesChannelChange","swPropertyGroup","amazonSegment","amazonProductType","isAmazon","$attrs","AttributesMappingUtils","propertyService","swagMarketsAttributesMappingData","loadAttributeMappingData","erpSystemsMappingData","itemData","extractMappedErpSystemsEntries","swagMarketsErpSystemsAttributesMappingData","swFieldName","erpSystemMappingExists","idx","array","storePropertyData","loadBfAttributeDataV2","query","createProductsAttributes","productsAttributesResponse","updateProductsAttributes","attributesMappingName","attributeCode","swagMarketsMappingId","removeAttributeMappingData","mappedData","swagMarketsId","extractedData","showAttributesMappingModal","attributesMappingModalItem","getAmazonSegmentByName","getProductTypesIdByProductTypesName","getProductTypesAttributesByProductType","swagMarketsAttributeName","getMarketplaceColumnsHeader","propertiesMapping","isLoadingPropertiesMapping","showDeleteModalPropertiesAttributesMapping","toRemoveAssignmentIem","propertyGroupRepository","getMappedErpSystemsList","loadSwagMarketsAttributesMapping","loadPropertiesMappingData","mapping","assigned","entityTranslations","locale","swProperty","saveInlineEdit","saveErpConfiguration","upsertAndGetProductsAttributes","transferErpSystemsConfigurations","upsertProductsAttributesResource","upsertProductsAttributesMapping","upsertProductsAttributesMappingResource","param","showRemoveAssignmentModal","closeRemoveAssignmentModal","removePropertiesAssignment","removeAttributesMappingAssignment","showAttributesMappingModalWindow","closeAttributesMappingModalWindow","isLoadingCustomFieldsMapping","customFieldsMapping","showDeleteModalCustomFieldsAttributesMapping","loadCustomFieldsMappingData","swCustomFields","removeCustomFieldsAssignment","afterIdProperty","rootParentId","searchable","treeItems","currentTreeSearch","isSearched","hasNoItems","categoryMappingRepository","immediate","initialOpened","afterSort","getItems","searchTerm","onChange","bfCategoryId","findCategoriesByIds","searchItems","currentSelected","opened","isOpened","openTreeItem","getTreeItemChildren","styling","childCOunt","updated","componentUpdated","treeItem","emitCheckedItem","onChangeItem","Collection","loadedCategories","loadedParentIds","translationContext","isLoadingInitialData","selectedItem","loadRootCategories","onGetTreeItems","addCategories","getSelectedCategories","searchTreeItems","searchText","contains","onChangeCategory","mapState","activeCategories","checkedCategories","selectedCategories","newValue","oldValue","onChangeRoute","loadChildCategories","checkItem","arr","getRootCategories","getChildCategories","afterId","unitMappings","selectedUnit","showUnitMappingModal","getCurrentData","currentData","unitMapping","externUnitsId","onEditUnitMappingClick","unit","unitData","amazonColumns","amazonUnitData","ebayColumns","ebayUnitData","gridUnitData","bfUnitService","unitId","measure","saveUnitMappingData","units","loadUnitMappingData","loadUnitData","version","targetVersion","color","icon","snippets","deDE","enEN","detail","base","amazonConnectionAssistant","ebayConnectionAssistant","supportTitle","requestType","prepareSupportTitle","userForm","salutationId","company","phoneNumber","email","requestAccept","sendRequest","getErrorsVariables","requestParams","requestSubject","languageCode","bfSupportService","propertyPath","capitalizedProperty","charAt","toUpperCase","getErrorCode","getModalTitle","supportSalutationIdError","supportNameError","supportCompanyError","supportEmailError","supportPhoneNumberError","supportMessageError","childCountProperty","checkItemsInitial","registerModule","namespaced","shopwareCategories","mutations","setSelectedCategories","setShopwareCategories","setMarketplaceCategories","setMarketplace","setCategoriesMappingStorage","actions","getShopwareCategories","getMarketplaceCategories","BfContractService","credentials","serialiseObjectInQueryParameters","encodeURIComponent","getSwQueryParams","getSbpHeaders","listToStyles","list","styles","newStyles","part","css","media","sourceMap","parts","hasDocument","DEBUG","Error","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","options","ssrIdKey","isOldIE","navigator","test","userAgent","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","createElement","appendChild","update","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","applyToTag","newObj","textStore","replaceText","replacement","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","firstChild","onAddChannel","onCloseModal","expandOnLoading","collapseItem","buildMenuTree","menuItems","salesChannelIdsToManufacturers","menuItem","keys"],"mappings":"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","file":"static/js/swag-markets.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/swagmarkets/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"5w23\");\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-shopware-segment-dropdown.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4e91f916\", content, true, {});","module.exports = \"{% block bf_amazon_connection_assistant_modal %}\\n<div>\\n    <sw-modal :title=\\\"title\\\"\\n              class=\\\"bf-amazon-connection-assistant-modal\\\"\\n              v-if=\\\"showModal\\\" @modal-close=\\\"closeModal\\\" :isLoading=\\\"isLoading\\\">\\n        {% block bf_amazon_connection_assistant_modal_content %}\\n            {% block bf_amazon_connection_assistant_modal_content_title %}\\n                <bf-amazon-connection-assistant-logo/>\\n            {% endblock %}\\n            <div class=\\\"bf-amazon-connection-assistant-modal__content\\\">\\n                {% block bf_amazon_connection_assistant_modal_content_descritpion %}\\n                {% endblock %}\\n                {% block bf_amazon_connection_assistant_modal_content_page %}\\n                    <div class=\\\"bf-amazon-connection-assistant-modal__content-page\\\">\\n                        <router-view\\n                            @set-title=\\\"setTitle\\\"\\n                            @ca-redirect=\\\"redirect\\\"\\n                            @ca-stepsToGetBack=\\\"addStepsToGetBack\\\"\\n                            @ca-setAccountData=\\\"setAccountData\\\"\\n                            @ca-setNextBtnState=\\\"setNextBtnState\\\"\\n                            @ca-isLoading=\\\"setIsLoadingState\\\"\\n                            @ca-resetNextBtnIsClicked=\\\"resetNextBtnIsClicked\\\"\\n                            @modal-close=\\\"closeModal\\\"\\n                            @showSupportModal=\\\"showSupportModal = true\\\"\\n                            :showSupportModal=\\\"showSupportModal\\\"\\n                            :nextBtnIsClicked=\\\"nextBtnIsClicked\\\">\\n                        </router-view>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n        {% block bf_amazon_connection_assistant_modal_footer %}\\n            <template #modal-footer>\\n                <sw-button\\n                    size=\\\"small\\\"\\n                    @click=\\\"closeModal\\\">\\n                        {{ $tc('button.cancel') }}\\n                </sw-button>\\n                <sw-button :disabled=\\\"nextIsDisabled\\\" size=\\\"small\\\" variant=\\\"primary\\\" @click=\\\"onClickNext\\\">\\n                    {{ $tc('button.next') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n    </sw-modal>\\n\\n    <bf-support\\n        marketplace=\\\"amazon\\\"\\n        requestType=\\\"product_migration_request\\\"\\n        :showSupportModal=\\\"showSupportModal\\\"\\n        :supportTitle=\\\"$tc('bf-support.modal.titleTransferProducts')\\\"\\n        @closeSupportModal=\\\"showSupportModal = false\\\"\\n    ></bf-support>\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-bookable-contracts.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0ac619e4\", content, true, {});","module.exports = \"{% block bf_amazon_connection_assistant_start_success_content %}\\n    <div class=\\\"bf-amazon-connection-assistant-start-success__content\\\">\\n        <bf-amazon-connection-assistant-account-status />\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_shopware_category_tree %}\\n    <div class=\\\"bf-sales-channel-shopware-category-tree\\\">\\n        {% block bf_sales_channel_shopware_category_content %}\\n            <div class=\\\"bf-sales-channel-shopware-category-tree__content\\\">\\n                {% block bf_sales_channel_shopware_category_content_tree %}\\n                    <div class=\\\"bf-sales-channel-shopware-category-tree__content-tree\\\">\\n                        <div class=\\\"bf-tree\\\">\\n                            <bf-tree\\n                                    :title=\\\"$tc('categories.shopware-tree-title')\\\"\\n                                    :items=\\\"categories\\\"\\n                                    @get-tree-items=\\\"onGetTreeItems\\\"\\n                                    @on-change=\\\"onChangeItem\\\"\\n                                    @search-tree-items=\\\"searchTreeItems\\\"\\n                            >\\n                                <template #items=\\\"{treeItems, onChangeItem}\\\">\\n                                    <bf-tree-item\\n                                        v-for=\\\"item in treeItems\\\"\\n                                        :key=\\\"item.id\\\"\\n                                        :item=\\\"item\\\"\\n                                        @on-change=\\\"onChangeItem\\\"\\n                                    ></bf-tree-item>\\n                                </template>\\n                            </bf-tree>\\n                        </div>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"\";","module.exports = \"<sw-card v-if=\\\"isSalesChannelAmazon\\\" :title=\\\"$tc('salesChannelSettings.card.title.extendedSettings')\\\">\\n    <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n    </sw-alert>\\n    <sw-container>\\n        <sw-switch-field\\n            :label=\\\"$tc('salesChannelSettings.amazon.label.enableFba')\\\"\\n            :value=\\\"enableFba\\\"\\n            :ghostValue=\\\"false\\\"\\n            :noMarginTop=\\\"true\\\"\\n            :disabled=\\\"isDisabled\\\"\\n            :helpText=\\\"$tc('salesChannelSettings.amazon.helpText.fba')\\\"\\n            size=\\\"small\\\"\\n            @change=\\\"changedEnableFba\\\">\\n        </sw-switch-field>\\n    </sw-container>\\n    <sw-alert v-if=\\\"!isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('bf-sales-channel.detail.amazonFbaRequiredInfo') }}\\n    </sw-alert>\\n    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0px 30px\\\">\\n        <sw-single-select :label=\\\"$tc('bf-sales-channel.detail.amazonDangerousGoodsLabel')\\\"\\n                          :disabled=\\\"isDisabled\\\"\\n                          :options=\\\"dangerousGoods\\\"\\n                          v-model=\\\"dangerousGoodsItem\\\"\\n                          @change=\\\"changedDangerousGoods\\\" required>\\n        </sw-single-select>\\n        <sw-single-select :label=\\\"$tc('bf-sales-channel.detail.amazonNeedsBatteryLabel')\\\"\\n                          :disabled=\\\"isDisabled\\\"\\n                          :options=\\\"needsBattery\\\"\\n                          v-model=\\\"needsBatteryItem\\\"\\n                          @change=\\\"changedBattery\\\" required>\\n        </sw-single-select>\\n    </sw-container>\\n</sw-card>\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_account %}\\n    <div class=\\\"bf-amazon-connection-assistant-account\\\">\\n        {% block bf_amazon_connection_assistant_account_content %}\\n            <div class=\\\"bf-amazon-connection-assistant-account__content\\\">\\n                <router-view v-on=\\\"$listeners\\\" :nextBtnIsClicked=\\\"nextBtnIsClicked\\\"></router-view>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"<sw-modal\\n    v-if=\\\"showAttributesMappingModal\\\"\\n    @modal-close=\\\"$emit('modal-close-attr-mapping-win')\\\"\\n    variant=\\\"large\\\"\\n    title=\\\"Attributes mapping values\\\">\\n    {% block bf_sales_channel_property_mapping__content %}\\n        {% block bf_sales_channel_property_mapping__content_base %}\\n            <sw-text-field\\n                type=\\\"text\\\"\\n                :label=\\\"$tc('propertyMapping.labels.search')\\\"\\n                :placeholder=\\\"$tc('propertyMapping.placeholder.search')\\\"\\n                v-model=\\\"searchString\\\"\\n{#                :name=\\\"property.productsAttributesId + '-search'\\\"#}\\n                @keyup.enter=\\\"loadAttributeData\\\">\\n            </sw-text-field>\\n            <bf-sales-channel-property-mapping-grid\\n                :dataSource=\\\"attributeData\\\"\\n                :columns=\\\"columns\\\"\\n                :isLoading=\\\"isLoading\\\"\\n                :showActions=\\\"false\\\"\\n                ref=\\\"attributeGrid\\\">\\n            </bf-sales-channel-property-mapping-grid>\\n        {% endblock %}\\n    {% endblock %}\\n    {% block swag_markets_attributes_mapping_modal__footer %}\\n        <template slot=\\\"modal-footer\\\">\\n            {% block swag_markets_attributes_mapping_modal__footer_cancel %}\\n                <sw-button\\n                    @click=\\\"$emit('modal-close-attr-mapping-win')\\\"\\n                    size=\\\"small\\\">\\n                    {{ $tc('propertyMapping.buttons.cancel') }}\\n                </sw-button>\\n            {% endblock %}\\n            {% block swag_markets_attributes_mapping_modal__footer_save %}\\n                <sw-button\\n                    @click=\\\"saveData\\\"\\n                    variant=\\\"primary\\\"\\n                    size=\\\"small\\\">\\n                    {{ $tc('propertyMapping.buttons.save') }}\\n                </sw-button>\\n            {% endblock %}\\n        </template>\\n    {% endblock %}\\n    {% block swag_markets_attributes_modal__pagination %}\\n        <sw-pagination :total=\\\"total\\\"\\n                       :limit=\\\"limit\\\"\\n                       :page=\\\"page\\\"\\n                       @page-change=\\\"pageChange\\\"\\n                       :steps=\\\"[10, 25]\\\">\\n        </sw-pagination>\\n    {% endblock %}\\n</sw-modal>\\n\";","module.exports = \"{% block bf_sales_channel_product_detail %}\\n<sw-modal :isLoading=\\\"isLoading\\\"\\n        :variant=\\\"'large'\\\"\\n        class=\\\"bf-modal\\\"\\n        :title=\\\"product.name\\\"\\n        @modal-close=\\\"$emit('modal-close')\\\">\\n    {% block bf_sales_channel_product_detail__content %}\\n    <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n    </sw-alert>\\n\\n    {% block bf_sales_channel_product_category_mapping %}\\n        <sw-inherit-wrapper v-model=\\\"product.categories\\\"\\n                            :inheritedValue=\\\"null\\\"\\n                            isAssociation\\n                            :label=\\\"$tc('sw-product.categoryForm.labelCategory')\\\">\\n            <template #content=\\\"{ currentValue, isInherited }\\\">\\n                <bf-sales-channel-product-category-mapping\\n                        :product=\\\"product\\\"\\n                        :categoriesCollection=\\\"currentValue ? currentValue : []\\\"\\n                        class=\\\"sw-product-detail__select-category\\\"\\n                        :disabled=\\\"isInherited\\\"\\n                        :key=\\\"isInherited\\\"\\n                        :placeholder=\\\"$tc('sw-product.categoryForm.placeholderCategory')\\\">\\n                </bf-sales-channel-product-category-mapping>\\n            </template>\\n        </sw-inherit-wrapper>\\n       {% endblock %}\\n    {% block bf_sales_channel_product_detail__content_base %}\\n    <div v-if=\\\"salesChannelType === 'amazon'\\\">\\n        <sw-card :title=\\\"$tc('products.edit.general')\\\" large>\\n            <sw-text-field\\n                    type=\\\"text\\\"\\n                    :label=\\\"$tc('products.edit.label.searchTerms')\\\"\\n                    :placeholder=\\\"$tc('products.edit.placeholder.searchTerms')\\\"\\n                    :value=\\\"formData.searchTerms\\\"\\n                    :name=\\\"formData.bfProductId + '-searchTerms'\\\"\\n                    @change=\\\"formData.searchTerms = $event\\\"\\n            ></sw-text-field>\\n            <sw-text-field\\n                    type=\\\"text\\\"\\n                    :label=\\\"$tc('products.edit.label.platinumKeywords')\\\"\\n                    :placeholder=\\\"$tc('products.edit.placeholder.platinumKeywords')\\\"\\n                    :value=\\\"formData.platinumKeywords\\\"\\n                    :name=\\\"formData.bfProductId + '-platinumKeywords'\\\"\\n                    @change=\\\"formData.platinumKeywords = $event\\\"\\n            ></sw-text-field>\\n        </sw-card>\\n\\n        <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" v-if=\\\"isDisabled\\\">\\n            {{ $tc('products.edit.invalidContractInfo') }}\\n        </sw-alert>\\n\\n        <sw-card :title=\\\"$tc('products.edit.basisBFeatures')\\\" large>\\n            <sw-text-field\\n                    type=\\\"text\\\"\\n                    :disabled=\\\"currentContract.name !== 'Plus'\\\"\\n                    :label=\\\"$tc('products.edit.label.merchantShippingGroupName')\\\"\\n                    :placeholder=\\\"$tc('products.edit.placeholder.merchantShippingGroupName')\\\"\\n                    :value=\\\"formData.merchantShippingGroupName\\\"\\n                    :name=\\\"formData.bfProductId + '-merchantShippingGroupName'\\\"\\n                    :helpText=\\\"$tc('salesChannelSettings.amazon.helpText.merchantShippingGroup')\\\"\\n                    @change=\\\"formData.merchantShippingGroupName = $event\\\"\\n            ></sw-text-field>\\n            <sw-switch-field\\n                :label=\\\"$tc('products.edit.label.fbaActive')\\\"\\n                :value=\\\"formData.fbaActive\\\"\\n                :ghostValue=\\\"false\\\"\\n                :noMarginTop=\\\"true\\\"\\n                :disabled=\\\"isDisabled\\\"\\n                :helpText=\\\"$tc('salesChannelSettings.amazon.helpText.fba')\\\"\\n                @change=\\\"formData.fbaActive = $event\\\"\\n            ></sw-switch-field>\\n        </sw-card>\\n    </div>\\n\\n    <div>\\n        <sw-single-select\\n            :label=\\\"this.$tc('products.edit.label.condition')\\\"\\n            :options=\\\"allConditions\\\"\\n            :value=\\\"formData.conditionAttribute\\\"\\n            v-model=\\\"formData.conditionAttribute\\\"\\n            @change=\\\"formData.conditionAttribute = $event\\\"\\n        ></sw-single-select>\\n    </div>\\n    <div v-if=\\\"salesChannelType === 'amazon'\\\">\\n        <sw-text-field\\n            :label=\\\"this.$tc('products.edit.label.conditionNote')\\\"\\n            :value=\\\"formData.conditionNote\\\"\\n            v-model=\\\"formData.conditionNote\\\"\\n            @change=\\\"formData.conditionNote = $event\\\"\\n        ></sw-text-field>\\n    </div>\\n\\n    <div v-if=\\\"salesChannelType === 'ebay'\\\">\\n        <sw-switch-field\\n            :label=\\\"$tc('products.edit.label.ebayPlus')\\\"\\n            :value=\\\"formData.ebayPlus\\\"\\n            :ghostValue=\\\"false\\\"\\n            :noMarginTop=\\\"true\\\"\\n            :disabled=\\\"isDisabled\\\"\\n            :helpText=\\\"$tc('salesChannelSettings.ebay.helpText.ebayPlus')\\\"\\n            @change=\\\"formData.ebayPlus = $event\\\"\\n        ></sw-switch-field>\\n\\n        <bf-sales-channel-ebay-best-offer\\n            :isGeneralPage=\\\"false\\\"\\n            :clientExists=\\\"clientExists\\\"\\n            :clientInProgress=\\\"clientInProgress\\\"\\n            :currentContractName=\\\"currentContract.name\\\"\\n            :ebayBestOfferActive=\\\"formData.ebayProposedPrice.ebayBestOfferActive\\\"\\n            :ebayBestOfferAbsolute=\\\"formData.ebayProposedPrice.ebayBestOfferAbsolute\\\"\\n            :ebayBestOfferRelative=\\\"formData.ebayProposedPrice.ebayBestOfferRelative\\\"\\n            :ebayBestOfferAutoAccept=\\\"formData.ebayProposedPrice.ebayBestOfferAutoAccept\\\"\\n            :ebayBestOfferAbsoluteAutoAccept=\\\"formData.ebayProposedPrice.ebayBestOfferAbsoluteAutoAccept\\\"\\n            :ebayBestOfferRelativeAutoAccept=\\\"formData.ebayProposedPrice.ebayBestOfferRelativeAutoAccept\\\"\\n            :ebayBestOfferFix=\\\"false\\\"\\n            @change=\\\"changeFormInputValue\\\"\\n        ></bf-sales-channel-ebay-best-offer>\\n\\n        <sw-card :title=\\\"$tc('bf-sales-channel.detail.titleGeneralEbayPolicies')\\\" large>\\n            <sw-single-select\\n                :name=\\\"formData.bfProductId + '-policiesShipping'\\\"\\n                :options=\\\"allPolicies.shipping\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayShippingPolicyLabel')\\\"\\n                v-model=\\\"formData.policies.shipping\\\"\\n            ></sw-single-select>\\n\\n            <sw-single-select\\n                :name=\\\"formData.bfProductId + '-policiesReturns'\\\"\\n                :options=\\\"allPolicies.returns\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayReturnPolicyLabel')\\\"\\n                v-model=\\\"formData.policies.returns\\\"\\n            ></sw-single-select>\\n\\n            <sw-single-select\\n                :name=\\\"formData.bfProductId + '-policiesPayments'\\\"\\n                :options=\\\"allPolicies.payments\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentPolicyLabel')\\\"\\n                v-model=\\\"formData.policies.payments\\\"\\n            ></sw-single-select>\\n        </sw-card>\\n    </div>\\n    {% endblock %}\\n    {% endblock %}\\n    {% block bf_sales_channel_product_detail__footer %}\\n    <template slot=\\\"modal-footer\\\">\\n        {% block bf_sales_channel_product_detail__footer_cancel %}\\n        <sw-button\\n            @click=\\\"$emit('modal-close')\\\"\\n            size=\\\"small\\\">\\n            {{ $tc('products.edit.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n        {% block bf_sales_channel_product_detail__footer_save %}\\n        <sw-button\\n            @click=\\\"saveData\\\"\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\">\\n            {{ $tc('products.edit.save') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","module.exports = \"{% block swag_markets_custom_fields_mapping %}\\n    <div>\\n        {% block swag_markets_custom_fields_grid_content %}\\n        <sw-data-grid\\n            v-if=\\\"!showEmptyState\\\"\\n            :dataSource=\\\"customFieldsMapping\\\"\\n            :columns=\\\"columns\\\"\\n            :allowInlineEdit=\\\"true\\\"\\n            @inline-edit-save=\\\"saveInlineEdit\\\"\\n            :showSelection=\\\"false\\\"\\n            :plainAppearance=\\\"true\\\"\\n            :isLoading=\\\"isLoadingCustomFieldsMapping\\\"\\n            style=\\\"min-height: 300px\\\">\\n            <template slot=\\\"column-assigned\\\" slot-scope=\\\"{ item }\\\">\\n                <sw-icon v-if=\\\"item.assigned\\\" name=\\\"small-default-checkmark-line-medium\\\" small class=\\\"is--active\\\"></sw-icon>\\n                <sw-icon v-else name=\\\"small-default-x-line-medium\\\" small class=\\\"is--inactive\\\"></sw-icon>\\n            </template>\\n            <template #actions=\\\"{ item }\\\">\\n                <sw-context-menu-item @click=\\\"showAttributesMappingModalWindow(item)\\\">\\n                    {{$tc('attributesMapping.selectAttribute')}}\\n                </sw-context-menu-item>\\n                <sw-context-menu-item\\n                    :disabled=\\\"!item.assigned\\\"\\n                    variant=\\\"danger\\\"\\n                    @click=\\\"showRemoveAssignmentModal(item)\\\">\\n                    {{ $tc('attributesMapping.removeAssignment') }}\\n                </sw-context-menu-item>\\n            </template>\\n        </sw-data-grid>\\n        {% endblock %}\\n        {% block swag_markets_attributes_mapping_properties_delete_modal %}\\n            <sw-modal\\n                v-if=\\\"showDeleteModalCustomFieldsAttributesMapping\\\"\\n                class=\\\"bf-sales-channel-product-errors-modal\\\"\\n                :title=\\\"$tc('bf-category-segment-mapping.deleteModalWarning')\\\"\\n                @modal-close=\\\"showDeleteModalCustomFieldsAttributesMapping = false\\\">\\n                {{ $tc('attributesMapping.removeWarningMsg') }}\\n                <template slot=\\\"modal-footer\\\">\\n                    {% block swag_markets_categories_mapping_footer_cancel %}\\n                        <sw-button\\n                            @click=\\\"closeRemoveAssignmentModal\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalCancelBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                    {% block swag_markets_attributes_mapping_properties_footer_delete %}\\n                        <sw-button\\n                            @click=\\\"removeCustomFieldsAssignment\\\"\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalDeleteBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </template>\\n            </sw-modal>\\n        {% endblock %}\\n        {% block swag_markets_custom_fields_mapping_empty_state %}\\n            <sw-empty-state\\n                v-else-if=\\\"showEmptyState\\\"\\n                :absolute=\\\"false\\\"\\n                :title=\\\"$tc('attributesMapping.custom-fields.emptyStateText')\\\"\\n                :showDescription=\\\"false\\\">\\n            </sw-empty-state>\\n        {% endblock %}\\n        {% block swag_markets_attributes_mapping_modal %}\\n            <attributes-mapping-modal\\n                :showAttributesMappingModal=\\\"showAttributesMappingModal\\\"\\n                :attributesMappingModalItem=\\\"attributesMappingModalItem\\\"\\n                :salesChannelType=\\\"salesChannelType\\\"\\n                :amazonSegment=\\\"amazonSegment\\\"\\n                :amazonProductType=\\\"amazonProductType\\\"\\n                @modal-close-attr-mapping-win=\\\"closeAttributesMappingModalWindow\\\"\\n                @save-attribute-mapping=\\\"saveInlineEdit\\\">\\n            </attributes-mapping-modal>\\n        {% endblock %}\\n        {% block swag_markets_properties_grid__pagination %}\\n            <sw-pagination :total=\\\"total\\\"\\n                           :limit=\\\"limit\\\"\\n                           :page=\\\"page\\\"\\n                           @page-change=\\\"pageChange\\\"\\n                           :steps=\\\"[5, 10]\\\">\\n            </sw-pagination>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_account %}\\n    <div class=\\\"bf-amazon-connection-assistant-account\\\">\\n        {% block bf_amazon_connection_assistant_account_content %}\\n            <div class=\\\"bf-amazon-connection-assistant-account__content\\\">\\n                <sw-card title=\\\"Account connected\\\" large>\\n                    <sw-container columns=\\\"auto 1fr auto\\\">\\n                        <sw-card-section slim>\\n                            {% block bf_amazon_connection_assistant_account_content_avatar %}\\n                                <div class=\\\"bf-amazon-connection-assistant-account__content-avatar\\\">\\n                                    <sw-avatar\\n                                        color=\\\"#189eff\\\"\\n                                        size=\\\"40px\\\"\\n                                        :firstName=\\\"user.firstName\\\"\\n                                        :lastName=\\\"user.lastName\\\"\\n                                        style=\\\"margin: 0 10px\\\"></sw-avatar>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                        <sw-card-section>\\n                            {% block bf_amazon_connection_assistant_account_content_user_details %}\\n                                <div class=\\\"bf-amazon-connection-assistant-account__content-user-details\\\">\\n                                    <h6>{{ user.firstName }} {{ user.lastName }}</h6>\\n                                    <p>{{ user.email }}</p>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                        <sw-card-section>\\n                            {% block bf_amazon_connection_assistant_account_content_button_group %}\\n                                <div class=\\\"bf-amazon-connection-assistant-account__content-button-group\\\">\\n                                    <sw-button size=\\\"small\\\">Disconnect</sw-button>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                    </sw-container>\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-tree.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"219e72f0\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-account-status.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"489f575e\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-start-success.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e2a42afc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-detail-property-transfer.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a634635a\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_account_product %}\\n    <div class=\\\"bf-ebay-connection-assistant-account-product__content\\\">\\n        {% block bf_ebay_connection_assistant_account_product_content_information %}\\n            <sw-card-section class=\\\"bf-ebay-connection-assistant-modal__content-description\\\">\\n                {{ $tc('ebay.productCheckDescription') }}\\n            </sw-card-section>\\n            <div v-if=\\\"hasRetailerProducts\\\" class=\\\"bf-ebay-connection-assistant-account-product__content-information\\\">\\n                {% block bf_ebay_connection_assistant_account_product_content_information_warning %}\\n                    <sw-alert\\n                        variant=\\\"error\\\"\\n                        v-if=\\\"errorProductCheck\\\"\\n                        class=\\\"bf-ebay-connection-assistant-account-product__content-information-warning\\\">\\n                        {{ $tc('error.ebay.productCheck') }}\\n                    </sw-alert>\\n                    <sw-alert variant=\\\"warning\\\" v-if=\\\"hasRetailerProducts\\\"\\n                              class=\\\"bf-ebay-connection-assistant-account-product__content-information-warning\\\">\\n                        {{ $tc('ebay.productCheckAccountHasAlreadyProducts') }}\\n                    </sw-alert>\\n                {% endblock %}\\n                {% block bf_ebay_connection_assistant_account_product_content_information_takeover %}\\n                    <div class=\\\"bf-ebay-connection-assistant-account-product__content-information-takeover\\\">\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_takeover_title %}\\n                            <h6 class=\\\"title\\\">{{ $tc('ebay.productCheckBookTransferTitle') }}</h6>\\n                        {% endblock %}\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_takeover_content %}\\n                            <p>{{ $tc('ebay.productCheckBookTransferContent') }}</p>\\n                        {% endblock %}\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_takeover_link %}\\n                        <sw-button\\n                            size=\\\"small\\\"\\n                            variant=\\\"contrast\\\"\\n                            @click=\\\"$emit('showSupportModal')\\\"\\n                            class=\\\"bf-amazon-connection-assistant-account-product-content-information-delete-button\\\">\\n                            {{ $tc('ebay.productCheckBookTransfer') }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n                {% block bf_ebay_connection_assistant_account_product_content_information_delete %}\\n                    <div class=\\\"bf-ebay-connection-assistant-account-product__content-information-delete\\\">\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_delete_title %}\\n                            <h6 class=\\\"title\\\">{{ $tc('ebay.productCheckDeleteExistingTitle') }}</h6>\\n                        {% endblock %}\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_delete_content %}\\n                            <p>{{ $tc('ebay.productCheckDeleteExistingContent') }}</p>\\n                        {% endblock %}\\n                        {% block bf_ebay_connection_assistant_account_product_content_information_delete_button %}\\n                        <sw-button\\n                            size=\\\"small\\\"\\n                            variant=\\\"danger\\\"\\n                            link=\\\"https://signin.ebay.de/signin/\\\"\\n                            class=\\\"bf-amazon-connection-assistant-account-product-content-information-delete-button\\\">\\n                            {{ $tc('ebay.productCheckDeleteExistingBtn') }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </div>\\n            <div v-if=\\\"!hasRetailerProducts && hasRetailerProducts !== null\\\" class=\\\"bf-ebay-connection-assistant-account-product__content-information\\\">\\n                {% block bf_ebay_connection_assistant_account_product_content_information_success %}\\n                    <sw-alert variant=\\\"success\\\"\\n                              class=\\\"bf-ebay-connection-assistant-account-product__content-information-success\\\">\\n                        {{ $tc('ebay.productCheckCongrats') }}\\n                    </sw-alert>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        <sw-container align=\\\"end\\\" justify=\\\"end\\\"\\n                      class=\\\"bf-ebay-connection-assistant-account-product__content-button-check\\\">\\n            {% block bf_ebay_connection_assistant_accout_product_check_button %}\\n                <sw-button\\n                    v-if=\\\"hasRetailerProducts || hasRetailerProducts === null\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"primary\\\"\\n                    :block=\\\"true\\\"\\n                    @click=\\\"productCheck\\\"\\n                    v-tooltip=\\\"tooltip\\\">\\n                    {{$tc('ebay.productCheckBtn')}}\\n                </sw-button>\\n            {% endblock %}\\n        </sw-container>\\n        {% block bf_amazon_connection_assistant_confirm_finish_modal %}\\n        <sw-modal\\n            :title=\\\"$t('ebay.amazonConfirmFinishModalTitle')\\\"\\n            v-if=\\\"showConfirmModal\\\"\\n            variant=\\\"small\\\"\\n            @modal-close=\\\"closeModal\\\">\\n            {% block bf_ebay_connection_assistant_confirm_fnish_modal_content %}\\n            <sw-card>\\n                {{ $tc('ebay.amazonConfirmFinishModalMessageFirstPart') }}<br>\\n                {{ $tc('ebay.amazonConfirmFinishModalMessageSecondPart') }}\\n            </sw-card>\\n            {% endblock %}\\n            {% block bf_ebay_connection_assistant_confirm_finish_footer %}\\n            <template #modal-footer>\\n                <sw-button size=\\\"small\\\" @click=\\\"closeModal\\\">\\n                    {{ $tc('button.cancel') }}\\n                </sw-button>\\n                <sw-button size=\\\"small\\\" variant=\\\"primary\\\" @click=\\\"confirmFinishModal\\\">\\n                    {{ $tc('button.finish') }}\\n                </sw-button>\\n            </template>\\n            {% endblock %}\\n        </sw-modal>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-account-status.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a47a06c8\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-tree-item.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"118c3e0c\", content, true, {});","module.exports = \"<sw-container>\\n    <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" class=\\\"mb-2\\\">\\n        {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n    </sw-alert>\\n    {% block bf_sales_channel_best_offer_selects__ebayBestOfferActive %}\\n        <sw-switch-field\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferActive')\\\"\\n            :value=\\\"ebayBestOfferActive\\\"\\n            :ghostValue=\\\"false\\\"\\n            :noMarginTop=\\\"true\\\"\\n            :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferActiveHelpText')\\\"\\n            :disabled=\\\"isDisabled\\\"\\n            size=\\\"small\\\"\\n            @change=\\\"$emit('change', 'ebayBestOfferActive', $event)\\\">\\n        </sw-switch-field>\\n    {% endblock %}\\n    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0 30px\\\">\\n        {% block bf_sales_channel_best_offer_selects__ebayBestOfferAbsolute %}\\n            <sw-number-field\\n                numberType=\\\"float\\\"\\n                :step=\\\"1\\\"\\n                :min=\\\"0\\\"\\n                :digits=\\\"2\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAbsolute')\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAbsoluteHelpText')\\\"\\n                :value=\\\"ebayBestOfferAbsolute\\\"\\n                @change=\\\"changeInput('ebayBestOfferAbsolute', $event)\\\"\\n                :disabled=\\\"!ebayBestOfferActive || isDisabled\\\">\\n            </sw-number-field>\\n        {% endblock %}\\n        {% block bf_sales_channel_best_offer_selects__ebayBestOfferRelative %}\\n            <sw-number-field\\n                numberType=\\\"float\\\"\\n                :step=\\\"1\\\"\\n                :min=\\\"0\\\"\\n                :max=\\\"100\\\"\\n                :digits=\\\"2\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferRelative')\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferRelativeHelpText')\\\"\\n                :value=\\\"ebayBestOfferRelative\\\"\\n                @change=\\\"changeInput('ebayBestOfferRelative', $event)\\\"\\n                :disabled=\\\"!ebayBestOfferActive || isDisabled\\\">\\n            </sw-number-field>\\n        {% endblock %}\\n    </sw-container>\\n    {% block bf_sales_channel_best_offer_selects__ebayBestOfferAutoAccept %}\\n        <sw-switch-field\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAutoAccept')\\\"\\n            :value=\\\"ebayBestOfferAutoAccept\\\"\\n            :ghostValue=\\\"false\\\"\\n            :noMarginTop=\\\"true\\\"\\n            :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAutoAcceptHelpText')\\\"\\n            :disabled=\\\"!ebayBestOfferActive || isDisabled\\\"\\n            size=\\\"small\\\"\\n            @change=\\\"$emit('change', 'ebayBestOfferAutoAccept', $event)\\\">\\n        </sw-switch-field>\\n    {% endblock %}\\n    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0 30px\\\">\\n        {% block bf_sales_channel_best_offer_selects__ebayBestOfferAbsoluteAutoAccept %}\\n            <sw-number-field\\n                numberType=\\\"float\\\"\\n                :step=\\\"1\\\"\\n                :min=\\\"0\\\"\\n                :digits=\\\"2\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAbsoluteAutoAccept')\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferAbsoluteAutoAcceptHelpText')\\\"\\n                :value=\\\"ebayBestOfferAbsoluteAutoAccept\\\"\\n                @change=\\\"changeInput('ebayBestOfferAbsoluteAutoAccept', $event)\\\"\\n                :disabled=\\\"!ebayBestOfferActive || !ebayBestOfferAutoAccept || isDisabled\\\">\\n            </sw-number-field>\\n        {% endblock %}\\n        {% block bf_sales_channel_best_offer_selects__ebayBestOfferRelativeAutoAccept %}\\n            <sw-number-field\\n                numberType=\\\"float\\\"\\n                :step=\\\"1\\\"\\n                :min=\\\"0\\\"\\n                :max=\\\"100\\\"\\n                :digits=\\\"2\\\"\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferRelativeAutoAccept')\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferRelativeAutoAcceptHelpText')\\\"\\n                :value=\\\"ebayBestOfferRelativeAutoAccept\\\"\\n                @change=\\\"changeInput('ebayBestOfferRelativeAutoAccept', $event)\\\"\\n                :disabled=\\\"!ebayBestOfferActive || !ebayBestOfferAutoAccept || isDisabled\\\">\\n            </sw-number-field>\\n        {% endblock %}\\n    </sw-container>\\n    {% block bf_sales_channel_best_offer_selects__ebayBestOfferFix %}\\n        <sw-switch-field\\n            v-if=\\\"isGeneralPage\\\"\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayBestOfferFix')\\\"\\n            :value=\\\"ebayBestOfferFix\\\"\\n            :ghostValue=\\\"false\\\"\\n            :noMarginTop=\\\"true\\\"\\n            :helpText=\\\"$tc('bf-sales-channel.detail.ebayBestOfferFixHelpText')\\\"\\n            :disabled=\\\"!ebayBestOfferActive || isDisabled\\\"\\n            size=\\\"small\\\"\\n            @change=\\\"$emit('change', 'ebayBestOfferFix', $event)\\\">\\n        </sw-switch-field>\\n    {% endblock %}\\n</sw-container>\\n\";","module.exports = \"{% block sw_data_grid_columns_slot %}\\n    <slot :name=\\\"`column-${column.property}`\\\"\\n          v-bind=\\\"{ item, itemIndex, column, columnIndex, compact }\\\">\\n\\n        <template v-if=\\\"column.property === 'external_name'\\\">\\n            {{ getExternalName(item) }}\\n        </template>\\n        <template v-else>\\n            {{ renderColumn(item, column) }}\\n        </template>\\n    </slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_actions %}\\n<slot name=\\\"detail-action\\\" v-bind=\\\"{ item }\\\">\\n    <sw-context-menu-item class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n                          @click=\\\"onEditPropertyMappingClick(item)\\\">\\n        {{ $tc('global.default.edit') }}\\n    </sw-context-menu-item>\\n</slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_bulk_modals %}\\n<bf-sales-channel-property-mapping-modal\\n    v-if=\\\"showPropertyMappingModal\\\"\\n    :title=\\\"selectedProperty.productsAttributesDescription[currentLocale].productsAttributesName\\\"\\n    :property=\\\"selectedProperty\\\"\\n    :bfAttributeMappingData=\\\"getBfAttributeMappingData()\\\"\\n    @modal-close=\\\"showPropertyMappingModal = false; $emit('load-attribute-mapping');\\\"\\n>\\n</bf-sales-channel-property-mapping-modal>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_page %}\\n    <div class=\\\"bf-amazon-connection-assistant\\\">\\n        {% block bf_amazon_connection_assistant_page_content %}\\n            <bf-amazon-connection-assistant-modal />\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","const {Application} = Shopware;\nconst { ApiService } = Shopware.Classes;\n\nclass BfSupportService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint, apiUrl) {\n        super(httpClient, loginService, apiEndpoint);\n\n        this.apiUrl = apiUrl;\n        this.localStorageKey = 'SwagMarketsBearerToken';\n        this.config = {};\n        this.headers = {};\n    }\n\n    sendRequest(data) {\n        return this.httpClient.post(\n            this.apiEndpoint + 'send-support-request',\n            data,\n            {\n                headers: this.getBasicHeaders()\n            })\n            .then((response) => {\n                return response;\n            })\n            .catch((error) => {\n                return error.response;\n            });\n    }\n}\n\nexport default BfSupportService;\n\nApplication.addServiceProvider('bfSupportService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfSupportService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets/',\n        ''\n    );\n});\n","const {ApiService} = Shopware.Classes;\n\nexport default class BfApiService extends ApiService {\n\n    constructor(httpClient, loginService, apiEndpoint, apiUrl) {\n        super(httpClient, loginService, apiEndpoint);\n\n        this.apiUrl = apiUrl;\n        this.localStorageKey = 'SwagMarketsBearerToken';\n        this.config = null;\n        this.headers = {};\n        this.salesChannelId = null;\n        this.salesChannelType = null;\n    }\n\n    async getToken() {\n        let token = localStorage.getItem(this.localStorageKey);\n\n        if (token == null) {\n            const result = await this.authorize();\n            return this.setToken(result);\n        }\n\n        token = JSON.parse(token);\n\n        if (token.expiry < Date.now()) {\n            const result = await this.authorize();\n            return this.setToken(result);\n        }\n\n        return token;\n    }\n\n    setToken(data) {\n        const token = {\n            access: data.token,\n            expiry: Date.now() + (60 * data.expires_in)\n        };\n\n        localStorage.setItem(this.localStorageKey, JSON.stringify(token));\n\n        return token;\n    }\n\n    async authorize() {\n        const config = await this.getConfig();\n\n        return await this.httpClient.post(\n            this.apiUrl + 'oauth/token',\n            {\n                key: config.integration_user.access_key,\n                secret_key: config.integration_user.secret_access_key\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        }).catch((error) => {\n            return ApiService.handleResponse(error.response);\n        });\n    }\n\n    async getConfig(forceReload = false) {\n        if (this.config === null || forceReload === true) {\n            this.config = await this.httpClient.get(\n                this.apiEndpoint + '/config/load',\n                {\n                    headers: this.getBasicHeaders()\n                })\n                .then((response) => {\n                    return ApiService.handleResponse(response.data.data);\n                })\n                .catch((error) => {\n                    return ApiService.handleResponse(error.response);\n                });\n        }\n\n        return this.config;\n    }\n\n    async getShopId() {\n        return await this.getConfig()\n            .then((config) => {\n                return config.swagMarkets_business_platform.shop_id\n            });\n    }\n\n    setSalesChannelId(salesChannelId) {\n        this.salesChannelType = null;\n        this.salesChannelId = salesChannelId;\n    }\n\n    setSalesChannelType(salesChannelType) {\n        this.salesChannelType = salesChannelType;\n    }\n\n    async loadSalesChannelType() {\n        return await this.httpClient.get(\n            this.apiEndpoint + '/sales-channel-type/load/' + this.salesChannelId,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response.data.data);\n        }).catch((error) => {\n            return ApiService.handleResponse(error.response);\n        });\n    }\n\n    async getSalesChannelType() {\n        if (this.salesChannelType === null) {\n            this.salesChannelType = await this.loadSalesChannelType();\n            this.salesChannelType = this.salesChannelType.toLowerCase();\n        }\n\n        return this.salesChannelType;\n    }\n\n    async getChannelId() {\n        const config = await this.getConfig(),\n            salesChannelType = await this.getSalesChannelType();\n\n        if (salesChannelType === 'amazon') {\n            const request = this.post(\n                'channels/search',\n                {\n                    filter: [\n                        {\n                            field: 'channel_specific_id',\n                            type: '=',\n                            value: config.amazon_configuration.marketplace_id\n                        }\n                    ]\n                }\n            )\n\n            return await request.then((result) => { return result.data[0].id });\n        }\n\n        if (salesChannelType === 'ebay') {\n            const request = this.post(\n                'channels/search',\n                {\n                    filter: [\n                        {\n                            field: 'channel_specific_id',\n                            type: '=',\n                            value: config.ebay_configuration.marketplace_id\n                        }\n                    ]\n                }\n            )\n            return await request.then((result) => { return result.data[0].id });\n        }\n    }\n\n    async getHeaders() {\n        let token = await this.getToken();\n\n        return {\n            'Authorization': `Bearer ${token.access}`,\n            'Content-Type': 'application/json'\n        }\n    }\n\n    /**\n     * @param resource\n     * @param data\n     * @returns {Promise<*>}\n     */\n    async get(resource, data) {\n        return this.httpClient.get(\n            this.apiUrl + resource,\n            {\n                headers: await this.getHeaders(),\n                params: data\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    };\n\n    /**\n     * @param resource\n     * @param data\n     * @returns {Promise<*>}\n     */\n    async post(resource, data) {\n        return this.httpClient.post(\n            this.apiUrl + resource,\n            data,\n            {\n                headers: await this.getHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param resource\n     * @param params\n     * @returns {Promise<*>}\n     */\n    async delete(resource, params) {\n        return this.httpClient.delete(\n            this.apiUrl + resource,\n            {\n                headers: await this.getHeaders(),\n                data: {\n                    ...params\n                }\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application} = Shopware;\n\nconst ApiService = Shopware.Classes.ApiService;\n\nclass BfConnectionAssistantService extends BfApiService {\n    /**\n     * @param retailerId\n     * @param mwsToken\n     * @returns {Promise<*>}\n     */\n    async authorizeAmazon(retailerId, mwsToken, marketplaceId) {\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n        return await this.httpClient.get(\n            this.apiUrl  +'amazon/validate-account-connection', {\n                params: {\n                    shopId: shopId,\n                    mwsAuthToken: mwsToken,\n                    sellerId: retailerId,\n                    marketplaceId: marketplaceId\n                },\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async ebayConnectLink() {\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/connect-link/'+shopId,\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async ebayOAuthTokenLink(){\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/oauth-connect-link/'+shopId,\n            {\n                headers: await this.getHeaders()\n            }\n        )\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async ebayAuthorizationTokenState(){\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/connect-token-state/'+shopId,\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async ebayAuthorizationOAuthTokenState(){\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/connect-oauth-token-state/'+shopId,\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param siteId\n     * @returns {Promise<*>}\n     */\n    async ebaySiteIdCheck(siteId){\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/site/' + siteId,\n            {\n                headers: await this.getHeaders()\n            }\n        )\n    }\n\n    /**\n     * @param channelName\n     * @param toStoreParams\n     * @returns {Promise<*>}\n     */\n    async storeShopsConfigurations(channelName, toStoreParams){\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.post(\n            this.apiUrl + channelName + '/brickfox/shops/configurations',{\n                shopId: shopId,\n                shopsConfigurations: toStoreParams.shopsConfigurations\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * Triggers the import at the swagMarkets side to import the shops categories for the given channel.\n     * @param channelName\n     * @returns {Promise<void>}\n     */\n    async triggerCategoriesImport(channelName) {\n        let config = await this.getConfig(),\n            shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        this.httpClient.post(\n            this.apiUrl + 'channels-categories/triggerBrickfoxImport',\n            {\n                shopId: shopId,\n                channelType: channelName\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        )\n    }\n\n    /**\n     * @param channelName\n     * @param params\n     * @returns {Promise<*>}\n     */\n    async validateMarketplace(channelName, params){\n        let config = await this.getConfig();\n            params.shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + channelName + '/validate-marketplace', {\n                params: params,\n                headers: await this.getHeaders()\n            }\n        )\n    }\n\n    validateMarketplaceDummy(){\n        return true;\n    }\n\n    validateProductCheckDummy(tried = 0){\n        if (tried === 0){\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param channelName\n     * @param params\n     * @returns {Promise<*>}\n     */\n    async marketplaceArticleExists(channelName, params) {\n        let config = await this.getConfig();\n        params.shopId = this.getShopId(config.swagMarkets_business_platform);\n\n        return await this.httpClient.get(\n            this.apiUrl + channelName + '/article-listing-exists',\n            {\n                params: params,\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param baseId\n     * @returns {string|*}\n     */\n    closeModal(baseId) {\n        let redirectUrl = document.location.origin;\n\n        if (baseId) {\n            redirectUrl += '#/bf/sales/channel/detail/' + baseId + '/base';\n            return redirectUrl;\n        }\n\n        return '';\n    }\n\n    /**\n     *\n     * @param obj\n     * @returns {string|*}\n     */\n    getShopId(obj) {\n        if (obj.hasOwnProperty('shop_id') && obj.shop_id !== undefined && obj.shop_id.length > 0) {\n            return obj.shop_id;\n        }\n\n        return '';\n    }\n}\n\nexport default BfConnectionAssistantService;\n\nApplication.addServiceProvider('BfConnectionAssistantService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfConnectionAssistantService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import template from './bf-amazon-connection-assistant-modal.html.twig';\nimport './bf-amazon-connection-assistant-modal.scss';\n\nconst {Component} = Shopware;\nComponent.register('bf-amazon-connection-assistant-modal', {\n    template,\n    inject: [\n        'BfConnectionAssistantService',\n    ],\n    data() {\n        return {\n            title: this.$tc('amazon.baseTitle'),\n            buttonConfig: [],\n            showModal: false,\n            stepsToGetBack: -1,\n            marketplaceId: '',\n            accountData: {\n                retailerId: '',\n                mwsToken: ''\n            },\n            nextIsDisabled: true,\n            nextBtnIsClicked: false,\n            isLoading: false,\n            isFinished: false,\n            showSupportModal: false\n        }\n    },\n    methods: {\n        closeModal(isFinished) {\n            if (isFinished === true) {\n                this.isFinished = isFinished;\n            }\n            this.showModal = false;\n\n        },\n        setTitle(title) {\n            this.title = title;\n        },\n        redirect(routerName) {\n            this.$router.push({\n                name: routerName,\n                params: {accountData: this.accountData, marketplaceId: this.marketplaceId}\n            });\n        },\n        addStepsToGetBack() {\n            this.stepsToGetBack -= 1;\n        },\n        setAccountData(retailerId, mwsToken) {\n            this.accountData.retailerId = retailerId;\n            this.accountData.mwsToken = mwsToken;\n        },\n        setNextBtnState(state) {\n            this.nextIsDisabled = state;\n        },\n        onClickNext() {\n            this.nextBtnIsClicked = true;\n        },\n        resetNextBtnIsClicked() {\n            this.nextBtnIsClicked = false;\n        },\n        setIsLoadingState(state) {\n            this.isLoading = state;\n        }\n    },\n    mounted() {\n        this.showModal = true;\n        if (!this.$route.params.marketplaceId) {\n            this.showModal = false;\n        }\n        this.marketplaceId = this.$route.params.marketplaceId;\n    },\n    watch: {\n        showModal(val) {\n            if (val === false) {\n                if (this.isFinished === false) {\n                    this.$router.go(this.stepsToGetBack);\n                }\n                if (this.isFinished === true) {\n                    //bad work around for force reload\n                    this.$router.go(0);\n                }\n            }\n        }\n    }\n});\n","import template from './bf-amazon-connection-assistant-logo.html.twig';\nimport './bf-amazon-connection-assistant-logo.scss';\n\nShopware.Component.register('bf-amazon-connection-assistant-logo', {\n    template\n});\n","import template from './bf-amazon-connection-assistant-account-status.html.twig';\nimport './bf-amazon-connection-assistant-account-status.scss';\n\nShopware.Component.register('bf-amazon-connection-assistant-account-status', {\n    template,\n    inject: ['userService'],\n    data() {\n        return {\n            user: {}\n        }\n    },\n    created() {\n        this.getUser();\n    },\n    methods: {\n        getUser() {\n            this.userService.getUser()\n                .then(response => {\n                    this.user = response.data;\n                });\n        }\n    }\n});\n","import template from './index.html.twig';\nimport './index.scss';\n\nShopware.Component.register('bf-amazon-connection-assistant-index', {\n    template\n});\n\n","import template from './bf-amazon-connection-assistant-start.html.twig';\nimport './bf-amazon-connection-assistant-start.scss';\n\nShopware.Component.register('bf-amazon-connection-assistant-start', {\n    template,\n    data() {\n        return {\n            title: null\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    methods: {\n        setTitle() {\n            this.title = 'Amazon connection assistant';\n            this.$emit('set-title', this.title);\n        },\n        getTitle() {\n            return this.title;\n        },\n    }\n});\n","import template from './bf-amazon-connection-assistant-start-authorize.html.twig';\nimport './bf-amazon-connection-assistant-start-authorize.scss';\n\nconst {Component, Service, Mixin} = Shopware;\n\nComponent.register('bf-amazon-connection-assistant-start-authorize', {\n    template,\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    inject: ['BfConnectionAssistantService'],\n    data() {\n        return {\n            retailerId: null,\n            mwsToken: null,\n            title: this.$parent.getTitle(),\n            howToFirstPart: this.$tc('amazon.howTo.mwsNotificationHowToFirstPart',0,{link: \"<a href=\\\"https://sellercentral.amazon.de/gp/mws/registration/register.html\\\" target=\\\"_blank\\\">SellerCentral</a>\"})\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('amazon.baseTitle') + this.$tc('amazon.step1');\n\n            this.$emit('set-title', title);\n        },\n        authorizeManual() {\n            const retailerId = this.retailerId;\n            const mwsToken = this.mwsToken;\n            if (this.validate(retailerId, mwsToken) === true) {\n                this.$emit('ca-isLoading', true);\n                this.BfConnectionAssistantService.authorizeAmazon(\n                    retailerId,\n                    mwsToken,\n                    this.$route.params.marketplaceId).then(response =>{\n                    if (response.data.success === true && response.status === 200) {\n                        this.BfConnectionAssistantService.storeShopsConfigurations('amazon', {\n                            shopsConfigurations: {\n                                MERCHANT_ID: retailerId,\n                                MWS_AUTH_TOKEN: mwsToken\n                            }\n                        }).then(response => {\n                            this.$emit('ca-isLoading', false);\n                            this.createNotificationSuccess({\n                                title: this.$tc('success.amazon.title'),\n                                message: this.$tc('success.amazon.accountConnectionSuccess')\n                            })\n                            //add account data\n                            this.$emit('ca-setAccountData', retailerId, mwsToken)\n                            //before redirect add 1 to steps to get back\n                            this.$emit('ca-stepsToGetBack');\n                            //redirect to next step\n                            this.$emit('ca-redirect', 'bf.sales.channel.detail.base.amazonConnectionAssistant.account.marketplace');\n                        }).catch(error => {\n                            this.$emit('ca-isLoading', false);\n                            this.createNotificationError({\n                                title: this.$tc('error.amazon.title'),\n                                message: this.$tc('error.amazon.accountConnectionError')\n                            })\n                        });\n                    } else {\n                        this.$emit('ca-isLoading', false);\n                        this.createNotificationError({\n                            title: this.$tc('error.amazon.title'),\n                            message: this.$tc('error.amazon.accountConnectionError')\n                        })\n                    }\n                }).catch((error) => {\n                    this.$emit('ca-isLoading', false);\n                    this.createNotificationError({\n                        title: this.$tc('error.amazon.title'),\n                        message: this.$tc('error.global.internalError')\n                    })\n                });\n            }\n        },\n\n        /**\n         * @param retailerId\n         * @param mwsToken\n         * @returns {boolean}\n         */\n        validate(retailerId, mwsToken){\n            if (retailerId === null || mwsToken === null || retailerId.length === 0 || mwsToken.length === 0) {\n                this.createNotificationError({\n                    title: this.$tc('error.amazon.title'),\n                    message: this.$tc('error.amazon.credentialValidationError')\n                });\n                return false;\n            }\n\n            return true;\n        }\n    }\n});\n","import template from './bf-amazon-connection-assistant-start-success.html.twig';\nimport './bf-amazon-connection-assistant-start-success.scss';\n\nShopware.Component.register('bf-amazon-connection-assistant-start-success', {\n    template,\n    data() {\n        return {\n            title: this.$parent.getTitle()\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    methods: {\n        setTitle() {\n            const title = !this.title ?  'Account Status' : this.title + ' - Account Status';\n\n            this.$emit('set-title', title);\n        }\n    }\n});\n","import template from './bf-amazon-connection-assistant-account.html.twig';\n\nShopware.Component.register('bf-amazon-connection-assistant-account', {\n    template,\n    props: {\n        nextBtnIsClicked: Boolean\n    }\n});\n","import template from './bf-amazon-connection-assistant-account-marketplace.html.twig';\nimport './bf-amazon-connection-assistant-account-marketplace.scss';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-amazon-connection-assistant-account-marketplace', {\n    template,\n    inject: ['BfConnectionAssistantService'],\n\n    props: {\n        nextBtnIsClicked: Boolean\n    },\n    data() {\n        return {\n            canRetailerSell: null,\n            tooltip: {\n                message: this.$tc('amazon.validateMarketplaceTooltip')\n            }\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    watch: {\n        nextBtnIsClicked: {\n            handler: function (val) {\n                if (val === true) {\n                    this.nextStep();\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('amazon.baseTitle') + this.$tc('amazon.step2');\n            this.$emit('set-title', title);\n        },\n        marketplaceCheck() {\n            this.$emit('ca-isLoading', true);\n            this.BfConnectionAssistantService.validateMarketplace('amazon', {\n                mwsAuthToken: this.$route.params.accountData.mwsToken,\n                sellerId: this.$route.params.accountData.retailerId,\n                marketplaceId: this.$route.params.marketplaceId\n            }).then((response) => {\n                if (response.data.success === true && response.status === 200 && response.data.data.isAllowedToListAtMarketplace === true) {\n                    this.BfConnectionAssistantService.storeShopsConfigurations('amazon', {\n                        shopsConfigurations: {\n                            MARKETPLACE: response.data.data.marketplaceId,\n                            URL: response.data.data.mwsEndpoint\n                        }\n                    }).then((response) => {\n                        this.BfConnectionAssistantService.triggerCategoriesImport('amazon');\n                        this.$emit('ca-isLoading', false);\n                        this.canRetailerSell = true;\n                        this.$emit('ca-setNextBtnState', false);\n                    }).catch((error) => {\n                        this.$emit('ca-isLoading', false);\n                        this.canRetailerSell = false;\n                    });\n                } else {\n                    this.$emit('ca-isLoading', false);\n                    return this.canRetailerSell = false;\n                }\n            }).catch((error) => {\n                this.$emit('ca-isLoading', false);\n                this.createNotificationError({\n                    title: this.$tc('error.amazon.title'),\n                    message: this.$tc('error.global.internalError')\n                })\n            })\n        },\n        nextStep() {\n            this.$emit('ca-stepsToGetBack');\n            this.$emit('ca-setNextBtnState', true);\n            this.$emit('ca-resetNextBtnIsClicked');\n            this.$emit('ca-redirect', 'bf.sales.channel.detail.base.amazonConnectionAssistant.account.product-check');\n        }\n    }\n});\n","import template from './bf-amazon-connection-assistant-account-product.html.twig';\nimport './bf-amazon-connection-assistant-account-product.scss';\n\nconst {Component, Mixin, Application} = Shopware\n\nComponent.register('bf-amazon-connection-assistant-account-product', {\n    template,\n    inject: [\n        'BfConnectionAssistantService',\n        'loginService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        nextBtnIsClicked: Boolean,\n        showSupportModal: Boolean\n    },\n    data() {\n        return {\n            hasRetailerProducts: null,\n            tooltip: {\n                message: this.$tc('amazon.productCheckTooltip')\n            },\n            showConfirmModal: false\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    watch: {\n        nextBtnIsClicked: {\n            handler: function (val) {\n                if (val === true) {\n                    this.showConfirmFinishModal();\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('amazon.baseTitle') + this.$tc('amazon.step3');\n            this.$emit('set-title', title);\n        },\n        productCheck() {\n            this.$emit('ca-isLoading', true);\n            this.BfConnectionAssistantService.marketplaceArticleExists('amazon',{\n                mwsAuthToken: this.$route.params.accountData.mwsToken,\n                sellerId: this.$route.params.accountData.retailerId,\n                marketplaceId: this.$route.params.marketplaceId\n            }).then((response) => {\n                this.$emit('ca-isLoading', false);\n                if (response.data.success === true && response.status === 200) {\n                    this.hasRetailerProducts = response.data.data.productsDataExists !== false;\n\n                    if (this.hasRetailerProducts === false) {\n                        this.$emit('ca-setNextBtnState', false)\n                    }\n                }else {\n                    this.$emit('ca-isLoading', false);\n                    this.createNotificationError({\n                        title: this.$tc('error.amazon.title'),\n                        message: this.$tc('error.global.internalError')\n                    })\n                }\n            }).catch((error) => {\n                this.$emit('ca-isLoading', false);\n                this.createNotificationError({\n                    title: this.$tc('error.amazon.title'),\n                    message: this.$tc('error.global.internalError')\n                })\n            });\n        },\n        nextStep() {\n        },\n        showConfirmFinishModal() {\n            this.showConfirmModal = true;\n        },\n        confirmFinishModal() {\n            this.showConfirmModal = false;\n            this.$emit('ca-isLoading', true);\n            this.sendIsConnectedDataToBackend();\n        },\n        closeModal() {\n            this.$emit(\"ca-resetNextBtnIsClicked\");\n            this.showConfirmModal = false;\n        },\n        sendIsConnectedDataToBackend(){\n            Application.getContainer('init').httpClient.post(\n                '/swagMarkets/amazon/finishConnectionAssistant',\n                {\n                    is_connected: true\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${this.loginService.getToken()}`\n                    }\n                }\n            ).then((response) =>{\n                this.$emit('ca-isLoading', false);\n                if (response.data.success === true) {\n                    this.createNotificationSuccess({\n                        title: this.$tc('success.amazon.title'),\n                        message: this.$tc('success.amazon.successfulFinishedConnectionAssistant')\n                    });\n                    this.$emit('modal-close', true);\n                } else {\n                    this.$emit(\"ca-resetNextBtnIsClicked\");\n                    this.createNotificationError({\n                        title: this.$tc('error.amazon.title'),\n                        message: this.$tc('error.amazon.confirmFinishSavingDataError')\n                    });\n                }\n            }).catch((error) =>{\n                this.$emit('ca-isLoading', false);\n                this.$emit(\"ca-resetNextBtnIsClicked\");\n                this.createNotificationError({\n                    title: this.$tc('error.amazon.title'),\n                    message: this.$tc('error.global.internalError')\n                })\n            });\n        }\n    }\n});\n","import '../../service/bf-connection-assistant.service';\n\n/* Importing components */\nimport './component/bf-amazon-connection-assistant-modal';\nimport './component/bf-amazon-connection-assistant-logo';\nimport './component/bf-amazon-connection-assistant-account-status';\n\n/* Importing pages */\nimport './page/index';\n\n\n/* Importing views */\nimport './view/bf-amazon-connection-assistant-start';\nimport './view/bf-amazon-connection-assistant-start-authorize';\nimport './view/bf-amazon-connection-assistant-start-success';\nimport './view/bf-amazon-connection-assistant-account';\nimport './view/bf-amazon-connection-assistant-account-marketplace';\nimport './view/bf-amazon-connection-assistant-account-product';\n\nconst {Module} = Shopware;\n\nModule.register('bf-amazon-connection-assistant', {\n    type: 'plugin',\n    name: 'swagMarkets-amazon-connection-assistant',\n    routes: {\n        index: {\n            component: 'bf-amazon-connection-assistant-index',\n            path: 'index',\n            redirect: {\n                name: 'bf.amazon.connection.assistant.index.start.authorize'\n            },\n            children: {\n                start: {\n                    component: 'bf-amazon-connection-assistant-start',\n                    path: 'start',\n                    children: {\n                        authorize: {\n                            component: 'bf-amazon-connection-assistant-start-authorize',\n                            path: 'authorize'\n                        },\n                        success: {\n                            component: 'bf-amazon-connection-assistant-start-success',\n                            path: 'success',\n                            redirect: {\n                                name: 'bf.amazon.connection.assistant.index.account'\n                            }\n                        }\n                    }\n                },\n                account: {\n                    component: 'bf-amazon-connection-assistant-account',\n                    path: 'account',\n                    redirect: {\n                        name: 'bf.amazon.connection.assistant.index.account.marketplace'\n                    },\n                    children: {\n                        marketplace: {\n                            component: 'bf-amazon-connection-assistant-account-marketplace',\n                            path: 'marketplace'\n                        },\n                        'product-check': {\n                            component: 'bf-amazon-connection-assistant-account-product',\n                            path: 'product-check'\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n","import template from './bf-ebay-connection-assistant-modal.html.twig';\nimport './bf-ebay-connection-assistant-modal.scss';\n\nconst {Component} = Shopware;\nComponent.register('bf-ebay-connection-assistant-modal', {\n    template,\n    inject: ['BfConnectionAssistantService'],\n    data() {\n        return {\n            title: 'Ebay Connection Assistant',\n            buttonConfig: [],\n            showModal: false,\n            stepsToGetBack: -1,\n            marketplaceId: '',\n            nextIsDisabled: true,\n            nextBtnIsClicked: false,\n            isLoading: false,\n            isFinished: false,\n            authTokenStateIntervalId: null,\n            showSupportModal: false\n        }\n    },\n    methods: {\n        closeModal(isFinished) {\n            if (isFinished === true) {\n                this.isFinished = isFinished;\n            }\n            this.showModal = false;\n\n        },\n        setTitle(title) {\n            this.title = title;\n        },\n        redirect(routerName) {\n            this.$router.push({\n                name: routerName,\n                params: {marketplaceId: this.marketplaceId}\n            });\n        },\n        addStepsToGetBack() {\n            this.stepsToGetBack -= 1;\n        },\n        setAccountData(retailerId, mwsToken) {\n            this.accountData.retailerId = retailerId;\n            this.accountData.mwsToken = mwsToken;\n        },\n        setNextBtnState(state) {\n            this.nextIsDisabled = state;\n        },\n        onClickNext() {\n            this.nextBtnIsClicked = true;\n        },\n        resetNextBtnIsClicked() {\n            this.nextBtnIsClicked = false;\n        },\n        setIsLoadingState(state) {\n            this.isLoading = state;\n        },\n        sleep(milliseconds){\n            return new Promise(resolve => setTimeout(resolve, milliseconds));\n        },\n        startCheckTokenState(){\n            this.setIsLoadingState(true);\n            this.authTokenStateIntervalId = setInterval(this.checkTokenState, 5000);\n        },\n        checkTokenState(){\n            this.BfConnectionAssistantService.ebayAuthorizationTokenState().then((response) =>{\n                if (response.status === 200 && response.data.success === true && response.data.data.isConnected === true){\n                    clearInterval(this.authTokenStateIntervalId);\n                    this.setIsLoadingState(false);\n                    this.addStepsToGetBack();\n                    this.redirect('bf.sales.channel.detail.base.ebayConnectionAssistant.start.authorize-oauth');\n                }\n            });\n        },\n        startCheckOAuthTokenState(){\n            this.setIsLoadingState(true);\n            this.authTokenStateIntervalId = setInterval(this.checkOAuthTokenState, 5000);\n        },\n        checkOAuthTokenState(){\n            this.BfConnectionAssistantService.ebayAuthorizationOAuthTokenState().then((response) =>{\n                if (response.status === 200 && response.data.success === true && response.data.data.isConnected === true){\n                    clearInterval(this.authTokenStateIntervalId)\n                    this.setIsLoadingState(false);\n                    this.addStepsToGetBack();\n                    this.redirect('bf.sales.channel.detail.base.ebayConnectionAssistant.account.marketplace');\n                }\n            });\n        }\n    },\n    mounted() {\n        this.showModal = true;\n        if (!this.$route.params.marketplaceId) {\n            this.showModal = false;\n        }\n        this.marketplaceId = this.$route.params.marketplaceId;\n    },\n    watch: {\n        showModal(val) {\n            if (this.authTokenStateIntervalId !== null && this.authTokenStateIntervalId !== undefined) {\n                clearInterval(this.authTokenStateIntervalId);\n            }\n            if (val === false) {\n                if (this.isFinished === false) {\n                    this.$router.go(this.stepsToGetBack);\n                }\n                if (this.isFinished === true) {\n                    //bad work around for force reload\n                    this.$router.go(0);\n                }\n            }\n        }\n    }\n});\n","import template from './bf-ebay-connection-assistant-logo.html.twig';\nimport './bf-ebay-connection-assistant-logo.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-logo', {\n    template\n});\n","import template from './bf-ebay-connection-assistant-account-status.html.twig';\nimport './bf-ebay-connection-assistant-account-status.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-account-status', {\n    template,\n    inject: ['userService'],\n    data() {\n        return {\n            user: {}\n        }\n    },\n    created() {\n        this.getUser();\n    },\n    methods: {\n        getUser() {\n            this.userService.getUser()\n                .then(response => {\n                    this.user = response.data;\n                });\n        }\n    }\n});\n","import template from './index.html.twig';\nimport './index.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-index', {\n    template\n});\n\n","import template from './bf-ebay-connection-assistant-start.html.twig';\nimport './bf-ebay-connection-assistant-start.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-start', {\n    template,\n    data() {\n        return {\n            title: null\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    methods: {\n        setTitle() {\n            this.title = 'Ebay connection assistant';\n            this.$emit('set-title', this.title);\n        },\n        getTitle() {\n            return this.title;\n        },\n    }\n});\n","import template from './bf-ebay-connection-assistant-start-authorize.html.twig';\nimport './bf-ebay-connection-assistant-start-authorize.scss';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-ebay-connection-assistant-start-authorize', {\n    template,\n    inject: ['BfConnectionAssistantService'],\n    data() {\n        return {\n            retailerId: null,\n            mwsToken: null,\n            title: this.$parent.getTitle(),\n            btnDisabled: false,\n            errorGetConnectionLink: false,\n            irpLink: '',\n            onConnectBtnClicked: false,\n            intervalId: null\n        }\n    },\n    created() {\n        this.setTitle();\n        this.getEbayConnectLink();\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('ebay.baseTitle') + this.$tc('ebay.step1');\n\n            this.$emit('set-title', title);\n        },\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        },\n        authorize(){\n            window.open(this.irpLink, '_blank');\n            this.$emit('ca-startCheckTokenState');\n        },\n        async dummyAuthorize() {\n            this.$emit('ca-isLoading', true);\n\n            await this.sleep(3000);\n\n            if (this.BfConnectionAssistantService.authorizeEbay() === true) {\n                this.$emit('ca-isLoading', false);\n                this.createNotificationSuccess({\n                    title: this.$tc('success.ebay.title'),\n                    message: this.$tc('success.ebay.accountConnectionSuccess')\n                });\n\n                this.$nextTick(() => {\n                    //before redirect add 1 to steps to get back\n                    this.$emit('ca-stepsToGetBack');\n                    //redirect to next step\n                    this.$emit('ca-redirect', 'bf.sales.channel.detail.base.ebayConnectionAssistant.account.marketplace');\n                });\n            }\n        },\n        async getEbayConnectLink(){\n            this.$emit('ca-isLoading', true);\n            await this.BfConnectionAssistantService.ebayConnectLink().then((response) => {\n                if (response.data.success === true && response.status === 200) {\n                    this.irpLink = response.data.data.irpLink;\n                    this.btnDisabled = false;\n                }\n            }).catch(() => {\n                this.errorGetConnectionLink = true;\n            });\n            this.$emit('ca-isLoading', false);\n        }\n    }\n});\n","import template from './bf-ebay-connection-assistant-start-authorize-oauth.html.twig';\nimport './bf-ebay-connection-assistant-start-authorize-oauth.scss';\n\nconst {Component} = Shopware;\n\nComponent.register(\"bf-ebay-connection-assistant-start-authorize-oauth\", {\n    template,\n    inject: ['BfConnectionAssistantService'],\n    data(){\n        return {\n            btnDisabled: false,\n            errorGetOAuthTokenLink: false,\n            oAuthTokenLink: '',\n            oAuthIntervalId: null\n        }\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('ebay.baseTitle') + this.$tc('ebay.step2');\n            this.$emit('set-title', title);\n        },\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        },\n        authorizeOAuth(){\n            window.open(this.oAuthTokenLink, '_blank');\n            this.$emit('ca-startCheckOAuthTokenState');\n        },\n        async getEbayOAuthTokenLink(){\n            this.$emit('ca-isLoading', true);\n            await this.BfConnectionAssistantService.ebayOAuthTokenLink().then((response) => {\n                this.oAuthTokenLink = decodeURIComponent(response.data.data.irpLink);\n            }).catch(() =>{\n                this.errorGetOAuthTokenLink = true;\n            });\n            this.$emit('ca-isLoading', false);\n        }\n    },\n    created(){\n        this.setTitle();\n        this.getEbayOAuthTokenLink();\n    }\n});\n","import template from './bf-ebay-connection-assistant-start-success.html.twig';\nimport './bf-ebay-connection-assistant-start-success.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-start-success', {\n    template,\n    data() {\n        return {\n            title: this.$parent.getTitle()\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    methods: {\n        setTitle() {\n            const title = !this.title ?  'Account Status' : this.title + ' - Account Status';\n\n            this.$emit('set-title', title);\n        }\n    }\n});\n","import template from './bf-ebay-connection-assistant-account.html.twig';\n\nShopware.Component.register('bf-ebay-connection-assistant-account', {\n    template,\n    props: {\n        nextBtnIsClicked: Boolean,\n    }\n});\n","import template from './bf-ebay-connection-assistant-account-marketplace.html.twig';\nimport './bf-ebay-connection-assistant-account-marketplace.scss';\n\nShopware.Component.register('bf-ebay-connection-assistant-account-marketplace', {\n    template,\n    inject: ['BfConnectionAssistantService'],\n    props: {\n        nextBtnIsClicked: Boolean\n    },\n    data() {\n        return {\n            canRetailerSell: null,\n            tooltip: {\n                message: this.$tc('amazon.validateMarketplaceTooltip')\n            }\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    watch: {\n        nextBtnIsClicked: {\n            handler: function (val) {\n                if (val === true) {\n                    this.nextStep();\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('ebay.baseTitle') + this.$tc('ebay.step3');\n\n            this.$emit('set-title', title);\n        },\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        },\n        async siteIdCheck(){\n            this.$emit('ca-isLoading', true);\n            await this.BfConnectionAssistantService.ebaySiteIdCheck(this.$route.params.marketplaceId).then((response) => {\n                if (response.status === 200 && response.data.success === true && response.data.data.siteId === true){\n                    this.BfConnectionAssistantService.storeShopsConfigurations('ebay', {\n                        shopsConfigurations: {\n                            EBAY_SITE_ID: this.$route.params.marketplaceId\n                        }\n                    }).then(() => {\n                       this.BfConnectionAssistantService.triggerCategoriesImport('ebay');\n                    });\n                    this.canRetailerSell = true;\n                    this.$emit('ca-setNextBtnState', false);\n                } else {\n                    this.canRetailerSell = false;\n                }\n            });\n            this.$emit('ca-isLoading', false);\n        },\n        nextStep() {\n            this.$emit('ca-stepsToGetBack');\n            this.$emit('ca-setNextBtnState', true);\n            this.$emit('ca-resetNextBtnIsClicked');\n            this.$emit('ca-redirect', 'bf.sales.channel.detail.base.ebayConnectionAssistant.account.product-check');\n        }\n    }\n});\n","import template from './bf-ebay-connection-assistant-account-product.html.twig';\nimport './bf-ebay-connection-assistant-account-product.scss';\n\nconst {Component, Mixin, Application} = Shopware\n\nComponent.register('bf-ebay-connection-assistant-account-product', {\n    template,\n    inject: [\n        'BfConnectionAssistantService',\n        'loginService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        nextBtnIsClicked: Boolean,\n        showSupportModal: Boolean\n    },\n    data() {\n        return {\n            hasRetailerProducts: null,\n            tooltip: {\n                message: this.$tc('ebay.productCheckTooltip')\n            },\n            showConfirmModal: false,\n            errorProductCheck: false\n        }\n    },\n    created() {\n        this.setTitle();\n    },\n    watch: {\n        nextBtnIsClicked: {\n            handler: function (val) {\n                if (val === true) {\n                    this.showConfirmFinishModal();\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        setTitle() {\n            const title = this.$tc('ebay.baseTitle') + this.$tc('ebay.step4');\n\n            this.$emit('set-title', title);\n        },\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        },\n        async productCheck(){\n            this.$emit('ca-isLoading', true);\n            await this.BfConnectionAssistantService.marketplaceArticleExists('ebay', {}).then((response) =>{\n                if (response.status === 200 && response.data.success === true){\n                    this.hasRetailerProducts = response.data.data.articleListingExists;\n                    this.$emit('ca-setNextBtnState', false);\n                } else {\n                    this.errorProductCheck = true;\n                }\n            }).catch((error) =>{\n               this.errorProductCheck = true;\n            });\n\n            this.$emit('ca-isLoading', false);\n        },\n        showConfirmFinishModal() {\n            this.showConfirmModal = true;\n        },\n        confirmFinishModal() {\n            this.showConfirmModal = false;\n            this.$emit('ca-isLoading', true);\n            this.sendIsConnectedDataToBackend();\n        },\n        closeModal() {\n            this.$emit(\"ca-resetNextBtnIsClicked\");\n            this.showConfirmModal = false;\n        },\n        sendIsConnectedDataToBackend() {\n            Application.getContainer('init').httpClient.post(\n                '/swagMarkets/ebay/finishConnectionAssistant',\n                {\n                    is_connected: true\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${this.loginService.getToken()}`\n                    }\n                }\n            ).then((response) => {\n                this.$emit('ca-isLoading', false);\n                if (response.data.success === true) {\n                    this.createNotificationSuccess({\n                        title: this.$tc('success.ebay.title'),\n                        message: this.$tc('success.ebay.successfulFinishedConnectionAssistant')\n                    });\n                    this.$emit('modal-close', true);\n                } else {\n                    this.$emit(\"ca-resetNextBtnIsClicked\");\n                    this.createNotificationError({\n                        title: this.$tc('error.ebay.title'),\n                        message: this.$tc('error.ebay.confirmFinishSavingDataError')\n                    });\n                }\n            }).catch((error) => {\n                this.$emit('ca-isLoading', false);\n                this.$emit(\"ca-resetNextBtnIsClicked\");\n                this.createNotificationError({\n                    title: this.$tc('error.ebay.title'),\n                    message: this.$tc('error.global.internalError')\n                })\n            });\n        }\n    }\n});\n","import '../../service/bf-connection-assistant.service';\n\n/* Importing components */\nimport './component/bf-ebay-connection-assistant-modal';\nimport './component/bf-ebay-connection-assistant-logo';\nimport './component/bf-ebay-connection-assistant-account-status';\n\n/* Importing pages */\nimport './page/index';\n\n\n/* Importing views */\nimport './view/bf-ebay-connection-assistant-start';\nimport './view/bf-ebay-connection-assistant-start-authorize';\nimport './view/bf-ebay-connection-assistant-start-authorize-oauth';\nimport './view/bf-ebay-connection-assistant-start-success';\nimport './view/bf-ebay-connection-assistant-account';\nimport './view/bf-ebay-connection-assistant-account-marketplace';\nimport './view/bf-ebay-connection-assistant-account-product';\n\nconst {Module} = Shopware;\n\nModule.register('bf-ebay-connection-assistant', {\n    type: 'plugin',\n    name: 'swagMarkets-ebay-connection-assistant',\n    routes: {\n        index: {\n            component: 'bf-ebay-connection-assistant-index',\n            path: 'index',\n            redirect: {\n                name: 'bf.ebay.connection.assistant.index.start.authorize'\n            },\n            children: {\n                start: {\n                    component: 'bf-ebay-connection-assistant-start',\n                    path: 'start',\n                    children: {\n                        authorize: {\n                            component: 'bf-ebay-connection-assistant-start-authorize',\n                            path: 'authorize'\n                        },\n                        success: {\n                            component: 'bf-ebay-connection-assistant-start-success',\n                            path: 'success',\n                            redirect: {\n                                name: 'bf.ebay.connection.assistant.index.account'\n                            }\n                        }\n                    }\n                },\n                account: {\n                    component: 'bf-ebay-connection-assistant-account',\n                    path: 'account',\n                    redirect: {\n                        name: 'bf.ebay.connection.assistant.index.account.marketplace'\n                    },\n                    children: {\n                        marketplace: {\n                            component: 'bf-ebay-connection-assistant-account-marketplace',\n                            path: 'marketplace'\n                        },\n                        'product-check': {\n                            component: 'bf-ebay-connection-assistant-account-product',\n                            path: 'product-check'\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application, Service} = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass BfCategoryService extends BfApiService {\n\n    /**\n     * @param marketplace\n     * @param page\n     * @param limit\n     * @returns {Promise<*>}\n     */\n    async getMappedCategories(marketplace, page = 1, limit = 10) {\n        return this.get(\n            marketplace + '/categories-mapping/v2',\n            {\n                shopId: await this.getShopId(),\n                page: page,\n                limit: limit,\n                loadRecursive: false\n            }\n        ).then((response) => {\n            return response;\n        });\n    }\n\n    /**\n     * @param channelId\n     * @returns {*}\n     */\n    isSalesChannelSwagMarkets(channelId) {\n        return this.httpClient.get(\n            '/swagMarkets/check-own-sales-channel' + channelId,\n            {\n                headers: this.headers\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    };\n\n    /**\n     * @param parentId\n     * @returns {Promise<*>}\n     */\n    async getCategories(parentId = null) {\n        return this.post(\n            'channels-categories/search',\n            {\n                limit: 500,\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"parentId\",\n                        type: \"=\",\n                        value: parentId\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    async getRootCategories() {\n        return this.post(\n            'channels-categories/search',\n            {\n                limit: 500,\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"parentId\",\n                        value: null\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    };\n\n    /**\n     * @param categoryId\n     * @returns {Promise<*>}\n     */\n    async getChildCategories(categoryId) {\n        return this.post(\n            'channels-categories/search',\n            {\n                limit: 500,\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"parentId\",\n                        type: \"=\",\n                        value: categoryId\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    };\n\n    /**\n     * @param id\n     * @returns {Promise<*>}\n     */\n    async getCategoryById(id) {\n        return this.get(\n            'channels-categories/' + id,\n        ).then((result) => {\n            return ApiService.handleResponse(result);\n        });\n    }\n\n    /**\n     * @param name\n     * @returns {Promise<*>}\n     */\n    async getCategoryByName(name) {\n        return this.post(\n            'channels-categories/search',\n            {\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"name\",\n                        type: \"=\",\n                        value: name\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param field\n     * @param values\n     * @returns {Promise<*>}\n     */\n    async findCategoriesBy(field, values) {\n        let filterCollection = []\n        filterCollection.push({\n            field: \"channelsId\",\n            type: \"=\",\n            value: await this.getChannelId()\n        });\n        values.forEach((id) => {\n            filterCollection.push({\n                \"field\": field,\n                \"type\": \"=\",\n                \"value\": id,\n                \"operator\": \"OR\"\n            })\n        });\n\n        return this.post(\n            'channels-categories/search',\n            {\n                filter: filterCollection\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n\n    }\n\n    /**\n     * @param name\n     * @returns {Promise<*>}\n     */\n    async findCategoryByName(name) {\n        return this.post(\n            'channels-categories/search',\n            {\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"name\",\n                        type: \"like\",\n                        value: \"%\" + name + \"%\"\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    };\n\n    /**\n     * @param categories\n     * @param specificKey\n     * @returns {Promise<*>}\n     */\n    findCategoriesById(categories, specificKey = {}) {\n        let filterCollection = []\n        categories.forEach((category) => {\n            filterCollection.push({\n                \"field\": \"external_channels_categories_id\",\n                \"type\": \"=\",\n                \"value\": category.external_channels_categories_id,\n                \"operator\": \"OR\"\n            })\n        });\n\n        return this.post(\n            'channels-categories/search',\n            {\n                filter: filterCollection,\n                specificKey: specificKey\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    findCategoriesByIds(ids) {\n        let filterCollection = []\n        ids.forEach((id) => {\n            filterCollection.push({\n                \"field\": \"id\",\n                \"type\": \"=\",\n                \"value\": id,\n                \"operator\": \"OR\"\n            })\n        });\n\n        return this.post(\n            'channels-categories/search',\n            {\n                filter: filterCollection\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param channelId\n     * @returns {*}\n     */\n    getSalesChannelTypeName(channelId) {\n        return this.httpClient\n            .get(\n                '/swagMarkets/get-sales-channel-type-name/' + channelId,\n                {\n                    headers: this.headers\n                }\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    };\n\n    /**\n     * @param channelId\n     * @returns {*}\n     */\n    getMerchantId(channelId) {\n        return this.httpClient\n            .get(\n                '/swagMarkets/get-merchant-id/' + channelId,\n                {\n                    headers: this.headers\n                }\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    };\n\n    /**\n     * @param shopwareCategory\n     * @param categories\n     * @param marketplace\n     * @returns {Promise<*>}\n     */\n    async saveCategoryMapping(shopwareCategory, categories, marketplace) {\n        return this.post(\n            marketplace + '/categories-mapping',\n            {\n                shopId: await this.getShopId(),\n                data: [\n                    {\n                        swCategoryId: shopwareCategory,\n                        channelsCategoriesId:\n                            [...categories]\n\n                    }\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param preparedSegment\n     * @returns {Promise<*>}\n     */\n    async storeCategorySegmentMapping(preparedSegment) {\n        return this.post(\n            'amazon/shops/store/product-segment',\n            {\n                shopId: await this.getShopId(),\n                productSegments: [\n                    preparedSegment\n                ]\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    async getSegments() {\n        let shopId = await this.getShopId();\n\n        if (shopId.length === 0) {\n            return false;\n        }\n\n        return this.get('amazon/product-segments/' + shopId)\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    };\n\n    async getCategorySegment(categoryId) {\n        return this.get('amazon/shops/load/product-segment/' + await this.getShopId() + '/' + categoryId)\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    async getSegmentsTypes(segmentName) {\n        return this.get('amazon/product-types/' + await this.getShopId() + '/' + segmentName)\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default BfCategoryService;\n\nApplication.addServiceProvider('BfCategoryService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfCategoryService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","const {Application} = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nimport BfApiService from \"./bf-api.service\";\n\nclass BfPropertyService extends BfApiService {\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async createProductsAttributes(id, translations) {\n        return this.post(\n            'attributes/create',\n            {\n                shopId: await this.getShopId(),\n                json: {\n                    productsAttributesCode: id,\n                    externProductsAttributesId: id,\n                    type: \"STRING\",\n                    visibility: \"FRONTEND\",\n                    assignment: \"ALL\",\n                    usage: \"SPECIAL\",\n                    keepOnImport: 1,\n                    productsAttributesDescriptionData: {\n                        translations\n                    }\n                }\n            }\n        )\n    }\n\n    /**\n     * @param id\n     * @param translations\n     * @returns {Promise<*>}\n     */\n    async updateProductsAttributes(id, translations) {\n        return this.post(\n            'attributes/update',\n            {\n                shopId: await this.getShopId(),\n                productsAttributesId: id,\n                json: {\n                    productsAttributesDescriptionData: {\n                        translations\n                    }\n                }\n            }\n        )\n    }\n\n    async loadAttributeMappingData() {\n        return this.get(\n            await this.getSalesChannelType() + '/attributes-mapping/load',\n            {\n                shopId: await this.getShopId()\n            }\n        );\n    }\n\n    async saveAttributeMappingData(data) {\n        return this.post(\n            await this.getSalesChannelType() + '/attributes-mapping/store',\n            {\n                shopId: await this.getShopId(),\n                mappingData: data\n            }\n        );\n    }\n\n    /**\n     * @param mappingId\n     * @returns {Promise<void>}\n     */\n    async removeAttributeMappingData(mappingId) {\n        return this.delete(\n            await this.getSalesChannelType() + '/attributes-mapping/' + mappingId,\n            {\n                shopId: await this.getShopId()\n            }\n        )\n    }\n\n    async loadAttributeValueMappingData(attributeId) {\n        return this.get(\n            await this.getSalesChannelType() + '/attributes-values-mapping/load',\n            {\n                shopId: await this.getShopId(),\n                channelId: await this.getChannelId(),\n                attributeId: attributeId\n            }\n        );\n    }\n\n    async saveAttributeValueMappingData(data) {\n        return this.post(\n            await this.getSalesChannelType() + '/attributes-values-mapping/store',\n            {\n                shopId: await this.getShopId(),\n                channelId: await this.getChannelId(),\n                mappingData: data\n            }\n        );\n    }\n\n    /**\n     *\n     * @param name\n     * @returns {Promise<*>}\n     * @deprecated use loadBfAttributeDataV2 instead\n     */\n    async loadBfAttributeData(name) {\n        return this.post(\n            'attributes/search',\n            {\n                shopId: await this.getShopId(),\n                name: name\n            }\n        );\n    }\n\n    /**\n     * @param search\n     * @returns {Promise<*>}\n     */\n    async loadBfAttributeDataV2(search) {\n        return this.post(\n            'attributes/search/v2',\n            {\n                shopId: await this.getShopId(),\n                search\n            }\n        );\n    }\n\n    /**\n     * @param name\n     * @param limit\n     * @param page\n     * @returns {Promise<*>}\n     */\n    async loadAttributeData(name, limit, page) {\n        return this.post(\n            'channels-attributes/search',\n            {\n                limit: limit,\n                page: page,\n                filter: [\n                    {\n                        field: \"channelsId\",\n                        type: \"=\",\n                        value: await this.getChannelId()\n                    },\n                    {\n                        field: \"name\",\n                        type: \"like\",\n                        value: name + '%'\n                    }\n                ],\n                groupBy: 'name',\n                order: {\n                    field: 'name',\n                    direction: 'ASC'\n                }\n            }\n        );\n    }\n\n    async loadAttributeValueData(channelsAttributesName, name) {\n        return this.post(\n            'channels-attributes-values/search',\n            {\n                limit: 500,\n                filter: [\n                    {\n                        field: [\"channelsAttributes\", \"name\"],\n                        type: \"=\",\n                        value: channelsAttributesName\n                    },\n                    {\n                        field: \"name\",\n                        type: \"like\",\n                        value: name + '%'\n                    }\n                ]\n            }\n        );\n    }\n\n    async loadPropertyData() {\n        let config = await this.getConfig();\n        if (config.swagMarkets_business_platform) {\n            return this.get('erpSystems/configurations/' + config.swagMarkets_business_platform.shop_id, {});\n        }\n    }\n\n    async storePropertyData(configurationType, configurationValue) {\n        let erpSystemsConfigurations = {},\n            config = await this.getConfig();\n\n        if (config.swagMarkets_business_platform) {\n            if (configurationType === 'property') {\n                erpSystemsConfigurations.PROPERTIES_TO_IMPORT_AS_ATTRIBUTES = configurationValue;\n            } else if (configurationType === 'custom_field') {\n                erpSystemsConfigurations.CUSTOM_FIELDS_TO_IMPORT_AS_ATTRIBUTES = configurationValue;\n            }\n\n            return this.post(\n                'erpSystems/configurations',\n                {\n                    shopId: config.swagMarkets_business_platform.shop_id,\n                    erpSystemsConfigurations: erpSystemsConfigurations\n                }\n            );\n        }\n    }\n\n    /**\n     * Get the properties who only exists in brickfox\n     * @returns {Promise<*>}\n     */\n    async getVariationProperties(page = 1, limit = 5) {\n        return this.httpClient.post(\n            this.apiUrl + 'variation-diff-options/search',\n            {\n                shopId: await this.getShopId(),\n                \"name\": \"*\",\n                limit: limit,\n                page: page\n            }, {headers: await this.getHeaders()}\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        })\n    }\n\n    /**\n     * Get the mapped properties\n     * @param channelType\n     * @returns {Promise<*>}\n     */\n    async getVariationsDiffsOptionsMapping(channelType) {\n        return this.httpClient.get(\n            this.apiUrl + channelType + '/variation-diff-options-mapping/load',\n            {\n                params: {shopId: await this.getShopId()},\n                headers: await this.getHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        })\n    }\n\n    /**\n     * Stores the mapping information into the brickfox database\n     * @param channelType\n     * @param item\n     * @returns {Promise<*>}\n     */\n    async storeVariationsDiffsOptionsMapping(channelType, item) {\n        return this.httpClient.post(\n            this.apiUrl + channelType + '/variation-diff-options-mapping/store',\n            {\n                shopId: await this.getShopId(),\n                mappingData: item\n            }, {headers: await this.getHeaders()}\n        )\n    }\n}\n\nexport default BfPropertyService;\n\nApplication.addServiceProvider('bfPropertyService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfPropertyService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","const {Application} = Shopware;\n\nimport BfApiService from \"./bf-api.service\";\n\nclass BfUnitService extends BfApiService {\n    async loadUnitData(name) {\n        return this.post(\n            'units/search',\n            {\n                shopId: await this.getShopId(),\n                name: name\n            }\n        );\n    }\n\n    async loadUnitMappingData() {\n        return this.get(\n            await this.getSalesChannelType() + '/units-mapping/load',\n            {\n                shopId: await this.getShopId()\n            }\n        );\n    }\n\n    async saveUnitMappingData(data) {\n        return this.post(\n            await this.getSalesChannelType() + '/units-mapping/store',\n            {\n                shopId: await this.getShopId(),\n                mappingData: data\n            }\n        );\n    }\n}\n\nexport default BfUnitService;\n\nApplication.addServiceProvider('bfUnitService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfUnitService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application} = Shopware;\nconst { ApiService } = Shopware.Classes;\n\nclass BfSystemApiService extends BfApiService {\n    async getSkuLimit() {\n        return this.httpClient.get(\n            this.apiUrl + 'system/configs/skuLimit',\n            {\n                headers: await this.getHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    async getLicense() {\n        const config = await this.getConfig();\n        return this.httpClient.get(\n            this.apiUrl + 'system/client/' + config.client.shop_id,\n            {\n                headers: await this.getHeaders()\n            }\n        )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default BfSystemApiService;\n\nApplication.addServiceProvider('bfSystemApiService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfSystemApiService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application} = Shopware;\nconst {ApiService} = Shopware.Classes;\n\nclass BfSalesChannelService extends BfApiService {\n\n    /**\n     * @param currencyId\n     * @returns {Promise<null>}\n     */\n    async getSelectedCurrencyEntity(currencyId) {\n        let httpClient = Application.getContainer('init').httpClient,\n            currencyEntity = null;\n        await httpClient.get(\n            '/currency/' + currencyId,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            if (response.status === 200) {\n                currencyEntity = response.data.data.attributes;\n                currencyEntity.id = response.data.data.id;\n            }\n        }).catch(() => {\n            currencyEntity = 'ERROR-FETCH-CURRENCY';\n        });\n        return currencyEntity;\n    }\n\n    /**\n     * @param languageId\n     * @returns {Promise<null>}\n     */\n    async getSelectedLanguagesEntity(languageId) {\n        let httpClient = Application.getContainer('init').httpClient,\n            languageEntity = null;\n        await httpClient.get(\n            '/language/' + languageId,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            if (response.status === 200) {\n                languageEntity = response.data.data.attributes;\n                languageEntity.id = response.data.data.id\n            }\n        }).catch(() => {\n            languageEntity = 'ERROR-FETCH-LANGUAGE';\n        });\n\n        return languageEntity;\n    }\n\n    /**\n     * @param localeId\n     * @returns {Promise<null>}\n     */\n    async getLocaleEntity(localeId) {\n        let httpClient = Application.getContainer('init').httpClient,\n            localeEntity = null;\n        await httpClient.get(\n            '/locale/' + localeId,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            localeEntity = response.data.data.attributes;\n        }).catch(() => {\n            localeEntity = 'ERROR-FETCH-LOCALE'\n        });\n\n        return localeEntity;\n    }\n\n    /**\n     * @param paymentMethodId\n     * @returns {Promise<null>}\n     */\n    async getSelectedPaymentMethodEntity(paymentMethodId) {\n        let httpClient = Application.getContainer('init').httpClient,\n            paymentMethodEntity = null;\n        await httpClient.get(\n            '/payment-method/' + paymentMethodId,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            if (response.status === 200) {\n                paymentMethodEntity = response.data.data.attributes;\n                paymentMethodEntity.id = response.data.data.id\n            }\n        }).catch(() => {\n            paymentMethodEntity = 'ERROR-FETCH-PAYMENT-METHOD';\n        });\n\n        return paymentMethodEntity;\n    }\n\n    /**\n     * @param marketplace\n     * @returns {Promise<*>}\n     */\n    getMarketplaces(marketplace) {\n        return this.post(\n            'channels/search',\n            {\n                filter: [\n                    {\n                        field: \"type\",\n                        type: \"=\",\n                        value: marketplace\n                    }\n                ]\n            }\n        )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            })\n    }\n\n    /**\n     * @param active\n     * @returns {Promise<void>}\n     */\n    async activateDeactivateSalesChannelCronJobs(active) {\n        await this.httpClient.post(\n            this.apiUrl + 'system/crons',\n            {\n                shopId: await this.getShopId(),\n                channelType: await this.getSalesChannelType(),\n                active: active\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        )\n    }\n\n    /**\n     * @returns {Promise<{clientExists: boolean, clientInProgress: boolean}>}\n     */\n    async checkClientState() {\n        let clientState = {clientExists: false, clientInProgress: false},\n            shopId = await this.getShopId();\n        if (shopId.length > 0) {\n            await this.httpClient.get(\n                this.apiUrl + 'system/client/' + shopId,\n                {\n                    headers: await this.getHeaders()\n                }\n            ).then((response) => {\n                if (response.status === 200 && response.data.data.id > 0) {\n                    clientState.clientExists = true;\n\n                    if (response.data.data.data.active === false) {\n                        clientState.clientInProgress = true;\n                    }\n                }\n            });\n        }\n        return clientState;\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async getShopsConfigurations() {\n        let shopId = await this.getShopId();\n        if (shopId.length > 0) {\n            return this.httpClient.get(\n                this.apiUrl + await this.getSalesChannelType() + '/brickfox/shops/configurations/' + shopId,\n                {\n                    headers: await this.getHeaders()\n                }\n            );\n        }\n\n        return {status: 500, data: {success: false}};\n    }\n\n    async getErpSystemsConfiguration() {\n        let shopId = await this.getShopId();\n        if (shopId.length > 0) {\n            return this.httpClient.get(\n                this.apiUrl + 'erpSystems/configurations/' + shopId,\n                {\n                    headers: await this.getHeaders()\n                }\n            );\n        }\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async storeIntegrationUserCredentialsToBf() {\n        let config = await this.getConfig(),\n            integrationUserCredentials = config.integration_user,\n            shopId = await this.getShopId();\n\n        if (shopId.length === 0){\n            return;\n        }\n\n        if (config.swagMarkets_business_platform.swagMarkets_systems.erp_systems.base_configuration_is_set === true) {\n            return false;\n        }\n\n        return this.httpClient.post(\n            this.apiUrl + 'erpSystems/configurations',\n            {\n                shopId: shopId,\n                erpSystemsConfigurations: {\n                    API_URL: window.location.origin + '/api/',\n                    API_VERSION: 'v1',\n                    ACCESS_KEY: 'sw-access-key',\n                    API_KEY: integrationUserCredentials.access_key,\n                    API_SECRET_KEY: integrationUserCredentials.secret_access_key\n                }\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param salesChannelType\n     * @returns {Promise<null>}\n     */\n    async getMarketplaceId(salesChannelType) {\n        let config = await this.getConfig(),\n            marketplaceId = null;\n\n        if (config.hasOwnProperty(salesChannelType + '_configuration')) {\n            if (config[salesChannelType + '_configuration'].hasOwnProperty('marketplace_id')) {\n                marketplaceId = config[salesChannelType + '_configuration'].marketplace_id;\n            }\n        }\n\n        return marketplaceId;\n    }\n\n    /**\n     * @param currencyEntity\n     * @param onSave\n     * @returns {Promise<void>}\n     */\n    async storeErpSystemsConfigurationCurrenciesMatching(currencyEntity, onSave = false) {\n        let config = await this.getBfConfigSwagMarketsSystem(),\n            shopId = await this.getShopId();\n        if(shopId.length === 0) {\n            return;\n        }\n\n        if ((config.shops_currencies_is_set === true && onSave === false) || currencyEntity === 'ERROR-FETCH-CURRENCY') {\n            return;\n        }\n\n        await this.httpClient.put(\n            this.apiUrl + 'erpSystems/store-matching-currencies',\n            {\n                shopId: await this.getShopId(),\n                currenciesData: {\n                    isoCode: currencyEntity.isoCode,\n                    externalId: currencyEntity.id,\n                    externalValue: currencyEntity.isoCode,\n                    exchangeRate: currencyEntity.factor,\n                    currenciesName: currencyEntity.name,\n                    currenciesCode: currencyEntity.isoCode,\n                    currenciesSymbol: currencyEntity.symbol,\n                    decimalPlaces: currencyEntity.decimalPrecision\n                }\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        )\n\n        await this.storeShopsCurrencies(currencyEntity.isoCode);\n    }\n\n    /**\n     *\n     * @param languageEntity {entity}\n     * @param onSave {boolean}\n     * @returns {Promise<void>}\n     */\n    async storeErpSystemsConfigurationLanguagesMatching(languageEntity, onSave = false) {\n        let config = await this.getBfConfigSwagMarketsSystem(),\n            localeEntity = await this.getLocaleEntity(languageEntity.localeId),\n            shopId = await this.getShopId();\n        if ((config.shops_languages_is_set === true && onSave === false) || languageEntity === 'ERROR-FETCH-LANGUAGE' || localeEntity === 'ERROR-FETCH-LOCALE' || shopId.length === 0) {\n            return;\n        }\n\n        await this.httpClient.put(\n            this.apiUrl + 'erpSystems/store-matching-languages',\n            {\n                shopId: shopId,\n                languagesData: {\n                    isoCode: localeEntity.code,\n                    name: languageEntity.name,\n                    externalId: languageEntity.localeId,\n                    externalValue: localeEntity.code\n                }\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n\n        await this.storeShopsLanguages(localeEntity.code);\n    }\n\n    /**\n     * @param isoCode\n     * @returns {Promise<void>}\n     */\n    async storeShopsLanguages(isoCode) {\n        let salesChannelType = await this.getSalesChannelType();\n        await this.httpClient.put(\n            this.apiUrl + salesChannelType + '/shops/store',\n            {\n                shopId: await this.getShopId(),\n                shopsLanguages: [{\n                    isoCode: isoCode,\n                    mainLanguage: 1,\n                    sortOrder: 1\n                }]\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        ).then(() => {\n            this.updateBfConfigSwagMarketsSystem({\n                shops: {[salesChannelType]: {shops_languages_is_set: true}}\n            })\n        });\n    }\n\n    /**\n     * @param isoCode\n     * @returns {Promise<void>}\n     */\n    async storeShopsCurrencies(isoCode) {\n        let salesChannelType = await this.getSalesChannelType();\n        await this.httpClient.put(\n            this.apiUrl + salesChannelType + '/shops/store',\n            {\n                shopId: await this.getShopId(),\n                shopsCurrencies: [{\n                    currencyCode: isoCode,\n                    mainCurrency: 1\n                }]\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        ).then(() => {\n            this.updateBfConfigSwagMarketsSystem({\n                shops: {[salesChannelType]: {shops_currencies_is_set: true}}\n            })\n        });\n    }\n\n    /**\n     * @param salesChannel\n     * @param paymentMethodMatchingData\n     * @param onSave\n     * @returns {Promise<boolean|*>}\n     */\n    async storeErpSystemMatchingData( salesChannel, paymentMethodMatchingData = [], onSave = false) {\n        let config = await this.getBfConfigSwagMarketsSystem(),\n            shippingMethodId = null,\n            salesChannelShippingData = salesChannel.shippingMethods.get(salesChannel.shippingMethodId),\n            salesChannelPaymentData = salesChannel.paymentMethods.get(salesChannel.paymentMethodId),\n            shopId = await this.getShopId();\n\n        if (shopId.length === 0 || (config.payment_methods_is_set === true && config.shipping_methods_is_set === true && onSave === false)) {\n            return false;\n        }\n\n        if (await this.getSalesChannelType() === 'amazon') {\n            shippingMethodId = 55;\n            paymentMethodMatchingData.push({\n                paymentMethodsId: 6,\n                erpPaymentMethodsCode: salesChannelPaymentData.name + \" ##\" + salesChannelPaymentData.id + \"##\"\n            });\n        } else if (await this.getSalesChannelType() === 'ebay') {\n            shippingMethodId = 44;\n        }\n\n        if (shippingMethodId !== null && paymentMethodMatchingData.length > 0) {\n            return this.httpClient.put(\n                this.apiUrl + 'erpSystems/store-matching',\n                {\n                    shopId: shopId,\n                    erpSystemsMatchingShippingMethodsData: [{\n                        \"shippingMethodsId\": shippingMethodId,\n                        \"erpShippingMethodsCode\": salesChannelShippingData.name + \" ##\" + salesChannelShippingData.id + \"##\"\n                    }],\n                    erpSystemsMatchingPaymentMethodsData: paymentMethodMatchingData\n                },\n                {\n                    headers: await this.getHeaders()\n                }\n            );\n        }\n    }\n\n    /**\n     *\n     * @returns {Promise<*>}\n     * @param salesChannelConfig\n     */\n    async storeSalesChannelDataToBf(salesChannelConfig) {\n        let config = await this.getConfig(),\n            shopId = await this.getShopId();\n\n        if (shopId.length === 0) {\n            return false;\n        }\n\n        return this.httpClient.post(\n            this.apiUrl + await this.getSalesChannelType() + '/brickfox/shops/configurations',\n            {\n                shopId: shopId,\n                shopsConfigurations: salesChannelConfig\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * Store the correct api version into the third party system\n     * @returns {Promise<void>}\n     */\n    async storeApiVersion(){\n        let shopId = await this.getShopId(),\n            apiVersion = 'v1';\n\n        if (shopId.length === 0) {return;}\n\n        await this.httpClient.get(\n            'swagMarkets/config/api-version',\n            {headers: this.getBasicHeaders()}\n        ).then((response) => {\n            if (response.status === 200) {\n                if (response.data.data.apiVersion.length === 0) {\n                    apiVersion = '';\n                } else {\n                    apiVersion = 'v' + response.data.data.apiVersion;\n                }\n            }\n        })\n\n        this.httpClient.post(\n            this.apiUrl + 'erpSystems/configurations',\n            {\n                shopId: shopId,\n                erpSystemsConfigurations: {\n                    API_VERSION: apiVersion,\n                }\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * Every customer has to use the admin api to transfer order from the marketplaces to shopware\n     * @returns {Promise<void>}\n     */\n    async storeUseAdminApi() {\n        let shopId = await this.getShopId();\n\n        this.httpClient.post(\n            this.apiUrl + 'erpSystems/configurations',\n            {\n                shopId: shopId,\n                erpSystemsConfigurations: {\n                    IS_SHOPWARE6_ADMIN_API: '1'\n                }\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param data {object}\n     * @returns {Promise<void>}\n     */\n    async storeErpSystemsConfiguration(data){\n        let shopId = await this.getShopId();\n        if (shopId.length === 0) {return;}\n\n        this.httpClient.post(\n            this.apiUrl + 'erpSystems/configurations',\n            {\n                shopId: shopId,\n                erpSystemsConfigurations: data\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param shopsConfigurations\n     * @returns {Promise<*>}\n     */\n    async storeShopsConfigurations(shopsConfigurations) {\n        return this.httpClient.post(\n            this.apiUrl + await this.getSalesChannelType() + '/brickfox/shops/configurations',\n            {\n                shopId: await this.getShopId(),\n                shopsConfigurations: shopsConfigurations\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param salesChannel\n     * @returns {Promise<void>}\n     */\n    async storeSalesChannelLanguage(salesChannel) {\n        this.httpClient.post(\n           'swagMarkets/sales-channel-language/save',\n            {\n                salesChannelId: salesChannel.id,\n                languageId: salesChannel.languageId\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param salesChannel\n     * @returns {Promise<void>}\n     */\n    async storeSalesChannelCountry(salesChannel) {\n        this.httpClient.post(\n            'swagMarkets/sales-channel-country/save',\n            {\n                salesChannelId: salesChannel.id,\n                countryId: salesChannel.countryId\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param salesChannel\n     * @returns {Promise<void>}\n     */\n    async storeSalesChannelCurrency(salesChannel) {\n        this.httpClient.post(\n            'swagMarkets/sales-channel-currency/save',\n            {\n                salesChannelId: salesChannel.id,\n                currencyId: salesChannel.currencyId\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param data\n     * @returns {Promise<void>}\n     */\n    async updateBfConfigSwagMarketsSystem(data) {\n        this.httpClient.post(\n            'swagMarkets/config/store/erpSystemConfig',\n            {\n                swagMarkets_systems: data\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        )\n    }\n\n    async updateMarketplaceConfiguration(data) {\n        const salesChannelType = await this.getSalesChannelType();\n\n        data.marketplace = salesChannelType + '_configuration';\n\n        return this.httpClient.post(\n            'swagMarkets/config/marketplace/set-id',\n            {\n                data\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            })\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async getBfConfigSwagMarketsSystem(forceReload = false) {\n        const config = await this.getConfig(forceReload);\n\n        return config.swagMarkets_business_platform.swagMarkets_systems.shops[await this.getSalesChannelType()];\n    }\n\n    /**\n     * @returns {Promise<boolean>}\n     */\n    async getIsMarketplaceConnected() {\n        let isConnected = false,\n            configurationKey = await this.getSalesChannelType() + '_configuration';\n\n        await this.getConfig().then((config) => {\n            if (config.hasOwnProperty(configurationKey) && config[configurationKey].hasOwnProperty('is_connected') && config[configurationKey].is_connected !== undefined) {\n                isConnected = config[configurationKey].is_connected;\n            }\n        });\n\n        return isConnected;\n    }\n\n    /**\n     * @returns {Promise<boolean>}\n     */\n    async getSalesChannelConfiguration() {\n        let configurationKey = await this.getSalesChannelType() + '_configuration',\n            salesChannelConfiguration = {};\n\n        await this.getConfig().then((config) => {\n            salesChannelConfiguration = config[configurationKey];\n        });\n\n        return salesChannelConfiguration;\n    }\n\n    /**\n     * @param type\n     * @returns {Promise<*>}\n     */\n    async getEbayPolicy(type) {\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/' + type + '/policy/' + await this.getShopId(),\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @returns {Promise<*>}\n     */\n    async getEbayTokenExpires() {\n        return await this.httpClient.get(\n            this.apiUrl + 'ebay/token/expires/' + await this.getShopId(),\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    async getMarketplace() {\n        return await this.httpClient.get(\n            this.apiUrl + 'channels/' + await this.getChannelId(),\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     * @param salesChannel\n     * @param shopsConfigurations\n     * @returns {*}\n     */\n    buildShopsConfigurations(salesChannel, shopsConfigurations) {\n        salesChannel.processingTime = shopsConfigurations.hasOwnProperty('DEFAULT_DELIVERY_TIMES') ? parseInt(shopsConfigurations.DEFAULT_DELIVERY_TIMES) : null;\n        salesChannel.merchantShippingGroupName = shopsConfigurations.hasOwnProperty('MERCHANT_SHIPPING_GROUP_NAME') ? shopsConfigurations.MERCHANT_SHIPPING_GROUP_NAME : null;\n        salesChannel.enableFba = shopsConfigurations.hasOwnProperty('ENABLE_FBA') ? shopsConfigurations.ENABLE_FBA === '1' : false;\n        salesChannel.useAmazonTaxCalculationService = shopsConfigurations.hasOwnProperty('USE_AMAZON_TAX_CALCULATION_SERVICE') ? shopsConfigurations.USE_AMAZON_TAX_CALCULATION_SERVICE === '1' : false;\n        salesChannel.amazonFcShelfLifeAttribute = shopsConfigurations.hasOwnProperty('AMAZON_FC_SHELF_LIFE') ? shopsConfigurations.AMAZON_FC_SHELF_LIFE : null;\n        salesChannel.payPalEmail = shopsConfigurations.hasOwnProperty('PAYPAL_EMAIL') ? shopsConfigurations.PAYPAL_EMAIL : null;\n        salesChannel.ebayBestOfferAbsolute = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_ABSOLUTE') ? parseInt(shopsConfigurations.EBAY_BEST_OFFER_ABSOLUTE) : 0;\n        salesChannel.ebayBestOfferAbsoluteAutoAccept = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT') ? parseInt(shopsConfigurations.EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT) : 0;\n        salesChannel.ebayBestOfferActive = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_ACTIVE') ? shopsConfigurations.EBAY_BEST_OFFER_ACTIVE === '1' : false;\n        salesChannel.ebayBestOfferAutoAccept = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_AUTO_ACCEPT') ? shopsConfigurations.EBAY_BEST_OFFER_AUTO_ACCEPT === '1' : false;\n        salesChannel.ebayBestOfferRelative = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_RELATIVE') ? parseInt(shopsConfigurations.EBAY_BEST_OFFER_RELATIVE) : 0;\n        salesChannel.ebayBestOfferRelativeAutoAccept = shopsConfigurations.hasOwnProperty('EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT') ? parseInt(shopsConfigurations.EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT) : 0;\n        salesChannel.useBrandAsManufacturer = shopsConfigurations.hasOwnProperty('EBAY_EXPORT_BRANDS_AS_MANUFACTURER') ? shopsConfigurations.EBAY_EXPORT_BRANDS_AS_MANUFACTURER === '1' : false;\n        salesChannel.ebayBestOfferFix = shopsConfigurations.hasOwnProperty('EBAY_FIX_BEST_OFFER') ? shopsConfigurations.EBAY_FIX_BEST_OFFER === '1' : false;\n        salesChannel.ebayLogo = shopsConfigurations.hasOwnProperty('EBAY_LOGO') ? shopsConfigurations.EBAY_LOGO : null;\n        salesChannel.ebayPlus = shopsConfigurations.hasOwnProperty('EBAY_PLUS_SELLER') ? shopsConfigurations.EBAY_PLUS_SELLER === '1' : false;\n        salesChannel.sellerZip = shopsConfigurations.hasOwnProperty('sellerZip') ? shopsConfigurations.sellerZip : null;\n        salesChannel.sellerCity = shopsConfigurations.hasOwnProperty('sellerCity') ? shopsConfigurations.sellerCity : null;\n        salesChannel.feedbackComment = shopsConfigurations.hasOwnProperty('FEEDBACK_COMMENT') ? shopsConfigurations.FEEDBACK_COMMENT : null;\n        salesChannel.productSegment = shopsConfigurations.hasOwnProperty('productSegment') ? shopsConfigurations.productSegment : '-';\n        salesChannel.productType = shopsConfigurations.hasOwnProperty('productType') ? shopsConfigurations.productType : '-';\n        salesChannel.shippingPolicy = false;\n        salesChannel.paymentPolicy = false;\n        salesChannel.returnPolicy = false;\n\n        return salesChannel;\n    }\n\n\n}\n\nexport default BfSalesChannelService;\n\nApplication.addServiceProvider('BfSalesChannelService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfSalesChannelService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfSalesChannelService from \"./bf-sales-channel.service\";\n\nconst {Application} = Shopware;\n\nimport BfApiService from \"./bf-api.service\";\nimport SalesChannelService from \"./bf-sales-channel.service\";\n\nclass BfProductApiService extends BfApiService {\n    async getProductErrors(shopsProductsIds) {\n        const products = shopsProductsIds.length > 0 ? shopsProductsIds : [[]];\n        return this.get(\n            await this.getSalesChannelType() + '/shops/products-errors',\n            {\n                shopId: await this.getShopId(),\n                shopsProductsIds: products\n            }\n        );\n    }\n\n    async getProductData(productIds) {\n        const salesChannelType = await this.getSalesChannelType();\n        let config = await this.getConfig();\n\n        if (salesChannelType === 'amazon' ) {\n            config = config.amazon_configuration;\n        } else {\n            config = config.ebay_configuration;\n        }\n\n        return this.get(\n            await this.getSalesChannelType() + '/product-data/load',\n            {\n                shopId: await this.getShopId(),\n                productId: productIds,\n                marketplaceId: config.marketplace_id\n            }\n        );\n    }\n\n    async saveProductData(productId, data) {\n        const salesChannelType = await this.getSalesChannelType();\n        let config = await this.getConfig();\n\n        if (salesChannelType === 'amazon' ) {\n            config = config.amazon_configuration;\n        } else {\n            config = config.ebay_configuration;\n        }\n\n        return this.post(\n            await this.getSalesChannelType() + '/product-data/store',\n            {\n                shopId: await this.getShopId(),\n                bfProductId: productId,\n                marketplaceId: config.marketplace_id,\n                productData: data\n            }\n        );\n    }\n\n    /**\n     *\n     * @param productId {int}\n     * @param limit {int}\n     * @param page {int}\n     * @returns {Promise<*>}\n     */\n    async loadProductVariationData(productId, limit, page) {\n        return this.get(\n            await this.getSalesChannelType() + '/product-variation-data/load',\n            {\n                shopId: await this.getShopId(),\n                shopsProductsId: productId,\n                limit: limit,\n                page: page\n            }\n        );\n    }\n}\n\nexport default BfProductApiService;\n\nApplication.addServiceProvider('bfProductApiService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfProductApiService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application} = Shopware;\n\n\nclass BfAmazonService extends BfApiService {\n    /**\n     * Store amazon shipping and methods matching data into erp systems\n     * @param bfSalesChannelService\n     * @param salesChannel\n     * @param onSave\n     * @returns {Promise<boolean|*>}\n     */\n    async storeErpSystemMatchingData(bfSalesChannelService, salesChannel, onSave = false) {\n        let config = await bfSalesChannelService.getBfConfigSwagMarketsSystem(),\n            salesChannelType = await bfSalesChannelService.getSalesChannelType(),\n            shippingMethodId = 55,\n            salesChannelShippingData = salesChannel.shippingMethods.get(salesChannel.shippingMethodId),\n            salesChannelPaymentData = salesChannel.paymentMethods.get(salesChannel.paymentMethodId),\n            shopId = await this.getShopId();\n\n        if ((config.payment_methods_is_set === true && config.shipping_methods_is_set === true\n            && onSave === false) || await bfSalesChannelService.getSalesChannelType() !== 'amazon' || shopId.length === 0) {\n            return false;\n        }\n\n        await this.httpClient.put(\n            this.apiUrl + 'erpSystems/store-matching',\n            {\n                shopId: shopId,\n                erpSystemsMatchingShippingMethodsData: [{\n                    \"shippingMethodsId\": shippingMethodId,\n                    \"erpShippingMethodsCode\": salesChannelShippingData.name + \" ##\" + salesChannelShippingData.id + \"##\"\n                }],\n                erpSystemsMatchingPaymentMethodsData: [\n                    {\n                        paymentMethodsId: 6,\n                        erpPaymentMethodsCode: salesChannelPaymentData.name + \" ##\" + salesChannelPaymentData.id + \"##\"\n                    }\n                ]\n            },\n            {headers: await this.getHeaders()}\n        ).then(() => {\n            bfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                shops: {[salesChannelType]: {payment_methods_is_set: true, shipping_methods_is_set: true}}\n            });\n        });\n    }\n\n    /**\n     * @param bfSalesChannelService\n     * @param salesChannelType\n     * @param erpSystemsMatchingShippingMethods\n     * @returns {Promise<void>}\n     */\n    async storeErpSystemsMatchingShippingMethods(bfSalesChannelService, salesChannelType, erpSystemsMatchingShippingMethods) {\n        await this.httpClient.put(\n            this.apiUrl + 'erpSystems/store-matching',\n            {\n                shopId: await this.getShopId(),\n                erpSystemsMatchingShippingMethodsData: [\n                    {shippingMethodsId: 56, erpShippingMethodsCode: erpSystemsMatchingShippingMethods.fba.code},\n                    {shippingMethodsId: 57, erpShippingMethodsCode: erpSystemsMatchingShippingMethods.prime.code},\n                    {\n                        shippingMethodsId: 58,\n                        erpShippingMethodsCode: erpSystemsMatchingShippingMethods.primeNextDay.code\n                    },\n                    {\n                        shippingMethodsId: 59,\n                        erpShippingMethodsCode: erpSystemsMatchingShippingMethods.primeSecondDay.code\n                    },\n                ],\n            },\n            {headers: await this.getHeaders()}\n        ).then(async function() {\n            await bfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                shops: {\n                    [salesChannelType]:\n                        {\n                            amazonFbaPrimeShippingMethods: {\n                                fba: {\n                                    shippingMethodId: erpSystemsMatchingShippingMethods.fba.shippingMethodId,\n                                    code: erpSystemsMatchingShippingMethods.fba.code\n                                },\n                                prime: {\n                                    shippingMethodId: erpSystemsMatchingShippingMethods.prime.shippingMethodId,\n                                    code: erpSystemsMatchingShippingMethods.prime.code\n                                },\n                                primeNextDay: {\n                                    shippingMethodId: erpSystemsMatchingShippingMethods.primeNextDay.shippingMethodId,\n                                    code: erpSystemsMatchingShippingMethods.primeNextDay.code\n                                },\n                                primeSecondDay: {\n                                    shippingMethodId: erpSystemsMatchingShippingMethods.primeSecondDay.shippingMethodId,\n                                    code: erpSystemsMatchingShippingMethods.primeSecondDay.code\n                                },\n                            }\n                        }\n                }\n            });\n        });\n    }\n\n    /**\n     * @param bfSalesChannelService\n     * @param salesChannel\n     * @returns {Promise<*>}\n     */\n    async storeShopsConfigurationData(bfSalesChannelService, salesChannel) {\n        let salesChannelType = await bfSalesChannelService.getSalesChannelType();\n\n        this.httpClient.post(\n            this.apiUrl + salesChannelType + '/brickfox/shops/configurations',\n            {\n                shopId: await this.getShopId(),\n                shopsConfigurations: {\n                    FBA_SHIPPING_METHODS_CODE: 'standard_amazon_fba',\n                    FBA_PAYMENT_METHODS_CODE: 'amazon',\n                    AMAZON_ARE_BATTERIES_REQUIRED: salesChannel.hasOwnProperty('needsBatteryItem') ? salesChannel.needsBatteryItem : '',\n                    AMAZON_DANGEROUS_GOODS_DEFAULT: salesChannel.hasOwnProperty('dangerousGoodsItem') ? salesChannel.dangerousGoodsItem : '',\n                    DEFAULT_DELIVERY_TIMES: salesChannel.processingTime,\n                    MERCHANT_SHIPPING_GROUP_NAME: salesChannel.merchantShippingGroupName,\n                    ENABLE_FBA: salesChannel.enableFba ? 1 : 0,\n                    USE_AMAZON_TAX_CALCULATION_SERVICE: salesChannel.useAmazonTaxCalculationService ? 1 : 0,\n                    AMAZON_FC_SHELF_LIFE: salesChannel.amazonFcShelfLifeAttribute,\n                    productSegment: salesChannel.productSegment,\n                    productType: salesChannel.productType\n                }\n            },\n            {headers: await this.getHeaders()}\n        );\n        if (salesChannel.hasOwnProperty('amazonFbaPrimeShippingMethods')) {\n            await this.storeErpSystemsMatchingShippingMethods(bfSalesChannelService, salesChannelType, salesChannel.amazonFbaPrimeShippingMethods);\n        }\n    }\n\n    /**\n     * @param name\n     * @returns {Promise<*>}\n     */\n    async getAmazonSegmentByName(name) {\n        return await this.httpClient.post(\n            this.apiUrl + 'amazonSegments/search',\n            {\n                shopId: await this.getShopId(),\n                filter: [\n                    {\n                        field: \"name\",\n                        type: \"=\",\n                        value: name\n                    }\n                ]\n            },\n            {headers: await this.getHeaders()}\n        ).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    /**\n     *\n     * @param name\n     * @param amazonSegmentId\n     * @param segmentName\n     * @returns {Promise<*>}\n     */\n    async getProductTypesIdByProductTypesName(name, amazonSegmentId, segmentName) {\n        return await this.httpClient.post(\n            this.apiUrl + 'productTypes/search',\n            {\n                shopId: await this.getShopId(),\n                filter: [\n                    {\n                        field: \"name\",\n                        type: \"=\",\n                        value: (segmentName === \"Clothing\") ? segmentName : name\n                    },\n                    {\n                        field: \"amazon_segments_id\",\n                        type: \"=\",\n                        value: amazonSegmentId\n                    }\n                ]\n            },\n            {headers: await this.getHeaders()}\n        ).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    /**\n     * @param productTypesId\n     * @param limit\n     * @param page\n     * @returns {Promise<*>}\n     */\n    async getProductTypesAttributesByProductType(productTypesId, limit, page, searchString) {\n        return await this.httpClient.post(\n            this.apiUrl + 'productTypesAttributes/search',\n            {\n                shopId: await this.getShopId(),\n                filter: [\n                    {\n                        field: \"amazon_product_types_id\",\n                        type: \"=\",\n                        value: productTypesId\n                    },\n                    {\n                        field: \"name\",\n                        type : \"like\",\n                        value: searchString + '%'\n                    }\n                ],\n                order: {\n                    field: \"name\",\n                    direction: \"asc\"\n                },\n                limit: limit,\n                page: page\n            },\n            {headers: await this.getHeaders()}\n        ).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    /**\n     * @param bfSalesChannelService\n     * @param salesChannel\n     * @returns {Promise<void>}\n     */\n    async activateDeactivateFbaOrdersCron(bfSalesChannelService, salesChannel) {\n        this.httpClient.post(\n            this.apiUrl + 'system/single-cron',\n            {\n                shopId: await this.getShopId(),\n                channelType: await bfSalesChannelService.getSalesChannelType(),\n                action: 'importfba',\n                active: salesChannel.enableFba && salesChannel.active\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        );\n    }\n\n    /**\n     *\n     * @param item {object}\n     * @returns {Promise<void>}\n     */\n    async saveAmazonAsin (item) {\n        return await this.httpClient.post(\n            this.apiUrl + 'amazon/shops-products-variations-offers/save',\n            {\n                shopId: await this.getShopId(),\n                shopsProductsVariationsData: item\n            },\n            {\n                headers: await this.getHeaders()\n            }\n        ).then((response) => {\n            return response.data.data;\n        });\n    }\n}\n\nApplication.addServiceProvider('BfAmazonService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfAmazonService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application, Mixin, Component} = Shopware;\n\nclass BfEbayService extends BfApiService {\n    /**\n     * Store ebay shipping and methods matching data into erp systems\n     * @param bfSalesChannelService\n     * @param salesChannel\n     * @param onSave\n     * @returns {Promise<boolean|*>}\n     */\n    async storeErpSystemMatchingData(bfSalesChannelService, salesChannel, onSave = false) {\n        let config = await bfSalesChannelService.getBfConfigSwagMarketsSystem(),\n            salesChannelType = await bfSalesChannelService.getSalesChannelType(),\n            shippingMethodId = 44,\n            salesChannelShippingData = salesChannel.shippingMethods.get(salesChannel.shippingMethodId),\n            shopId = await this.getShopId();\n\n        if ((config.payment_methods_is_set === true && config.shipping_methods_is_set === true\n            && onSave === false) || salesChannelType !== 'ebay' || shopId.length === 0) {\n            return false;\n        }\n\n        return this.httpClient.put(\n            this.apiUrl + 'erpSystems/store-matching',\n            {\n                shopId: shopId,\n                erpSystemsMatchingShippingMethodsData: [{\n                    \"shippingMethodsId\": shippingMethodId,\n                    \"erpShippingMethodsCode\": salesChannelShippingData.name + \" ##\" + salesChannelShippingData.id + \"##\"\n                }],\n                erpSystemsMatchingPaymentMethodsData: salesChannel.ebayPaymentMethods\n            }, {headers: await this.getHeaders()}\n        ).then(() => {\n            bfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                shops: {[salesChannelType]: {payment_methods_is_set: true, shipping_methods_is_set: true, payment_methods_matching: salesChannel.ebayPaymentMethods}}\n            });\n        });\n    }\n\n    /**\n     * @param bfSalesChannelService\n     * @param shippingPolicy\n     * @param paymentPolicy\n     * @param returnPolicy\n     */\n    storeEbayPolicies(bfSalesChannelService, shippingPolicy = {}, paymentPolicy = {}, returnPolicy = {}) {\n        if (shippingPolicy.isDirty === true || paymentPolicy.isDirty === true || returnPolicy.isDirty === true) {\n            bfSalesChannelService.storeShopsConfigurations({\n                SHIPPING_POLICY: shippingPolicy.profileId,\n                PAYMENT_POLICY: paymentPolicy.profileId,\n                RETURN_POLICY: returnPolicy.profileId\n            });\n        }\n    }\n\n    /**\n     * @param bfSalesChannelService\n     * @param salesChannel\n     * @returns {Promise<*>}\n     */\n    async storeShopsConfigurationData(bfSalesChannelService, salesChannel) {\n        let salesChannelType = await bfSalesChannelService.getSalesChannelType();\n        this.httpClient.post(\n            this.apiUrl + salesChannelType + '/brickfox/shops/configurations',\n            {\n                shopId: await this.getShopId(),\n                shopsConfigurations: await this.prepareShopsConfigurationData(salesChannel)\n            },\n            {headers: await this.getHeaders()}\n        );\n\n        return {\n            mailIsValid: this.validateEmailAddress(salesChannel.payPalEmail),\n            logoUrlIsValid: this.validateLogoUrl(salesChannel.ebayLogo),\n        };\n    }\n\n    /**\n     *\n     * @param salesChannel\n     * @returns {Promise<{EBAY_BEST_OFFER_ACTIVE: (boolean|*), EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT: (number|*), EBAY_BEST_OFFER_RELATIVE: (number|*), EBAY_BEST_OFFER_AUTO_ACCEPT: (boolean|*), EBAY_BEST_OFFER_ABSOLUTE: (number|*), EBAY_PLUS_SELLER: (boolean|*), EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT: (number|*), EBAY_FIX_BEST_OFFER: *, EBAY_LOGO: (null|*), sellerZip: *, sellerCity: *, FEEDBACK_COMMENT: (null|*)}>}\n     */\n    async prepareShopsConfigurationData(salesChannel) {\n        let shopsConfigurations = {\n            EBAY_BEST_OFFER_ABSOLUTE: salesChannel.ebayBestOfferAbsolute,\n            EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT: salesChannel.ebayBestOfferAbsoluteAutoAccept,\n            EBAY_BEST_OFFER_ACTIVE: salesChannel.ebayBestOfferActive,\n            EBAY_BEST_OFFER_AUTO_ACCEPT: salesChannel.ebayBestOfferAutoAccept,\n            EBAY_BEST_OFFER_RELATIVE: salesChannel.ebayBestOfferRelative,\n            EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT: salesChannel.ebayBestOfferRelativeAutoAccept,\n            EBAY_FIX_BEST_OFFER: salesChannel.ebayBestOfferFix,\n            EBAY_PLUS_SELLER: salesChannel.ebayPlus,\n            EBAY_EXPORT_BRANDS_AS_MANUFACTURER: salesChannel.useBrandAsManufacturer,\n            sellerZip: salesChannel.sellerZip,\n            sellerCity: salesChannel.sellerCity,\n            FEEDBACK_COMMENT: salesChannel.feedbackComment\n        };\n\n        if (this.validateEmailAddress(salesChannel.payPalEmail)) {\n            shopsConfigurations.PAYPAL_EMAIL = salesChannel.payPalEmail;\n        }\n\n        if (this.validateLogoUrl(salesChannel.ebayLogo)) {\n            shopsConfigurations.EBAY_LOGO = salesChannel.ebayLogo;\n        }\n\n        return shopsConfigurations;\n    }\n\n    /**\n     * @param mailAddress {string}\n     * @returns {boolean}\n     */\n    validateEmailAddress(mailAddress = '') {\n        const mailValidationRegEx = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-]+){1,}$/;\n\n        if (mailAddress.match(mailValidationRegEx)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param url {string}\n     * @returns {boolean}\n     */\n    validateLogoUrl(url = '') {\n        return url.indexOf(\"https://\") === 0;\n    }\n}\n\nApplication.addServiceProvider('BfEbayService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfEbayService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n        'https://brickfox.io/api/',\n    );\n});\n","import BfApiService from \"./bf-api.service\";\n\nconst {Application} = Shopware;\n\nclass BfPluginConfigurationService extends BfApiService {\n\n    async repairIntegrationUser() {\n        return this.httpClient.post(\n            'swagMarkets/config/repair-integration-user',\n            {},\n            {\n                headers: this.getBasicHeaders()\n            }\n        );\n    }\n}\n\nexport default BfPluginConfigurationService;\n\n\nApplication.addServiceProvider('bfPluginConfigurationService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfPluginConfigurationService(\n        initContainer.httpClient,\n        container.loginService,\n        'swagMarkets',\n       'https://brickfox.io/api/',\n    );\n});\n","import template from './sw-category-tree-field-override.html.twig';\nimport './sw-category-tree-field-override.scss';\nconst {Component} = Shopware;\n\nComponent.override('sw-category-tree-field', {\n    name: 'sw-category-tree-field-override',\n    template,\n\n    props: {\n        showLabelName: {\n            type: Boolean,\n            default: true\n        }\n    }\n});\n","import template from './sw-card-override.tml.twig';\n\nconst {Component} = Shopware;\n\nComponent.override('sw-card', {\n    name: 'sw-card-override',\n    template,\n\n    props: {\n        showHelpTextIcon: {\n            type: Boolean,\n            default() {\n                return false;\n            }\n        },\n        helpTextDescription: {\n            type: String,\n            default() {\n                return '';\n            }\n        },\n        helpTextWidth: {\n            default() {\n                return 200;\n            }\n        }\n    }\n});\n","import template from './bf-sales-channel-modal-grid.html.twig';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.override('sw-sales-channel-modal-grid', {\n    name: 'bf-sales-channel-modal-grid',\n    template,\n    inject: ['repositoryFactory'],\n    data() {\n        return {\n            sct: [],\n            salesChannels: []\n        }\n    },\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        }\n    },\n    created() {\n        this.extendSalesChannelType();\n    },\n    methods: {\n        extendSalesChannelType() {\n            const criteria = new Criteria();\n\n            criteria.setPage(1);\n            criteria.setLimit(500);\n            criteria.addSorting(Criteria.sort('sales_channel.name', 'ASC'));\n            criteria.addAssociation('type');\n\n            this.salesChannelRepository.search(criteria, Shopware.Context.api).then((response) => {\n                this.salesChannels = response;\n\n                this.salesChannelTypes.forEach((item, index) => {\n                    let _isCreated = false;\n                    this.salesChannels.filter((salesChannel) => {\n\n                        if (salesChannel.typeId === item.id\n                            && (salesChannel.typeId === '26a9ece25bd14b288b30c3d71e667d2c' || salesChannel.typeId === '7ff39608fed04e4bbcc62710b7223966')) {\n                            _isCreated = true;\n                        }\n                    });\n\n                    this.sct.push(Object.assign({}, item, {isCreated: _isCreated}));\n                });\n\n                this.$nextTick(function () {\n                    this.salesChannelTypes = this.sct;\n                });\n\n            });\n        }\n    }\n});\n","import template from './bf-sales-channel-product-grid.html.twig';\nimport './bf-sales-channel-product-grid.scss';\n\nconst {Component} = Shopware;\n\nComponent.extend('bf-sales-channel-product-grid', 'sw-entity-listing', {\n    template,\n    inject: ['BfSalesChannelService'],\n    props: {\n        shopProductData: {\n            type: Array,\n            required: true\n        },\n        marketplace: {\n            type: Object,\n            required: true\n        },\n        currentContract: {\n            type: Object,\n            required: true\n        },\n        marketplaceName: {\n            type: String,\n            required: true\n        }\n    },\n    data() {\n        return {\n            clientExists: false,\n            clientInProgress: false,\n            selectedProduct: null,\n            showProductDetailModal: false,\n            showAsinManagement: false\n        }\n    },\n    created() {\n        this.checkClientState();\n    },\n    computed: {\n        getMarketplaceName() {\n            return this.marketplaceName\n        }\n    },\n    methods: {\n        paginate(args) {\n            this.$emit('paginateBf', args);\n            this.$emit('page-change', args);\n        },\n        checkClientState() {\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n                this.clientInProgress = response.clientInProgress;\n            })\n        },\n        onEditProductClick(selectedProduct) {\n            this.selectedProduct        = selectedProduct;\n            this.showProductDetailModal = true;\n        },\n        onAsinManagement(product) {\n            this.selectedProduct = product;\n            this.showAsinManagement = true;\n        },\n        onOpenMarketplaceProductClick: function (selectedProduct) {\n            window.open(this.getMarketplaceUrl() + this.getProductId(selectedProduct));\n        },\n        getMarketplaceUrl() {\n            let marketplaceProductUrl = 'https://' + this.marketplace.name;\n\n            if (this.marketplace.type === 'amazon') {\n                marketplaceProductUrl += '/dp/product/';\n            } else {\n                marketplaceProductUrl += '/itm/';\n            }\n\n            return marketplaceProductUrl;\n        },\n        getProductId(product) {\n            if (this.marketplace.type === 'ebay') {\n                return product.marketplaceProductId\n            }\n\n            if (this.marketplace.type === 'amazon' && product.productAsins[0] !== undefined) {\n                return product.productAsins[0]\n            }\n\n            return ''\n        }\n    }\n});\n","import template from './bf-contract.html.twig';\n\nimport './bf-contract.scss';\n\nconst { Component, Mixin } = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-contract', {\n    template,\n    inject: [\n        'repositoryFactory',\n        'bfContractService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        salesChannel: {\n            type: Boolean,\n            default: false\n        },\n        isLoading: {\n            type: Boolean,\n            default: false\n        },\n        clientExists: {\n            type: Boolean,\n            default: false\n        },\n        currentContract: {\n            type: Object,\n            required: true\n        },\n        bookableContracts: {\n            type: Array,\n            default: []\n        },\n        userAuthorised: {\n            type: Boolean,\n            required: true,\n            default: false\n        },\n        subProcessorData: {\n            type: String,\n            required: true,\n            default: ''\n        }\n    },\n    data() {\n        return {\n            showContractModal: false,\n            showContractAgbModal: false,\n            showContractCancelModal: false,\n            selectedContract: {},\n            confirmedAgb: false,\n            confirmedPayment: false,\n            currentLocale: 'en',\n            totalProductsByChannel: [],\n            showLoginModal: false,\n            showPermissions: false,\n            showSubProcessor: false\n        }\n    },\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        }\n    },\n    methods: {\n        formatDate(date) {\n            let originDate = new Date(date);\n\n            return originDate.getDate() + '.' + originDate.getMonth() + '.' + originDate.getFullYear();\n        },\n        openContractModal() {\n            if (this.userAuthorised) {\n                this.showContractModal = true;\n                this.getCountProductsFromBfChannels();\n            } else {\n                this.showLoginModal = true;\n            }\n        },\n        closeLoginModal() {\n            this.showLoginModal = false;\n            this.$emit('refreshContractData');\n        },\n        openContractAgbModal() {\n            this.showContractAgbModal = true;\n            this.checkCurrentLocale();\n        },\n        openContractCancelModal() {\n            this.showContractCancelModal = true;\n        },\n        openPermissionModal() {\n            this.onCloseContractModal();\n            this.showPermissions = true;\n        },\n        closePermissionsModal(goTo) {\n            if (goTo === 'subProcessor') {\n                this.openSubProcessorModal();\n            } else {\n                this.openContractModal();\n            }\n\n            this.showPermissions = false;\n        },\n        openSubProcessorModal() {\n            this.onCloseContractModal();\n            this.showSubProcessor = true;\n        },\n        closeSubProcessorModal() {\n            this.openContractModal();\n            this.showSubProcessor = false;\n        },\n        onCloseContractModal() {\n            this.showContractModal = false;\n        },\n        onCloseContractAgbModal() {\n            this.showContractAgbModal = false;\n            this.clearCheckboxes();\n        },\n        onCloseContractCancelModal() {\n            this.showContractCancelModal = false;\n            this.clearCheckboxes();\n        },\n        clearCheckboxes() {\n            this.confirmedAgb = false;\n            this.confirmedPayment = false;\n            this.showPermissions = false;\n            this.showSubProcessor = false;\n        },\n        onRemoveContract() {\n            this.bfContractService.cancelContract(this.currentContract.identifier)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        title: this.$tc('bf-sales-channel.contractModal.notification.title'),\n                        message: this.$tc('bf-sales-channel.contractModal.notification.canceledMessage')\n                    });\n\n                    this.$emit('onCancelContract');\n\n                    this.clearCheckboxes();\n                    this.onCloseContractCancelModal();\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        showAgbDialog(selectedContract, type) {\n            this.selectedContract = selectedContract;\n\n            this.onCloseContractModal();\n\n            if (type === 'change') {\n                this.setNewContract();\n            } else {\n                let canCancelContract = true;\n\n                this.totalProductsByChannel.forEach((salesChannel, index) => {\n                    if (salesChannel.productsCount > 0) {\n                        canCancelContract = false;\n                    }\n                });\n\n                if (canCancelContract) {\n                    this.openContractCancelModal();\n                } else {\n                    this.createNotificationError({\n                        title: this.$tc('bf-sales-channel.contractModal.notification.errorTitle'),\n                        message: this.$tc(\n                            'bf-sales-channel.contractModal.notification.errorTooMuchProductsAssigned',\n                            selectedContract,\n                            {\n                                contractName: selectedContract.name\n                            }\n                        )\n                    });\n                }\n            }\n        },\n        setNewContract() {\n            let selectedContractLimit = this.selectedContract.items[0].limit;\n\n            if (selectedContractLimit > 0) {\n                this.totalProductsByChannel.forEach((salesChannel, index) => {\n                    if (salesChannel.productsCount > selectedContractLimit) {\n                        this.createNotificationError({\n                            title: this.$tc('bf-sales-channel.contractModal.notification.errorTitle'),\n                            message: this.$tc(\n                                'bf-sales-channel.contractModal.notification.errorSkuLimitAchieved',\n                                selectedContractLimit,\n                                {\n                                    limit: selectedContractLimit,\n                                    name: salesChannel.name\n                                }\n                            )\n                        });\n\n                        this.clearCheckboxes();\n                        return;\n                    }\n                });\n            }\n\n            this.bfContractService.setContract(this.selectedContract.name)\n                .then((response) => {\n                    this.createNotificationSuccess({\n                        title: this.$tc('bf-sales-channel.contractModal.notification.title'),\n                        message: this.$tc('bf-sales-channel.contractModal.notification.changedMessage')\n                    });\n\n                    let currentContract = response.data;\n                    this.bfContractService.setUserShopId(currentContract.customerIdentifier)\n                        .then(() => {\n                            this.$emit('onSetNewContract', currentContract);\n                        });\n\n                    this.clearCheckboxes();\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        checkCurrentLocale() {\n            let currentIsoLocale = localStorage.getItem('sw-admin-locale');\n\n            if (currentIsoLocale !== null) {\n                this.currentLocale = currentIsoLocale.split('-')[0]\n            }\n        },\n        getCountProductsFromBfChannels() {\n            const criteria = new Criteria();\n\n            criteria.addAssociation('type');\n\n            this.salesChannelRepository.search(criteria, Shopware.Context.api).then((salesChannels) => {\n                salesChannels.forEach((item, index) => {\n                    if (item.type.manufacturer === 'brickfox GmbH') {\n                        this.getProductsBySalesChannel(item);\n                    }\n                });\n            }).catch((error) => {\n                console.log(error);\n            });\n        },\n        getProductsBySalesChannel(salesChannel) {\n            const productCriteria = new Criteria();\n\n            productCriteria.addFilter(Criteria.equals('product.parentId', null));\n            productCriteria.addFilter(Criteria.equals('product.visibilities.salesChannelId', salesChannel.id));\n\n            this.productRepository.search(productCriteria, Shopware.Context.api)\n                .then((products) => {\n                    this.totalProductsByChannel.push({\n                        name: salesChannel.name,\n                        productsCount: products.total\n                    });\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n        }\n    }\n});\n","import template from './bf-plugin-configuration.html.twig';\n\nimport './bf-plugin-configuration.scss';\n\nconst {Component, Mixin} = Shopware;\n\nComponent.register('bf-plugin-configuration', {\n    template,\n    inject: [\n        'bfPluginConfigurationService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        isLoading: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            currentLocale: 'en'\n        }\n    },\n    computed: {},\n    methods: {\n        repairIntegrationUser() {\n            this.isLoading = true;\n\n            this.bfPluginConfigurationService.repairIntegrationUser()\n                .then(() => {\n                    this.isLoading = false;\n                    this.createNotificationSuccess({\n                        title: this.$tc('bf-plugin-configuration.integration.dialogue.successTitle'),\n                        message: this.$tc('bf-plugin-configuration.integration.dialogue.successMessage')\n                    });\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n                    this.createNotificationError({\n                        title: this.$tc('bf-plugin-configuration.integration.dialogue.errorTitle'),\n                        message: this.$tc('bf-plugin-configuration.integration.dialogue.errorMessage')\n                    });\n                });\n        }\n    }\n});\n","import template from './bf-bookable-contracts.html.twig';\nimport tableRows from './bf-bookable-contracts-table-rows.json';\n\nimport './bf-bookable-contracts.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('bf-bookable-contracts', {\n    template,\n    props: {\n        bookableContracts: {\n            type: Array,\n            required: true\n        },\n        currentContract: {\n            type: Object,\n            required: true\n        }\n    },\n    data() {\n        return {\n            tableData: [],\n            acceptTermsAndConditions: false,\n            acceptSubProcessor: false\n        }\n    },\n    created() {\n        this.prepareTableContractsData();\n    },\n    methods: {\n        openTermsAndConditions() {\n            window.open(this.$tc('bf-sales-channel.contractModal.table.contractTermsAndConditionsLink'), '_blank');\n        },\n        openPermissionModal() {\n            this.$emit('openPermissionModal');\n        },\n        openSubProcessorModal() {\n            this.$emit('openSubProcessorModal');\n        },\n        prepareTableContractsData() {\n            this.tableData.push(\n                this.feelContractFees(),\n                this.feelContractTransactions(),\n                this.feelContractLimits()\n            );\n\n            for (let key in tableRows) {\n                if (tableRows.hasOwnProperty(key)) {\n                    this.tableData.push(this.feelContractCheckMarksRow(tableRows[key]));\n                }\n            }\n        },\n        feelContractFees() {\n            let row = [\n                this.$tc('bf-sales-channel.contractModal.table.feeLabel'),\n                this.$tc('bf-sales-channel.contractModal.table.feeHelpText')\n            ];\n\n            this.bookableContracts.forEach((contract) => {\n                let price = new Intl.NumberFormat('de-DE', {style: 'currency', currency: 'EUR'})\n                    .format(contract.items[0].price);\n\n                row.push(price);\n            });\n\n            return row;\n        },\n        feelContractTransactions() {\n            let row = [\n                this.$tc('bf-sales-channel.contractModal.table.transactionsLabel'),\n                this.$tc('bf-sales-channel.contractModal.table.transactionsHelpText')\n            ];\n\n            this.bookableContracts.forEach((contract) => {\n                row.push(contract.items[0].included + '');\n            });\n\n            return row;\n        },\n        feelContractLimits() {\n            let row = [\n                this.$tc('bf-sales-channel.contractModal.table.limitsLabel'),\n                this.$tc('bf-sales-channel.contractModal.table.limitsHelpText')\n            ];\n\n            this.bookableContracts.forEach((contract) => {\n                let limit = contract.items[0].limit;\n\n                if (limit < 0) {\n                    limit = this.$tc('bf-sales-channel.contractModal.table.withoutLimitText');\n                }\n\n                row.push(limit + '');\n            });\n\n            return row;\n        },\n        feelContractCheckMarksRow(tableRow) {\n            let row = [\n                this.$tc('bf-sales-channel.contractModal.table.' + tableRow[0]),\n                this.$tc('bf-sales-channel.contractModal.table.' + tableRow[1])\n            ];\n\n            let columnNumber = 2;\n\n            this.bookableContracts.forEach(() => {\n                row.push(tableRow[columnNumber]);\n                columnNumber++;\n            });\n\n            return row;\n        }\n    }\n});\n","import template from './bf-bookable-contracts-permissions.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-bookable-contracts-permissions', {\n    template,\n\n    methods: {\n        closePermissionModal() {\n            this.$emit('go-to-sub-processor', 'subProcessor');\n        }\n    }\n})\n","import template from './bf-bookable-contracts-sub-processor.html.twig';\nimport './bf-bookable-contracts-sub-processor.scss';\nconst {Component} = Shopware;\n\nComponent.register('bf-bookable-contracts-sub-processor', {\n    template,\n\n    props: {\n        subProcessorData: {\n            type: String,\n            required: true,\n            default: ''\n        }\n    }\n});\n","import template from './bf-sales-channel-amazon-fba-prime-shipping-methods.html.twig';\n\nconst {Component} = Shopware;\nComponent.register('bf-sales-channel-amazon-fba-prime-shipping-methods', {\n    template,\n    inject: [\n        'BfSalesChannelService'\n    ],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            default: ''\n        },\n        isSalesChannelAmazon: false,\n        salesChannel: null\n    },\n    data() {\n        return {\n            isLoading: true,\n            shippingMethods: [],\n            amazonFbaPrimeShippingMethods: {\n                fba: {shippingMethodId: null, code: \"\"},\n                prime: {shippingMethodId: null, code: \"\"},\n                primeNextDay: {shippingMethodId: null, code: \"\"},\n                primeSecondDay: {shippingMethodId: null, code: \"\"}\n            }\n        }\n    },\n    watch: {\n        salesChannel: function (salesChannel, oldSalesChannel) {\n            if (oldSalesChannel === null && salesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(salesChannel.typeId) === 'amazon') {\n                this.loadComponent();\n            }\n        },\n        'salesChannel.shippingMethods': function (newShippingMethods, oldShippingMethods) {\n            if (newShippingMethods !== null && oldShippingMethods !== null && newShippingMethods !== undefined && oldShippingMethods !== undefined) {\n                if (oldShippingMethods.getIds().length !== newShippingMethods.getIds().length) {\n                    this.loadComponent();\n                }\n            }\n        }\n    },\n    computed: {\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContractName === ''\n                || this.currentContractName === 'SwagMarketsStarter';\n        }\n    },\n    methods: {\n        changedItem(args, propName) {\n            let shippingMethodEntity = this.salesChannel.shippingMethods.get(args[0]);\n\n            if (shippingMethodEntity !== null && shippingMethodEntity !== undefined) {\n                this.salesChannel.amazonFbaPrimeShippingMethods[propName] = {\n                    name: shippingMethodEntity.name,\n                    shippingMethodId: shippingMethodEntity.id,\n                    code: shippingMethodEntity.name + ' ##' + shippingMethodEntity.id + '##'\n                };\n            }\n        },\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        },\n        async loadComponent() {\n            let me = this,\n                config = await this.BfSalesChannelService.getBfConfigSwagMarketsSystem(),\n                salesChannelShippingData = this.salesChannel.shippingMethods.get(this.salesChannel.shippingMethodId);\n            await this.sleep(1500);\n\n            this.shippingMethods = [];\n\n            if (this.salesChannel.shippingMethods.getIds().length > 0) {\n                this.salesChannel.shippingMethods.getIds().forEach(function (item) {\n                    let shippingItem = me.salesChannel.shippingMethods.get(item);\n                    me.shippingMethods.push(\n                        {\n                            label: shippingItem.name,\n                            value: shippingItem.id,\n                            disabled: false\n                        }\n                    )\n                });\n            }\n\n            this.amazonFbaPrimeShippingMethods = config.amazonFbaPrimeShippingMethods;\n\n            if(salesChannelShippingData !== null) {\n                this.setDefaultShippingData(salesChannelShippingData);\n            }\n\n            this.salesChannel.amazonFbaPrimeShippingMethods = this.amazonFbaPrimeShippingMethods;\n            this.isLoading = false;\n        },\n        setDefaultShippingData(salesChannelShippingData) {\n            let defaultShippingMethodsId = salesChannelShippingData.id,\n                defaultShippingMethodsCode = salesChannelShippingData.name + \" ##\" + salesChannelShippingData.id + \"##\";\n            if (this.amazonFbaPrimeShippingMethods.fba.shippingMethodId === null ||\n                this.salesChannel.shippingMethods.getIds().includes(this.amazonFbaPrimeShippingMethods.fba.shippingMethodId) === false) {\n                this.amazonFbaPrimeShippingMethods.fba.shippingMethodId = defaultShippingMethodsId;\n                this.amazonFbaPrimeShippingMethods.fba.code = defaultShippingMethodsCode;\n            }\n\n            if (this.amazonFbaPrimeShippingMethods.prime.shippingMethodId === null ||\n                this.salesChannel.shippingMethods.getIds().includes(this.amazonFbaPrimeShippingMethods.prime.shippingMethodId) === false) {\n                this.amazonFbaPrimeShippingMethods.prime.shippingMethodId = defaultShippingMethodsId;\n                this.amazonFbaPrimeShippingMethods.prime.code = defaultShippingMethodsCode;\n            }\n\n            if (this.amazonFbaPrimeShippingMethods.primeNextDay.shippingMethodId === null ||\n                this.salesChannel.shippingMethods.getIds().includes(this.amazonFbaPrimeShippingMethods.primeNextDay.shippingMethodId) === false) {\n                this.amazonFbaPrimeShippingMethods.primeNextDay.shippingMethodId = defaultShippingMethodsId;\n                this.amazonFbaPrimeShippingMethods.primeNextDay.code = defaultShippingMethodsCode;\n            }\n\n            if (this.amazonFbaPrimeShippingMethods.primeSecondDay.shippingMethodId === null ||\n                this.salesChannel.shippingMethods.getIds().includes(this.amazonFbaPrimeShippingMethods.primeSecondDay.shippingMethodId) === false) {\n                this.amazonFbaPrimeShippingMethods.primeSecondDay.shippingMethodId = defaultShippingMethodsId;\n                this.amazonFbaPrimeShippingMethods.primeSecondDay.code = defaultShippingMethodsCode;\n            }\n        }\n    },\n    created() {\n        if (this.salesChannel !== null && this.salesChannel._isNew) { return; }\n            this.loadComponent();\n    },\n    beforeCreate() {\n        this.isLoading = true;\n    }\n});\n","import template from './bf-sales-channel-amazon-extended-configuration.html.twig';\nimport BfSalesChannelService from \"../../../../service/bf-sales-channel.service\";\n\nconst {Component} = Shopware;\nComponent.register('bf-sales-channel-amazon-extended-configuration', {\n    template,\n    inject: ['BfSalesChannelService'],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            default: ''\n        },\n        salesChannel: null,\n        isSalesChannelAmazon: false\n    },\n    data() {\n        return {\n            dangerousGoods: [{label: 'Ghs', value: 'ghs'}, {label: 'Storage', value: 'storage'}, {\n                label: 'Waste',\n                value: 'waste'\n            },\n                {label: 'Not applicable', value: 'not_applicable'}, {label: 'Transportation', value: 'transportation'},\n                {label: 'Other', value: 'other'}, {label: 'Unknown', value: 'unknown'}],\n            dangerousGoodsItem: '',\n            needsBattery: [{label: this.$tc('global.yes'), value: '1'}, {label: this.$tc('global.no'), value: '0'}],\n            needsBatteryItem: '',\n            enableFba: false,\n            isLoading: true\n        }\n    },\n    watch: {\n        salesChannel: function (newSalesChannel, oldSalesChannel) {\n            if (oldSalesChannel === null && newSalesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(newSalesChannel.typeId) === 'amazon') {\n                this.loadComponent();\n            }\n        }\n    },\n    computed: {\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContractName === ''\n                || this.currentContractName === 'SwagMarketsStarter';\n        }\n    },\n    methods: {\n        async loadComponent() {\n            await this.BfSalesChannelService.getShopsConfigurations().then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    let data = response.data.data;\n                    if (data.hasOwnProperty('AMAZON_ARE_BATTERIES_REQUIRED')) {\n                        this.needsBatteryItem = data.AMAZON_ARE_BATTERIES_REQUIRED;\n                    }\n\n                    if (data.hasOwnProperty('AMAZON_DANGEROUS_GOODS_DEFAULT')) {\n                        this.dangerousGoodsItem = data.AMAZON_DANGEROUS_GOODS_DEFAULT;\n                    }\n                }\n\n                this.enableFba = this.salesChannel.enableFba;\n                this.salesChannel.needsBatteryItem = this.needsBatteryItem;\n                this.salesChannel.dangerousGoodsItem = this.dangerousGoodsItem;\n            });\n\n            this.isLoading = false;\n        },\n        changedBattery(args) {\n            this.needsBatteryItem = args;\n            this.salesChannel.needsBatteryItem = this.needsBatteryItem;\n        },\n        changedDangerousGoods(args) {\n            this.dangerousGoodsItem = args;\n            this.salesChannel.dangerousGoodsItem = this.dangerousGoodsItem;\n        },\n        changedEnableFba(args) {\n            this.enableFba = args;\n            this.salesChannel.enableFba = this.enableFba;\n        }\n    },\n    created() {\n        if (this.salesChannel !== null && this.salesChannel._isNew) { return; }\n\n        this.loadComponent();\n    },\n    beforeCreate() {\n        this.isLoading = true;\n    }\n});\n","import template from './bf-sales-channel-ebay-extended-configuration.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-sales-channel-ebay-extended-configuration', {\n    template,\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            default: ''\n        },\n        salesChannel: null,\n        isSalesChannelEbay: false\n    },\n    data() {\n        return {\n            isLoading: true\n        }\n    },\n    computed: {\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContractName === ''\n                || this.currentContractName === 'SwagMarketsStarter';\n        }\n    },\n    created() {\n        if (this.salesChannel !== null) {\n            this.isLoading = false;\n        }\n    },\n    beforeCreate() {\n        this.isLoading = true;\n    }\n});\n","import template from './bf-sales-channel-ebay-best-offer.html.twig'\nimport './bf-sales-channel-ebay-best-offer.scss'\n\nconst {Component, Mixin} = Shopware;\nComponent.register('bf-sales-channel-ebay-best-offer', {\n    template,\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        isGeneralPage: false,\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            required: true,\n            default: ''\n        },\n        ebayBestOfferActive: {\n            type: Boolean,\n            required: true,\n            default: false\n        },\n        ebayBestOfferAbsolute: {\n            type: Number,\n            required: true,\n            default: 0\n        },\n        ebayBestOfferRelative: {\n            type: Number,\n            required: true,\n            default: 0\n        },\n        ebayBestOfferAutoAccept: {\n            type: Boolean,\n            required: true,\n            default: false\n        },\n        ebayBestOfferAbsoluteAutoAccept: {\n            type: Number,\n            required: true,\n            default: 0\n        },\n        ebayBestOfferRelativeAutoAccept: {\n            type: Number,\n            required: true,\n            default: 0\n        },\n        useBrandAsManufacturer: {\n            type: Boolean,\n            required: true,\n            default: true\n        },\n        ebayBestOfferFix: {\n            type: Boolean,\n            required: true,\n            default: false\n        }\n    },\n    computed: {\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContractName === ''\n                || this.currentContractName === 'SwagMarketsStarter';\n        }\n    },\n    methods: {\n        changeInput(fieldName, event) {\n            if (fieldName === 'ebayBestOfferAbsoluteAutoAccept' && event < this.ebayBestOfferAbsolute) {\n                this.showErrorNotification('absoluteAutoAcceptMessage');\n\n                event = this.ebayBestOfferAbsolute;\n            } else if (fieldName === 'ebayBestOfferRelativeAutoAccept' && event < this.ebayBestOfferRelative) {\n                this.showErrorNotification('relativeAutoAcceptMessage');\n\n                event = this.ebayBestOfferRelative;\n            }\n            else if (fieldName === 'ebayBestOfferAbsolute' && (event > this.ebayBestOfferAbsoluteAutoAccept)) {\n                this.showErrorNotification('absoluteAutoAcceptMessage');\n\n                event = this.ebayBestOfferAbsoluteAutoAccept;\n            } else if (fieldName === 'ebayBestOfferRelative' && (event > this.ebayBestOfferRelativeAutoAccept)) {\n                this.showErrorNotification('relativeAutoAcceptMessage');\n\n                event = this.ebayBestOfferRelativeAutoAccept;\n            }\n\n            this.$emit('change', fieldName, event)\n        },\n        showErrorNotification(messageKey) {\n            this.createNotificationError({\n                title: this.$tc('bf-ebay-best-offer.notification.error.title'),\n                message: this.$tc('bf-ebay-best-offer.notification.error.' + messageKey)\n            });\n        }\n    }\n})\n","import template from './bf-sales-channel-defaults-select-only.html.twig';\n\nconst {Component, Mixin} = Shopware;\nComponent.register('bf-sales-channel-defaults-select-only', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null\n        },\n\n        propertyName: {\n            type: String,\n            required: true\n        },\n\n        propertyLabel: {\n            type: String,\n            required: true\n        },\n\n        defaultPropertyName: {\n            type: String,\n            required: true\n        },\n\n        defaultPropertyLabel: {\n            type: String,\n            required: true\n        },\n\n        propertyNameInDomain: {\n            type: String,\n            required: false,\n            default: null\n\n        },\n\n        helpText: {\n            type: String,\n            required: false,\n            default: null\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false\n        }\n    },\n\n    computed: {\n        propertyCollection: {\n            get() {\n                if (!this.salesChannel) {\n                    return [];\n                }\n\n                return this.salesChannel[this.propertyName];\n            },\n            set(newCollection) {\n                if (!this.salesChannel) {\n                    return;\n                }\n                this.salesChannel[this.propertyName] = newCollection;\n            }\n        },\n\n        defaultId: {\n            get() {\n                if (!this.salesChannel) {\n                    return null;\n                }\n\n                return this.salesChannel[this.defaultPropertyName];\n            },\n            set(newDefaultId) {\n                if (this.salesChannel) {\n                    this.salesChannel[this.defaultPropertyName] = newDefaultId;\n                }\n            }\n        },\n\n        propertyEntityName() {\n            return this.propertyCollection ? this.propertyCollection.entity : null;\n        },\n\n        propertyNameKebabCase() {\n            return Shopware.Utils.string.kebabCase(this.propertyName);\n        },\n\n        multiSelectClass() {\n            return `sw-sales-channel-detail__select-${this.propertyNameKebabCase}`;\n        },\n\n        singleSelectClass() {\n            return `sw-sales-channel-detail__assign-${this.propertyNameKebabCase}`;\n        },\n\n        defaultsValueError() {\n            return Shopware.State.getters['error/getApiError'](this.salesChannel, this.defaultPropertyName);\n        }\n    },\n\n    methods: {\n        updateCollection(collection) {\n            if (collection.length > this.propertyCollection.length) {\n                this.addItem(collection);\n                return;\n            }\n            this.removeItem(collection);\n        },\n\n        getNotInCollection(collectionWith, collectionWithout) {\n            const additionalElement = collectionWith.find((searched) => {\n                return !collectionWithout.some((included) => {\n                    return included.id === searched.id;\n                });\n            });\n\n            return additionalElement || null;\n        },\n\n        addItem(collection) {\n            const added = this.getNotInCollection(collection, this.propertyCollection);\n            this.propertyCollection = collection;\n\n            if (this.propertyCollection.length === 1) {\n                this.defaultId = added.id;\n            }\n        },\n\n        removeItem(collection) {\n            const removed = this.getNotInCollection(this.propertyCollection, collection);\n            if (removed === null) {\n                return;\n            }\n\n            if (this.propertyNameInDomain) {\n                const domain = this.getDomainUsingValue(removed);\n                if (domain !== null) {\n                    this.createNotificationError({\n                        message: this.$tc(\n                            'sw-sales-channel.sw-sales-channel-defaults-select.messageError',\n                            0,\n                            { url: domain.url }\n                        )\n                    });\n                    return;\n                }\n            }\n\n            this.propertyCollection = collection;\n            if (this.defaultId === removed.id) {\n                this.defaultId = null;\n            }\n        },\n\n        getDomainUsingValue(item) {\n            return this.salesChannel.domains.find((domain) => {\n                return domain[this.propertyNameInDomain] === item.id;\n            }) || null;\n        },\n\n        updateDefault(defaultId, defaultEntity) {\n            this.propertyCollection.getIds().forEach((id) => {\n                this.propertyCollection.remove(id);\n            });\n\n            this.defaultId = defaultId;\n            if (!!defaultId && !this.propertyCollection.has(defaultId)) {\n                this.propertyCollection.add(defaultEntity);\n            }\n        }\n    }\n});\n","import template from './bf-sales-channel-detail.html.twig';\n\nconst {Component, Mixin, Context, Defaults} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {mapGetters, mapMutations} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-sales-channel-detail', {\n    template,\n    inject: [\n        'repositoryFactory',\n        'bfPropertyService',\n        'BfSalesChannelService',\n        'BfAmazonService',\n        'BfEbayService',\n        \"BfCategoryService\"\n    ],\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder')\n    ],\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave'\n    },\n    data() {\n        return {\n            clientExists: false,\n            clientInProgress: false,\n            salesChannel: null,\n            isLoading: false,\n            customFieldSets: [],\n            isSaveSuccessful: false,\n            shippingPolicy: {\n                profileId: null,\n                isDirty: false,\n            },\n            paymentPolicy: {\n                profileId: null,\n                isDirty: false,\n            },\n            returnPolicy: {\n                profileId: null,\n                isDirty: false,\n            },\n            salesChannelType: null,\n        }\n    },\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier)\n        }\n    },\n    ...mapMutations([\n        'setCategoriesMappingStorage'\n    ]),\n    ...mapGetters('bfCategoryMapping', [\n        'getCategoriesMappingStorage'\n    ]),\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        toolTipSave() {\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light'\n            };\n        },\n    },\n    created() {\n        this.createdComponent();\n        this.checkClientState();\n    },\n    watch: {\n        '$route.params.id'() {\n            this.createdComponent()\n        }\n    },\n    methods: {\n        checkClientState() {\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n                this.clientInProgress = response.clientInProgress;\n            })\n        },\n        createdComponent() {\n            this.loadEntityData();\n        },\n        loadEntityData() {\n            if (!this.$route.params.id) {\n                return;\n            }\n\n            if (this.$route.params.typeId) {\n                return\n            }\n\n            if (this.salesChannel) {\n                this.salesChannel = null;\n            }\n\n            this.loadSalesChannel();\n        },\n        loadSalesChannel() {\n            this.isLoading = true;\n            this.salesChannelRepository\n                .get(this.$route.params.id, Context.api, this.getLoadSalesChannelCriteria())\n                .then((entity) => {\n                    this.salesChannel = entity;\n\n                    if (!this.salesChannel.maintenanceIpWhitelist) {\n                        this.salesChannel.maintenanceIpWhitelist = [];\n                    }\n\n                    this.salesChannelType = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n\n                    this.BfSalesChannelService.setSalesChannelType(this.salesChannelType);\n\n                    this.loadShopsConfigurations();\n                    this.loadErpSystemsConfiguration();\n                    this.isLoading = false;\n                    this.storeApiVersion();\n                    this.setUseAdminApi();\n                });\n        },\n\n        /**\n         * @returns {Object.Criteria}\n         */\n        getLoadSalesChannelCriteria() {\n            const criteria = new Criteria();\n\n            criteria.addAssociation('paymentMethods');\n            criteria.addAssociation('shippingMethods');\n\n            criteria.addAssociation('countries');\n            criteria.addAssociation('currencies');\n            criteria.addAssociation('languages');\n\n            criteria.addAssociation('marketplaces');\n\n            criteria.addAssociation('domains.language');\n            criteria.addAssociation('domains.snippetSet');\n            criteria.addAssociation('domains.currency');\n\n            return criteria;\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        async loadShopsConfigurations() {\n            await this.BfSalesChannelService.getShopsConfigurations().then((response) => {\n                let shopsConfigurations = response.data.data;\n                this.salesChannel = this.BfSalesChannelService.buildShopsConfigurations(this.salesChannel, shopsConfigurations);\n            }).catch((error) => {\n                this.isLoading = false;\n            });\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        async loadErpSystemsConfiguration() {\n            await this.BfSalesChannelService.getErpSystemsConfiguration().then((response) => {\n                let erpSystemsConfiguration = response.data.data,\n                    erpSystemsConfigurationObj = {};\n\n                erpSystemsConfiguration.forEach(function (item) {\n                    erpSystemsConfigurationObj[item.configurationKey] = item.configurationValue;\n                });\n                this.salesChannel.useNetPrice = erpSystemsConfigurationObj.hasOwnProperty('USE_NET_PRICE') ? erpSystemsConfigurationObj.USE_NET_PRICE === '1' : false;\n            });\n        },\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        async onSave() {\n            this.isLoading = true;\n            this.isSaveSuccessful = false;\n\n            if (!this.salesChannel._isNew && this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'ebay' && !this.createEbaySalesChannelIsValid()){\n                this.isLoading = false;\n                return;\n            }\n\n            if (!this.salesChannel._isNew) {\n                if (this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'ebay') {\n                    await this.storeEbayPolicies();\n                    await this.storeEbaySpecificShopsConfigurations();\n                } else if (this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'amazon') {\n                    this.storeAmazonSpecificShopsConfigurations().catch((error) => {\n                        return;\n                    });\n                }\n\n                await this.storeCurrencies();\n                await this.storeLanguages();\n                await this.storeErpSystemsConfiguration();\n                await this.storeSegmentMapping();\n                await this.storeCategoriesMapping();\n            } else {\n                await this.createDomainForSalesChannel(this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId));\n                if (this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'amazon') {\n                    this.salesChannel.paymentMethodId = this.getPaymentMethodIdForAmazon();\n                    this.salesChannel.paymentMethods.push(await this.getPaymentMethodForAmazon());\n                } else {\n                    this.salesChannel.paymentMethodId = this.getPaymentMethodIdForEbay();\n                    this.salesChannel.paymentMethods.push(await this.getPaymentMethodForEbay());\n                }\n            }\n\n            this.saveSalesChannelData();\n        },\n        saveSalesChannelData() {\n            this.salesChannelRepository\n                .save(this.salesChannel, Context.api)\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n\n                    if (!this.salesChannel._isNew) {\n                        if (this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'amazon') {\n                            this.BfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                                shops: {\n                                    'amazon': {\n                                        processing_time: this.salesChannel.processingTime\n                                    }\n                                }\n                            })\n                        }\n\n                        if (this.salesChannel.active === true) {\n                            this.BfSalesChannelService.activateDeactivateSalesChannelCronJobs(true);\n                        } else {\n                            this.BfSalesChannelService.activateDeactivateSalesChannelCronJobs(false);\n                        }\n                        this.activateDeactivateFbaOrdersCron();\n                    }\n\n                    if (this.salesChannel.marketplaceId) {\n                        this.BfSalesChannelService.setSalesChannelType(this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId));\n                        this.BfSalesChannelService.updateMarketplaceConfiguration({\n                            marketplace_id: this.salesChannel.marketplaceId\n                        });\n                    }\n\n                    this.BfSalesChannelService.storeSalesChannelLanguage(this.salesChannel);\n                    this.BfSalesChannelService.storeSalesChannelCountry(this.salesChannel);\n                    this.BfSalesChannelService.storeSalesChannelCurrency(this.salesChannel);\n\n                    this.$root.$emit('sales-channel-change');\n                    this.loadEntityData();\n\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n\n                    if (error.response && error.response.data.errors.length === 1) {\n                        if (error.response.data.errors[0].code === 999) {\n                            const salesChannelTypeName = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n                            this.createNotificationError({\n                                title: this.$tc('global.titleSaveError'),\n                                message: this.$tc('bf-sales-channel.create.duplicateSalesChannel', 0, {\n                                    type: salesChannelTypeName || this.placeholder(this.salesChannel, 'name')\n                                })\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            title: this.$tc('global.titleSaveError'),\n                            message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                                name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name')\n                            })\n                        });\n                    }\n                });\n        },\n        async createDomainForSalesChannel(marketPlaceUrlPrefix) {\n            let snippetSetEntity = null, currencyEntity = null, languageEntity = null;\n\n            if (this.salesChannel.domains.length === 1) {\n                //remove last element of the entityCollection to prevent issue with multiple domains\n                this.salesChannel.domains.pop();\n            }\n\n            if (this.salesChannel.currencyId && this.salesChannel.languageId) {\n                let criteria = new Criteria(1, 1);\n                await this.repositoryFactory.create('snippet_set').search(criteria, Context.api).then((entity) => {\n                    snippetSetEntity = entity.first();\n                });\n\n                criteria.addFilter(Criteria.equals('id', this.salesChannel.currencyId));\n                await this.repositoryFactory.create('currency').search(criteria, Context.api).then((entity) => {\n                    currencyEntity = entity.first();\n                })\n\n                criteria = new Criteria(1,1);\n                criteria.addFilter(Criteria.equals('id', this.salesChannel.languageId));\n                await this.repositoryFactory.create('language').search(criteria, Context.api).then((entity) => {\n                    languageEntity = entity.first();\n                })\n\n                const domainsEntity = this.repositoryFactory.create('sales_channel_domain').create(Context.api);\n                domainsEntity.url = 'https://' + marketPlaceUrlPrefix + '.' + location.hostname;\n                domainsEntity.language = languageEntity;\n                domainsEntity.languageId = languageEntity.id;\n                domainsEntity.currency = currencyEntity;\n                domainsEntity.currencyId = currencyEntity.id;\n                domainsEntity.snippetSet = snippetSetEntity;\n                domainsEntity.snippetSetId = snippetSetEntity.id;\n                domainsEntity.hreflangUseOnlyLocale = false;\n                domainsEntity._isNew = true;\n\n                this.salesChannel.domains.add(domainsEntity);\n            }\n        },\n        /**\n         * @returns {boolean}\n         */\n        createEbaySalesChannelIsValid() {\n            if (this.salesChannel.paymentMethods.length === 0) {\n                this.createNotificationError({\n                    title: this.$tc('global.titleSaveError'),\n                    message: this.$tc('ebay.paymentMethodError')\n                });\n\n                return false;\n            }\n\n            return true;\n        },\n        async activateDeactivateFbaOrdersCron() {\n            if (this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'amazon') {\n                await this.BfAmazonService.activateDeactivateFbaOrdersCron(this.BfSalesChannelService, this.salesChannel);\n            }\n        },\n\n        /**\n         * @returns {boolean|Boolean}\n         */\n        abortOnLanguageChange() {\n            return this.salesChannelRepository.hasChanges(this.salesChannel);\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n        onChangeLanguage() {\n            this.loadEntityData();\n        },\n\n        /**\n         * @param policyName\n         * @param profileId\n         */\n        setPolicy(policyName, profileId) {\n            this[policyName].profileId = profileId;\n            this[policyName].isDirty = true;\n            if (profileId !== null && profileId.length > 0) {\n                this.salesChannel[policyName] = true;\n            }\n        },\n        storeEbayPolicies() {\n            this.BfEbayService.storeEbayPolicies(this.BfSalesChannelService, this.shippingPolicy, this.paymentPolicy, this.returnPolicy);\n        },\n        async storeAmazonSpecificShopsConfigurations() {\n            /** Store specific erp matching for amazon sales channel */\n            await this.BfAmazonService.storeErpSystemMatchingData(this.BfSalesChannelService, this.salesChannel, true).then(() => {\n            });\n            /** Store specific matchings and shops configurations and payment methods */\n            await this.BfAmazonService.storeShopsConfigurationData(this.BfSalesChannelService, this.salesChannel);\n        },\n        async storeEbaySpecificShopsConfigurations() {\n            /** Store specific shops configurations*/\n            await this.BfEbayService.storeShopsConfigurationData(this.BfSalesChannelService, this.salesChannel).then((result) =>{\n                !result.mailIsValid ? this.ebayNotifications(this.$tc('error.notification.title'), this.$tc('error.ebay.ebayInvalidPayPalMailAddress')): null;\n                !result.logoUrlIsValid ? this.ebayNotifications(this.$tc('error.notification.title'), this.$tc('error.ebay.ebayInvalidLogoUrl')): null;\n            });\n            /** Store specific erp matching for ebay sales channel */\n            await this.BfEbayService.storeErpSystemMatchingData(this.BfSalesChannelService, this.salesChannel, true);\n        },\n\n        /**\n         * Stores currencies data in erp_systems_configuration/shops_currencies\n         * @returns {Promise<void>}\n         */\n        async storeCurrencies() {\n            await this.BfSalesChannelService.storeErpSystemsConfigurationCurrenciesMatching(\n                await this.BfSalesChannelService.getSelectedCurrencyEntity(this.salesChannel.currencyId), true);\n        },\n\n        /**\n         * Stores languages data in erp_systems_configurations/shops_languages\n         * @returns {Promise<void>}\n         */\n        async storeLanguages() {\n            await this.BfSalesChannelService.storeErpSystemsConfigurationLanguagesMatching(\n                await this.BfSalesChannelService.getSelectedLanguagesEntity(this.salesChannel.languageId), true);\n        },\n\n        /**\n         * Stores the plain erp systems configuration\n         * @returns {Promise<void>}\n         */\n        async storeErpSystemsConfiguration() {\n            await this.BfSalesChannelService.storeErpSystemsConfiguration(\n                {\n                    USE_NET_PRICE: this.salesChannel.useNetPrice === true ? '1' : '0',\n                }\n            );\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        async storeApiVersion() {\n            await this.BfSalesChannelService.storeApiVersion();\n        },\n\n        /**\n         * @returns {Promise<void>}\n         */\n        async setUseAdminApi() {\n            await this.BfSalesChannelService.storeUseAdminApi();\n        },\n\n        /**\n         *\n         * @returns {Promise<void>}\n         */\n        async storeSegmentMapping() {\n            let preparedSegmentToSave = JSON.parse(localStorage.getItem('productSegment'));\n\n            if (preparedSegmentToSave !== null && preparedSegmentToSave !== 'null') {\n                this.BfCategoryService.storeCategorySegmentMapping(preparedSegmentToSave)\n                    .then((response) => {\n                        this.createNotificationSuccess({\n                            title: this.$tc('bf-category-segment-mapping.notification.title'),\n                            message: this.$tc('bf-category-segment-mapping.notification.messageSuccess')\n                        });\n\n                        localStorage.setItem('productSegment', null)\n                        this.isLoading = false;\n                    })\n                    .catch((error) => {\n                        console.log(error);\n\n                        this.createNotificationError({\n                            title: this.$tc('bf-category-segment-mapping.notification.title'),\n                            message: this.$tc('bf-category-segment-mapping.notification.messageError')\n                        });\n\n                        this.isLoading = false;\n                    });\n            }\n        },\n        /**\n         *\n         * @param title {string}\n         * @param message {string}\n         */\n        ebayNotifications(title = '', message = '') {\n            this.createNotificationError({title: title, message: message});\n        },\n\n        /**\n         *\n         * @returns {Promise<null>}\n         */\n        async getPaymentMethodForAmazon() {\n            return await this.BfSalesChannelService.getSelectedPaymentMethodEntity(this.salesChannel.paymentMethodId);\n        },\n\n        /**\n         * @returns {Promise<null>}\n         */\n        async getPaymentMethodForEbay() {\n            return await this.BfSalesChannelService.getSelectedPaymentMethodEntity(this.salesChannel.paymentMethodId);\n        },\n\n        /**\n         * @returns {string}\n         */\n        getPaymentMethodIdForAmazon() {\n            return 'ea606c4e4752dd3edd06ee8641e5ef4a';\n        },\n\n        /**\n         * @returns {string}\n         */\n        getPaymentMethodIdForEbay() {\n            return '05d8e3bdac2b4ed7939bf3f8bfd0b94d';\n        }\n    }\n})\n","import template from './bf-sales-channel-ebay-policy.html.twig';\n\nconst {Component} = Shopware;\nComponent.register('bf-sales-channel-ebay-policy', {\n    template,\n    inject: ['BfSalesChannelService'],\n    props: {\n        salesChannel: null,\n        clientRdy: false\n    },\n    data() {\n        return {\n            showPolicies: false,\n            shippingPolicy: {\n                shippingPolicies: [{label: '', value: ''}],\n                shippingPoliciesIsLoading: false,\n                selectedShippingPolicy: null\n            },\n            paymentPolicy: {\n                paymentPolicies: [{label: '', value: ''}],\n                paymentPoliciesIsLoading: false,\n                selectedPaymentPolicy: null\n            },\n            returnPolicy: {\n                returnPolicies: [{label: '', value: ''}],\n                returnPoliciesIsLoading: false,\n                selectedReturnPolicy: null\n            },\n            errorLoadingPolicies: false\n        }\n    },\n    watch: {\n        salesChannel: function (salesChannel, oldSalesChannel) {\n            if (oldSalesChannel === null && salesChannel !== null &&\n                this.$route.meta.$module.getSalesChannelByTypeId(salesChannel.typeId) === 'ebay') {\n                this.showPolicies = true;\n            }\n        },\n        clientRdy: function (clientRdy) {\n            if (clientRdy === true) {\n                if (this.salesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'ebay'){\n                    this.loadPolicies();\n                    this.loadData();\n                }\n            }\n        },\n        'shippingPolicy.selectedShippingPolicy': function (profileId) {\n            this.$emit('setPolicy', 'shippingPolicy', profileId)\n        },\n        'paymentPolicy.selectedPaymentPolicy': function (profileId) {\n            this.$emit('setPolicy', 'paymentPolicy', profileId)\n        },\n        'returnPolicy.selectedReturnPolicy': function (profileId) {\n            this.$emit('setPolicy', 'returnPolicy', profileId)\n        }\n    },\n    methods: {\n        loadPolicies(){\n            this.getShippingPolicies();\n            this.getPaymentPolicies();\n            this.getReturnPolicies();\n        },\n        async getShippingPolicies() {\n            this.shippingPolicy.shippingPoliciesIsLoading = true;\n            await this.BfSalesChannelService.getEbayPolicy('shipping').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.shippingPolicy.shippingPolicies = this.buildPolicies(response.data.data);\n                    }\n                }\n            }).catch((error) =>{\n                this.errorLoadingPolicies = true;\n            });\n            this.shippingPolicy.shippingPoliciesIsLoading = false;\n        },\n        async getPaymentPolicies() {\n            this.paymentPolicy.paymentPoliciesIsLoading = true;\n            await this.BfSalesChannelService.getEbayPolicy('payment').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.paymentPolicy.paymentPolicies = this.buildPolicies(response.data.data);\n                    }\n                }\n            }).catch((error) =>{\n                this.errorLoadingPolicies = true;\n            });\n            this.paymentPolicy.paymentPoliciesIsLoading = false;\n        },\n        async getReturnPolicies() {\n            this.returnPolicy.returnPoliciesIsLoading = true;\n            await this.BfSalesChannelService.getEbayPolicy('return').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.returnPolicy.returnPolicies = this.buildPolicies(response.data.data);\n                    }\n                }\n            }).catch((error) =>{\n                this.errorLoadingPolicies = true;\n            });\n            this.returnPolicy.returnPoliciesIsLoading = false;\n        },\n        async loadData() {\n            await this.BfSalesChannelService.getShopsConfigurations('ebay').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    let data = response.data.data;\n                    if (data.hasOwnProperty('SHIPPING_POLICY')) {\n                        this.shippingPolicy.selectedShippingPolicy = data.SHIPPING_POLICY;\n                    }\n\n                    if (data.hasOwnProperty('PAYMENT_POLICY')) {\n                        this.paymentPolicy.selectedPaymentPolicy = data.PAYMENT_POLICY;\n                    }\n\n                    if (data.hasOwnProperty('RETURN_POLICY')) {\n                        this.returnPolicy.selectedReturnPolicy = data.RETURN_POLICY;\n                    }\n                }\n            });\n        },\n        buildPolicies(data) {\n            let policies = [];\n            data.forEach((item) => {\n                policies.push({label: item.profileName, value: item.profileId})\n            });\n            return policies;\n        }\n    },\n    created() {\n        if (this.salesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'ebay'){\n            this.showPolicies = true;\n            if (this.clientRdy === true) {\n                this.loadPolicies();\n                this.loadData();\n            }\n        }\n    }\n});\n","import template from './bf-sales-channel-ebay-token-expires.html.twig';\n\nconst {Component} = Shopware;\nComponent.register('bf-sales-channel-ebay-token-expires', {\n    template,\n    inject: [\n        'BfSalesChannelService',\n        'BfConnectionAssistantService'\n    ],\n    props: {\n        salesChannel: null,\n        clientRdy: false\n    },\n    data() {\n        return {\n            showTokenCard: false,\n            isLoading: true,\n            oAuthTokenDate: '<span style=\"color: red\">' + this.$tc('bf-sales-channel.detail.ebayExpireTokenOAuthNotAvailable') + '</span>',\n            authTokenDate: '<span style=\"color: red\">' + this.$tc('bf-sales-channel.detail.ebayExpireTokenAuthNotAvailable') + '</span>',\n            errorLoadingTokens: false,\n            tokenLink: '',\n            oAuthTokenLink: '',\n            errorAuthTokenLink: false,\n            errorOAuthTokenLink: false\n        }\n    },\n    watch: {\n        salesChannel: function (salesChannel, oldSalesChannel) {\n            if (oldSalesChannel === null && salesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(salesChannel.typeId) === 'ebay') {\n                this.showTokenCard = true;\n                this.getEbayTokenLink();\n                this.getEbayOAuthToken();\n                this.loadData();\n            }\n        }\n    },\n    methods: {\n        async loadData() {\n            await this.BfSalesChannelService.getEbayTokenExpires().then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    let data = response.data.data;\n                    if (data.hasOwnProperty('oauthToken')) {\n                        if (data.oauthToken.tokenExpired.length > 0){\n                            this.oAuthTokenDate = '<span style=\"color: green\">' + data.oauthToken.tokenExpired + data.oauthToken.error + '</span>';\n                        }\n                    }\n                    if (data.hasOwnProperty('token')) {\n                        if (data.token.tokenExpired.length > 0) {\n                            this.authTokenDate = '<span style=\"color: green\">' + data.token.tokenExpired + data.token.error + '</span>';\n                        }\n                    }\n                }\n            }).catch(() => {\n                this.errorLoadingTokens = true;\n            });\n            this.isLoading = false;\n        },\n        async getEbayTokenLink() {\n            await this.BfConnectionAssistantService.ebayConnectLink().then((response) => {\n                if (response.data.success === true && response.status === 200) {\n                    this.tokenLink = response.data.data.irpLink;\n                }\n            }).catch(() =>{\n                this.errorAuthTokenLink = true;\n            });\n        },\n        authorizeAuthToken(){\n            window.open(this.tokenLink, '_blank');\n        },\n        async getEbayOAuthToken(){\n            await this.BfConnectionAssistantService.ebayOAuthTokenLink().then((response) => {\n                if (response.data.success === true && response.status === 200) {\n                    this.oAuthTokenLink = response.data.data.irpLink;\n                }\n            }).catch(() =>{\n                this.errorAuthTokenLink = true;\n            });\n        },\n        authorizeOAuthToken(){\n            window.open(this.oAuthTokenLink, '_blank');\n        }\n    },\n    created() {\n        if (this.salesChannel !== null && this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId) === 'ebay') {\n            this.showTokenCard = true;\n            this.getEbayTokenLink();\n            this.getEbayOAuthToken();\n            this.loadData();\n        }\n    }\n});\n","import template from './bf-sales-channel-ebay-payment-method.html.twig'\nimport './bf-sales-channel-ebay-payment-method.scss';\n\nconst paymentToBfInternalPaymentId = {\n    payPal: 13, moneyXferAcceptedInCheckout: 2, cashOnPickup: 10,\n    cod: 3, ebayPayments: 61\n};\nconst {Component, Context, Mixin} = Shopware;\nconst {Criteria, EntityCollection} = Shopware.Data;\n\nComponent.extend('bf-sales-channel-ebay-payment-method', 'sw-sales-channel-defaults-select', {\n    template,\n    inject: [\n        'BfSalesChannelService',\n        'repositoryFactory'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        propertyName: {\n            type: String,\n            required: true\n        },\n        defaultPropertyName: {\n            type: String,\n            required: true\n        },\n        salesChannel: {\n            type: Object,\n            required: true\n        },\n    },\n    data() {\n        return {\n            payments: [{name: this.$tc('bf-sales-channel.detail.ebayPaymentSelectName'), id: '####111111####'}],\n            selectedPayment: {\n                payPal: {\n                    id: null\n                },\n                moneyXferAcceptedInCheckout: {\n                    id: null\n                },\n                cashOnPickup: {\n                    id: null\n                },\n                cod: {\n                    id: null\n                },\n                ebayPayments: {\n                    id: null\n                }\n            },\n            focusPropName: null,\n            paymentMethodsCreated: false,\n            paymentMethodObjectCount: 0,\n            ebayPayments: [],\n            loadingPaymentMatching: false\n        }\n    },\n    watch: {\n        salesChannel: function (newVal, oldVal) {\n            if (oldVal === null && newVal !== null) {\n                this.paymentMethodsCreated = false;\n                this.loadComponent();\n            }\n        }\n    },\n    computed: {\n        paymentMethodRepository() {\n            return this.repositoryFactory.create(this.propertyCollection.entity);\n        },\n        isDisabled() {\n            return !this.clientExists || this.clientInProgress;\n        }\n    },\n    methods: {\n        /**\n         * @param paymentMethodsId string\n         * @param paymentMethodProp string\n         */\n        async changedEbayPayment(paymentMethodsId, paymentMethodProp) {\n            let me = this;\n            const newCollection = EntityCollection.fromCollection(me.propertyCollection);\n\n            this.payments.forEach(function (data, index) {\n                if (data.id === paymentMethodsId) {\n                    newCollection.remove(me.selectedPayment[paymentMethodProp].id);\n                    me.removeEbayPaymentData(paymentMethodProp);\n\n                    if (data.id !== '####111111####') {\n                        me.payments[index].disabled = true;\n                        me.prepareEbayPaymentData(data.name, paymentMethodsId, paymentMethodProp);\n                        newCollection.add(data);\n                    }\n\n                    if (me.selectedPayment[paymentMethodProp].id !== null) {\n                        me.enableSelectValue(me.selectedPayment[paymentMethodProp].id);\n                    }\n\n                    if (paymentMethodsId === '####111111####') {\n                        paymentMethodsId = null;\n                    }\n\n                    me.selectedPayment[paymentMethodProp].id = paymentMethodsId;\n                    me.updateCollectionData(newCollection)\n                }\n            });\n\n            this.salesChannel.ebayPaymentMethods = this.ebayPayments;\n            await this.setNoPaymentMethodMatching();\n        },\n        /**\n         * @param paymentMethodsId string\n         */\n        enableSelectValue(paymentMethodsId) {\n            let me = this;\n\n            this.payments.forEach(function (data, index) {\n                if (data.id === paymentMethodsId) {\n                    me.payments[index].disabled = false;\n                }\n            });\n        },\n        async loadComponent() {\n            let me = this;\n            this.loadingPaymentMatching = true;\n            if (this.salesChannel !== null) {\n                this.salesChannel.noPaymentMethodMatching = true;\n\n                await this.getPaymentMethods().then((paymentMethods) => {\n                    if (paymentMethods.length > 0 && this.paymentMethodsCreated === false) {\n                        this.payments = [{\n                            name: this.$tc('bf-sales-channel.detail.ebayPaymentSelectName'),\n                            id: '####111111####'\n                        }];\n\n                        paymentMethods.forEach(function (item) {\n                            me.paymentMethodObjectCount += 1;\n                            me.payments.push(\n                                {\n                                    name: item.name,\n                                    id: item.id,\n                                    disabled: false\n                                }\n                            )\n                        });\n                        this.paymentMethodsCreated = true;\n                        this.loadPaymentMethodsMatching();\n                    }\n                });\n            }\n            this.loadingPaymentMatching = false;\n        },\n        async loadPaymentMethodsMatching() {\n            let me = this;\n            await this.BfSalesChannelService.getBfConfigSwagMarketsSystem(true).then((config) => {\n                if (config !== null && config !== undefined && config.hasOwnProperty('payment_methods_matching')) {\n                    if (config.payment_methods_matching.length > 0) {\n                        this.salesChannel.ebayPaymentMethods = config.payment_methods_matching;\n                        this.ebayPayments = config.payment_methods_matching;\n                        this.setNoPaymentMethodMatching();\n\n                        config.payment_methods_matching.forEach(function (item) {\n                            let payment = me.reMapIdToPayment(item.paymentMethodsId)\n                            if (payment !== null) {\n                                let result = item.erpPaymentMethodsCode.match(/##(.*?)##/g).map(function (val) {\n                                    return val.replace(/##/g, '');\n                                });\n                                me.selectedPayment[payment].id = result[0];\n                                me.payments.forEach(function (content){\n                                    if(content.id === result[0]) {\n                                        content.disabled = true;\n                                    }\n                                });\n                            }\n                        });\n                    }\n                }\n            });\n        },\n        updateCollectionData(newCollection) {\n            this.updateCollection(newCollection);\n            this.updateDefaultId(newCollection);\n        },\n        updateDefaultId(newCollection) {\n            if (this.defaultId === null) {\n                if (newCollection[0] !== undefined) {\n                    this.defaultId = newCollection[0].id\n                } else {\n                    this.createNotificationError({\n                        title: this.$tc('error.notification.title'),\n                        message: this.$tc('bf-sales-channel.detail.noPaymentMethodsSelected')\n                    });\n                }\n            }\n        },\n        /**\n         * @returns {Promise<null>}\n         */\n        async getPaymentMethods() {\n            return this.paymentMethodRepository.search(new Criteria(1,500), Context.api).then((result) => {\n                return result;\n            });\n        },\n        /**\n         * @param name string\n         * @param paymentMethodId string\n         * @param paymentPropName string\n         */\n        prepareEbayPaymentData(name, paymentMethodId, paymentPropName) {\n            if (paymentToBfInternalPaymentId.hasOwnProperty(paymentPropName)) {\n                if (this.ebayPayments.length > 0) {\n                    let found = false;\n                    this.ebayPayments.forEach(function (item, index) {\n                        if (item.paymentMethodsId === paymentToBfInternalPaymentId[paymentPropName]) {\n                            found = true;\n                            item.erpPaymentMethodsCode =  name + \" ##\" + paymentMethodId + \"##\"\n                        }\n                    });\n\n                    if (found === false) {\n                        this.ebayPayments.push({\n                            paymentMethodsId: paymentToBfInternalPaymentId[paymentPropName],\n                            erpPaymentMethodsCode: name + \" ##\" + paymentMethodId + \"##\"\n                        })\n                    }\n                } else {\n                    this.ebayPayments.push({\n                        paymentMethodsId: paymentToBfInternalPaymentId[paymentPropName],\n                        erpPaymentMethodsCode: name + \" ##\" + paymentMethodId + \"##\"\n                    })\n                }\n            }\n        },\n        removeEbayPaymentData(paymentPropName){\n            let me = this;\n            if (paymentToBfInternalPaymentId.hasOwnProperty(paymentPropName)) {\n                if (this.ebayPayments.length > 0) {\n                    this.ebayPayments.forEach(function (item, index) {\n                        if (item.paymentMethodsId === paymentToBfInternalPaymentId[paymentPropName]) {\n                            me.ebayPayments.splice(index, 1);\n                        }\n                    })\n                }\n            }\n        },\n        /**\n         * @param id int\n         */\n        reMapIdToPayment(id) {\n            const bfInternalPaymentIdToPayment = {\n                13: 'payPal', 2: 'moneyXferAcceptedInCheckout', 10: 'cashOnPickup', 3: 'cod', 61: 'ebayPayments'\n            };\n\n            if (bfInternalPaymentIdToPayment.hasOwnProperty(id)) {\n                return bfInternalPaymentIdToPayment[id];\n            }\n\n            return null;\n        },\n        async setNoPaymentMethodMatching() {\n            this.salesChannel.noPaymentMethodMatching = this.salesChannel.ebayPaymentMethods.length === 0;\n        }\n    },\n    created() {\n        if (this.salesChannel !== null) {\n            this.loadComponent();\n        }\n    }\n})\n","import template from './bf-sales-channel-detail-base.html.twig';\nimport './bf-sales-channel-detail-base.scss';\nimport '../../component/bf-sales-channel-ebay-policy';\nimport '../../component/bf-sales-channel-ebay-token-expires';\nimport '../../component/bf-sales-channel-ebay-payment-method';\n\n\nconst {Component, Mixin, Context, Defaults} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nconst {mapPropertyErrors} = Component.getComponentHelper();\n\nComponent.register('bf-sales-channel-detail-base', {\n    template,\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder')\n    ],\n    inject: [\n        'bfPropertyService',\n        'salesChannelService',\n        'repositoryFactory',\n        'BfSalesChannelService',\n        'bfContractService',\n        'BfAmazonService',\n        'BfEbayService'\n    ],\n    props: {\n        salesChannel: {\n            required: true\n        },\n        isLoading: {\n            type: Boolean\n        }\n    },\n    data() {\n        return {\n            bookableContracts: [],\n            creatingNewSalesChannel: false,\n            showDeleteModal: false,\n            defaultSnippetSetId: '71a916e745114d72abafbfdc51cbd9d0',\n            marketplaceSettings: null,\n            isConnected: false,\n            isSegmentLoading: false,\n            clientExists: false,\n            clientInProgress: false,\n            showNotificationBox: false,\n            isLoadingBaseData: true,\n            connectionAssistantRouterLink: {\n                name: ''\n            },\n            bfBpUnauthorized: false,\n            connectionAssistantBtnStartDisabled: false,\n            intervalId: null,\n            startInterval: false,\n            isSalesChannelAmazon: false,\n            isSalesChannelEbay: false,\n            userAuthorised: false,\n            currentContract: {},\n            productMigrationRequest: false,\n            subProcessorData: ''\n        }\n    },\n    computed: {\n        currentContractName() {\n            if (this.currentContract.name === null || this.currentContract.name === undefined) {\n                return '';\n            }\n\n            return this.currentContract.name;\n        },\n        secretAccessKeyFieldType() {\n            return this.showSecretAccessKey ? 'text' : 'password'\n        },\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        mainNavigationCriteria() {\n            const criteria = new Criteria(1, 10);\n\n            return criteria.addFilter(Criteria.equals('type', 'page'));\n        },\n        async salesChannelType() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('id', this.$route.params.id));\n\n            return await this.salesChannelRepository.search(criteria, Context.api)\n                .then((response) => {\n                    return this.$route.meta.$module.getSalesChannelByTypeId(response.first().typeId)\n                });\n        },\n        maintenanceIpWhitelist: {\n            get() {\n                return this.salesChannel.maintenanceIpWhitelist ? this.salesChannel.maintenanceIpWhitelist : [];\n            },\n            set(value) {\n                this.salesChannel.maintenanceIpWhitelist = value;\n            }\n        },\n        isDomainAware() {\n            const domainAware = [Defaults.storefrontSalesChannelTypeId, Defaults.apiSalesChannelTypeId, '26a9ece25bd14b288b30c3d71e667d2c', '7ff39608fed04e4bbcc62710b7223966'];\n            return domainAware.includes(this.salesChannel.typeId);\n        },\n        customFieldCriteria(){\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('customFieldSet.relations.entityName', 'product'));\n            criteria.addFilter(Criteria.equals('active', 1));\n            criteria.addAssociation('customFieldSet');\n            return criteria;\n        },\n        ...mapPropertyErrors('salesChannel',\n            [\n                'name',\n                'customerGroupId',\n                'marketplaceId',\n                'countryId',\n                'currencyId',\n                'languageId',\n                'shippingMethodId',\n                'paymentMethodId',\n                'navigationCategoryId'\n            ])\n    },\n    watch: {\n        isLoading: function (isLoading) {\n            if (isLoading === false) {\n                this.checkClientState();\n                this.getProductMigrationRequestStatus();\n                this.isLoadingBaseData = isLoading;\n            } else if (isLoading === true) {\n                this.isLoadingBaseData = true;\n            }\n        },\n        startInterval: function (newVal) {\n            if (newVal === true) {\n                this.intervalId = setInterval(this.timedClientStateCheck, 10000);\n            }\n        },\n        salesChannelType() {\n            Promise.resolve(this.salesChannelType).then((result) => {\n                this.isSalesChannelAmazon = result === 'amazon';\n                this.isSalesChannelEbay = result === 'ebay';\n            });\n        }\n    },\n    methods: {\n        setCurrentSegment() {\n            let currentSegment = this.$refs.segmentDropdown.currentCategorySegment;\n\n            this.salesChannel.productSegment = currentSegment.productSegmentsName;\n            this.salesChannel.productType = currentSegment.productTypesName;\n        },\n        setSalesChannelAttributeValue(attributeName, value) {\n            this.salesChannel[attributeName] = value;\n        },\n        getAssignedProductSegmentAndType() {\n            if (this.isSalesChannelAmazon) {\n                this.isSegmentLoading = true;\n                this.$refs.segmentDropdown.setSegment(\n                    this.salesChannel,\n                    'productSegment',\n                    'productType'\n                );\n            }\n            this.isSegmentLoading = false;\n        },\n        onGenerateKeys() {\n            this.salesChannelService.generateKey().then((response) => {\n                this.salesChannel.accessKey = response.accessKey;\n            }).catch((error) => {\n                this.createNotificationError({\n                    title: this.$tc('sw-sales-channel.detail.titleAPIError'),\n                    message: this.$tc('sw-sales-channel.detail.messageAPIError')\n                });\n            });\n        },\n        onToggleActive() {\n            if (this.salesChannel.active) {\n                return;\n            }\n\n            this.salesChannelRepository\n                .get(this.$route.params.id, Context.api)\n                .then((entity) => {\n                    this.salesChannel.active = false;\n                });\n        },\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n        onConfirmDelete() {\n            this.showDeleteModal = false;\n\n            this.$nextTick(() => {\n                this.deleteSalesChannel(this.salesChannel.id);\n                this.$router.push({name: 'sw.dashboard.index'});\n            });\n        },\n        deleteSalesChannel(salesChannelId) {\n            this.salesChannelRepository.delete(salesChannelId, Context.api).then(() => {\n                this.$root.$emit('sales-channel-change');\n            });\n        },\n        checkClientState() {\n            this.timedClientStateCheck();\n        },\n        timedClientStateCheck() {\n            if (this.salesChannel._isNew) {\n                return;\n            }\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n\n                this.clientInProgress = response.clientInProgress;\n                if (this.clientInProgress === true) {\n                    this.startInterval = true;\n                    this.connectionAssistantBtnStartDisabled = true;\n                } else {\n                    clearInterval(this.intervalId);\n                    this.connectionAssistantBtnStartDisabled = false;\n                    this.sendSystemData();\n                    this.sendErpSystemMatching();\n                }\n\n                this.BfSalesChannelService.getIsMarketplaceConnected().then((isConnected) => {\n                    this.buildConnectionAssistantRouterLink()\n                    this.isConnected = isConnected;\n                    this.showNotificationBox = true;\n                    this.isLoadingBaseData = false;\n                });\n\n                this.getAssignedProductSegmentAndType();\n            }).catch((error) => {\n                this.isLoadingBaseData = false;\n                this.bfBpUnauthorized = true;\n            })\n        },\n        isSalesChannelActivationSwitchEnabled() {\n            if (this.salesChannel) {\n\n                // all active saleschannels can be deactivated\n                if (this.salesChannel.active) {\n                    return true;\n                }\n\n                if (this.isConnected && this.clientExists && !this.clientInProgress && !this.productMigrationRequest) {\n                    if (this.isSalesChannelEbay) {\n                        return this.salesChannel.shippingPolicy\n                            && this.salesChannel.paymentPolicy\n                            && this.salesChannel.returnPolicy\n                            && !this.salesChannel.noPaymentMethodMatching;\n                    }\n\n                    // here will come only amazon saleschannel\n                    return true;\n                }\n            }\n\n            return false;\n        },\n        async buildConnectionAssistantRouterLink() {\n            const salesChannelType = await this.BfSalesChannelService.getSalesChannelType();\n            let marketplaceId = await this.BfSalesChannelService.getMarketplaceId(salesChannelType);\n\n            this.connectionAssistantRouterLink = {\n                name: 'bf.sales.channel.detail.base.' + salesChannelType + 'ConnectionAssistant.start.authorize',\n                params: {\n                    marketplaceId: marketplaceId\n                }\n            };\n        },\n        async sendSystemData() {\n            if (this.salesChannel._isNew) {\n                return;\n            }\n            const salesChannelType = await this.BfSalesChannelService.getSalesChannelType();\n\n            await this.BfSalesChannelService.storeIntegrationUserCredentialsToBf().then((response) => {\n                if (response !== undefined && response !== false && response.status === 200 && response.data.success === true) {\n                    this.BfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                        erp_systems: {\n                            base_configuration_is_set: true\n                        }\n                    });\n                }\n            });\n\n            await this.BfSalesChannelService.storeSalesChannelDataToBf({\n                API_URL: window.location.origin + '/sales-channel-api/',\n                SHOPWARE_SALES_CHANNEL_ID: this.salesChannel.id,\n                SHOPWARE_SALES_CHANNEL_KEY: this.salesChannel.accessKey,\n                DEFAULT_DELIVERY_TIMES: this.salesChannel.processingTime\n            }).then((response) => {\n                if (response !== undefined && response !== false && response.status === 200 && response.data.success === true) {\n                    this.BfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                        shops: {\n                            [salesChannelType]: {\n                                base_configuration_is_set: true\n                            }\n                        }\n                    });\n                }\n            });\n        },\n        async sendErpSystemMatching() {\n            if (await this.BfSalesChannelService.getSalesChannelType() === 'amazon') {\n                await this.BfAmazonService.storeErpSystemMatchingData(this.BfSalesChannelService, this.salesChannel);\n            } else if (await this.BfSalesChannelService.getSalesChannelType() === 'ebay') {\n                await this.BfEbayService.storeErpSystemMatchingData(this.BfSalesChannelService, this.salesChannel);\n            }\n\n            await this.BfSalesChannelService.storeErpSystemsConfigurationCurrenciesMatching(\n                await this.BfSalesChannelService.getSelectedCurrencyEntity(this.salesChannel.currencyId));\n\n            await this.BfSalesChannelService.storeErpSystemsConfigurationLanguagesMatching(\n                await this.BfSalesChannelService.getSelectedLanguagesEntity(this.salesChannel.languageId));\n        },\n        closeLoginModal() {\n            this.showLoginModal = false;\n            this.getContract();\n        },\n        handleSbpError(error) {\n            if (error.response === undefined) {\n                this.userAuthorised = false;\n            } else {\n                let errorResponse = error.response.data;\n\n                this.createNotificationError({\n                    title: errorResponse.title,\n                    message: errorResponse.description\n                });\n            }\n        },\n        onSetNewContract(contract) {\n            this.currentContract = contract;\n            this.clientExists = true;\n        },\n        onCancelContract() {\n            this.currentContract = {};\n            this.clientExists = false;\n        },\n        getContract() {\n            return this.bfContractService.getUserInformation('user-token')\n                .then((response) => {\n                    if (response.longLifeToken === null || response.shopSecret === null) {\n                        this.userAuthorised = false;\n                        return response;\n                    } else {\n                        return this.getContractDetails();\n                    }\n                });\n        },\n        getProductMigrationRequestStatus() {\n            this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n            return this.BfSalesChannelService.getSalesChannelConfiguration().then((configuration) => {\n                this.productMigrationRequest = configuration.product_migration_request;\n            });\n        },\n        getContractDetails() {\n            return this.bfContractService.getContracts()\n                .then((contracts) => {\n                    if (contracts.current !== null) {\n                        this.currentContract = contracts.current;\n                    }\n\n                    this.userAuthorised = contracts.bookable !== undefined;\n                    this.bookableContracts = contracts.bookable;\n                    this.subProcessorData = contracts.subprocessors;\n\n                    return contracts;\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        setPolicy(policyName, profileId) {\n            this.$emit('setPolicy', policyName, profileId)\n        }\n    },\n    created() {\n        this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n        this.getContract();\n\n        //Need only to check client when route is not create\n        if (this.salesChannel !== null && this.$route.name !== 'bf.sales.channel.create.base') {\n            this.getProductMigrationRequestStatus();\n            this.checkClientState();\n        } else if (this.$route.name === 'bf.sales.channel.create.base') {\n            this.creatingNewSalesChannel = true;\n            this.isLoadingBaseData = false;\n            // resolve initially for the sales channel creation as well\n            Promise.resolve(this.salesChannelType).then((result) => {\n                this.isSalesChannelAmazon = result === 'amazon';\n                this.isSalesChannelEbay = result === 'ebay';\n            });\n        }\n    }\n})\n","import template from './bf-sales-channel-create.html.twig';\n\nconst {Component, StateDeprecated, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nconst utils = Shopware.Utils;\n\nComponent.extend('bf-sales-channel-create', 'bf-sales-channel-detail', {\n    template,\n    inject: [\n        'repositoryFactory'\n    ],\n    data() {\n        return {\n            navigationCategoryId: null\n        }\n    },\n    beforeRouteEnter(to, from, next) {\n        if (to.name.includes('bf.sales.channel.create') && !to.params.id) {\n            to.params.id = utils.createId();\n        }\n        next();\n    },\n    computed: {\n        languageStore() {\n            return StateDeprecated.getStore('language');\n        },\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        }\n    },\n    methods: {\n        createdComponent() {\n            if (!this.$route.params.typeId) {\n                return;\n            }\n\n            if (!Shopware.State.getters['context/isSystemDefaultLanguage']) {\n                Shopware.State.commit('context/resetLanguageToDefault');\n            }\n\n            this.salesChannel = this.salesChannelRepository.create(Context.api);\n            this.salesChannel.typeId = this.$route.params.typeId;\n            this.salesChannel.type = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n            this.salesChannel.active = false;\n\n            this.getMainCategoryId()\n\n            this.$super('createdComponent');\n        },\n        saveFinish() {\n            this.isSaveSuccessful = false;\n            this.$router.push({name: 'bf.sales.channel.detail', params: {id: this.salesChannel.id}});\n        },\n        onSave() {\n            this.$super('onSave');\n        },\n        getMainCategoryId() {\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.equals('level', 1));\n\n            this.categoryRepository.search(criteria, Context.api).then((categories) => {\n                this.salesChannel.navigationCategoryId = categories.first().id;\n            });\n        }\n    }\n});\n","import template from './bf-sales-channel-create-base.html.twig';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.extend('bf-sales-channel-create-base', 'bf-sales-channel-detail-base', {\n    template,\n    inject: [\n        'repositoryFactory',\n        'BfSalesChannelService'\n    ],\n    data() {\n        return {\n            marketplaceSettings: null,\n            marketplaces: [],\n            countries: [],\n            currencies: [],\n            languages: [],\n\n        }\n    },\n    created() {\n        this.createdComponent();\n    },\n    computed: {\n        marketplaceSettingsRepository() {\n            return this.repositoryFactory.create('bf_marketplace_settings');\n        },\n        marketplaceRepository() {\n            return this.repositoryFactory.create('bf_marketplace');\n        },\n        salesChannelType() {\n            return this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId)\n        }\n    },\n    methods: {\n        createdComponent() {\n            this.onGenerateKeys()\n\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('type', this.salesChannelType));\n\n            this.BfSalesChannelService.getMarketplaces(this.salesChannelType)\n                .then((marketplaces) => {\n                    marketplaces.forEach((marketplace) => {\n                        this.marketplaces.push({\n                            value: marketplace.channel_specific_id,\n                            label: marketplace.name\n                        });\n                    });\n                }).catch((error) => {\n                    console.log(error);\n            });\n        },\n        onUpdateMarketplace(marketplaceId) {},\n        resetAssociationEntities() {\n            this.languages = [];\n            this.currencies = [];\n            this.countries = [];\n        }\n    }\n});\n","import template from './bf-sales-channel-amazon-fba-prime.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.override('bf-sales-channel-detail', {\n    name: 'bf-sales-channel-amazon-fba-prime',\n\n    template,\n\n    inject: [\n        'BfSalesChannelService',\n    ],\n\n    data() {\n        return {\n            clientExists:         false,\n            clientInProgress:     false,\n            isSalesChannelAmazon: false\n        }\n    },\n    watch:   {\n        salesChannelType() {\n            Promise.resolve(this.salesChannelType).then((result) => {\n                this.isSalesChannelAmazon = result === 'amazon';\n            });\n        }\n    },\n    created() {\n        this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n        this.checkClientState();\n    },\n    methods: {\n        checkClientState() {\n\n            if (this.salesChannel !== null && this.salesChannel._isNew) {\n                return;\n            }\n\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n                this.clientInProgress = response.clientInProgress;\n            })\n        }\n    }\n});\n","import template from './bf-sales-channel-detail-amazon-prime-fba.html.twig';\n\nconst {Component, Mixin, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-detail-amazon-prime-fba', {\n    template,\n    mixins:   [\n        Mixin.getByName('notification')\n    ],\n    inject:   [\n        'bfContractService',\n        'repositoryFactory',\n        'BfSalesChannelService',\n        'BfAmazonService',\n    ],\n    props:    {\n        salesChannel: {\n            required: true\n        },\n        isLoading:    {\n            type: Boolean\n        }\n    },\n    data() {\n        return {\n            clientExists:         false,\n            clientInProgress:     false,\n            isSalesChannelAmazon: false,\n            currentContract:      {},\n            startInterval:        false,\n            intervalId:           null\n        }\n    },\n    computed: {\n        currentContractName() {\n            if (this.currentContract.name === null || this.currentContract.name === undefined) {\n                return '';\n            }\n\n            return this.currentContract.name;\n        },\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        async salesChannelType() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('id', this.$route.params.id));\n\n            return await this.salesChannelRepository.search(criteria, Context.api)\n                .then((response) => {\n                    return this.$route.meta.$module.getSalesChannelByTypeId(response.first().typeId)\n                });\n        },\n    },\n    watch:    {\n        isLoading:     function (isLoading) {\n            if (isLoading === false) {\n                this.checkClientState();\n                this.isLoadingBaseData = isLoading;\n            } else if (isLoading === true) {\n                this.isLoadingBaseData = true;\n            }\n        },\n        startInterval: function (newVal) {\n            if (newVal === true) {\n                this.intervalId = setInterval(this.timedClientStateCheck, 10000);\n            }\n        },\n        salesChannelType() {\n            Promise.resolve(this.salesChannelType).then((result) => {\n                this.isSalesChannelAmazon = result === 'amazon';\n            });\n        }\n    },\n    methods:  {\n        setSalesChannelAttributeValue(attributeName, value) {\n            this.salesChannel[attributeName] = value;\n        },\n        checkClientState() {\n            this.timedClientStateCheck();\n        },\n        getContractDetails() {\n            return this.bfContractService.getContracts()\n                .then((contracts) => {\n                    if (contracts.current !== null) {\n                        this.currentContract = contracts.current;\n                    }\n                    return contracts;\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        timedClientStateCheck() {\n            if (this.salesChannel._isNew) {\n                return;\n            }\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n\n                this.clientInProgress = response.clientInProgress;\n                if (this.clientInProgress === true) {\n                    this.startInterval = true;\n                } else {\n                    clearInterval(this.intervalId);\n                    this.sendSystemData();\n                    this.sendErpSystemMatching();\n                }\n            }).catch((error) => {\n                this.isLoadingBaseData = false;\n            })\n        },\n        async sendSystemData() {\n            if (this.salesChannel._isNew) {\n                return;\n            }\n            const salesChannelType = await this.BfSalesChannelService.getSalesChannelType();\n\n            await this.BfSalesChannelService.storeIntegrationUserCredentialsToBf().then((response) => {\n                if (response !== undefined && response !== false && response.status === 200 && response.data.success === true) {\n                    this.BfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                        erp_systems: {\n                            base_configuration_is_set: true\n                        }\n                    });\n                }\n            });\n\n            await this.BfSalesChannelService.storeSalesChannelDataToBf({\n                API_URL:                    window.location.origin + '/sales-channel-api/',\n                SHOPWARE_SALES_CHANNEL_ID:  this.salesChannel.id,\n                SHOPWARE_SALES_CHANNEL_KEY: this.salesChannel.accessKey,\n                DEFAULT_DELIVERY_TIMES:     this.salesChannel.processingTime\n            }).then((response) => {\n                if (response !== undefined && response !== false && response.status === 200 && response.data.success === true) {\n                    this.BfSalesChannelService.updateBfConfigSwagMarketsSystem({\n                        shops: {\n                            [salesChannelType]: {\n                                base_configuration_is_set: true\n                            }\n                        }\n                    });\n                }\n            });\n        },\n        async sendErpSystemMatching() {\n            if (await this.BfSalesChannelService.getSalesChannelType() === 'amazon') {\n                await this.BfAmazonService.storeErpSystemMatchingData(this.BfSalesChannelService, this.salesChannel);\n            }\n\n            await this.BfSalesChannelService.storeErpSystemsConfigurationCurrenciesMatching(\n                await this.BfSalesChannelService.getSelectedCurrencyEntity(this.salesChannel.currencyId));\n\n            await this.BfSalesChannelService.storeErpSystemsConfigurationLanguagesMatching(\n                await this.BfSalesChannelService.getSelectedLanguagesEntity(this.salesChannel.languageId));\n        },\n        handleSbpError(error) {\n            if (error.response === undefined) {\n                this.userAuthorised = false;\n            } else {\n                let errorResponse = error.response.data;\n\n                this.createNotificationError({\n                    title:   errorResponse.title,\n                    message: errorResponse.description\n                });\n            }\n        },\n    },\n    created() {\n        this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n\n        //Need only to check client when route is not create\n        if (this.salesChannel !== null && this.$route.name !== 'bf.sales.channel.create.base') {\n            this.checkClientState();\n        } else if (this.$route.name === 'bf.sales.channel.create.base') {\n            this.isLoadingBaseData = false;\n        }\n    }\n})\n","import template from './bf-sales-channel-category-mapping.html.twig';\nimport './bf-sales-channel-category-mapping.scss';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {mapGetters, mapMutations} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-sales-channel-category-mapping', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'bfProductApiService',\n        'BfSalesChannelService',\n        'BfCategoryService'\n    ],\n\n    props: {\n        salesChannelType: {\n            type: String,\n            required: true\n        },\n        categoriesReloadTriggerEvent: {\n            required: false\n        }\n    },\n\n    data() {\n        return {\n            swCategories: [],\n            categories: [],\n            swCategoriesIds: [],\n            marketplaceCategoriesId: {},\n            marketplaceId: null,\n            channelsId: null,\n            gridItems: [],\n            isLoading: true,\n            isLoadingMarketplaceCategories: true,\n            limit: 5,\n            page: 1,\n            total: 0,\n            categoriesMappingStorage: {},\n            shopsCategoriesGroups: {},\n            showModal: false,\n            toDeleteSwCategoryId: '',\n            showEmptyState: false\n        }\n    },\n\n    computed: {\n        categoriesRepository() {\n            return this.repositoryFactory.create('category');\n        },\n        columns() {\n            return this.getColumns();\n        },\n    },\n\n    watch: {\n        salesChannelType: function (newVal) {\n            if (newVal.length > 0) {\n                this.loadMarketplaceId();\n                this.loadSelectedSwCategories();\n            }\n        },\n        categoriesReloadTriggerEvent: function (newVal, oldVal) {\n            this.reset();\n            this.loadSelectedSwCategories();\n        }\n    },\n    created() {\n        this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n    },\n    methods: {\n        ...mapMutations([\n            'setCategoriesMappingStorage'\n        ]),\n        ...mapGetters('bfCategoryMapping', [\n            'getCategoriesMappingStorage'\n        ]),\n        async loadMarketplaceId() {\n            this.marketplaceId = await this.BfSalesChannelService.getMarketplaceId(this.salesChannelType);\n        },\n        /**\n         * @returns {Promise<void>}\n         */\n        async loadSelectedSwCategories() {\n            let me = this;\n            this.isLoading = true;\n\n            await this.BfSalesChannelService.getChannelId().then((channelsId) => {\n                this.channelsId = channelsId;\n            });\n\n            await this.BfCategoryService.getMappedCategories(this.salesChannelType, this.page, this.limit).then((response) => {\n                if (response) {\n                    me.total = response.totalCount;\n                    response.data.some(function (data) {\n                        if (data.shopsCategoriesGroupsExternShopsCategoriesIds.length > 0) {\n                            let externGroupsId = data.externGroupsId;\n\n                            data.shopsCategoriesGroupsExternShopsCategoriesIds.forEach(function (externShopsCategoriesId) {\n                                if (me.swCategoriesIds.find(el => el === externGroupsId) === undefined) {\n                                    me.swCategoriesIds.push(externGroupsId);\n                                    me.marketplaceCategoriesId[externGroupsId.toString()] = [externShopsCategoriesId.toString()]\n                                } else {\n                                    me.marketplaceCategoriesId[externGroupsId.toString()].push(externShopsCategoriesId.toString())\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n\n            await this.loadShopwareCategories();\n\n            this.isLoading = false;\n        },\n        async loadShopwareCategories() {\n            let me = this, criteria = new Criteria(1, this.limit), mapping = [];\n\n            if (this.swCategoriesIds.length > 0) {\n                criteria.addFilter(Criteria.equalsAny('id', this.swCategoriesIds));\n            } else {\n                criteria.addFilter(Criteria.equals('id', '7f52488ee997439ea8e842738cebe5c7'));\n            }\n\n            await this.categoriesRepository.search(criteria, Context.api).then((categoryEntities) => {\n                this.swCategories = categoryEntities;\n                if (categoryEntities.length > 0 && this.swCategoriesIds.length > 0) {\n                    categoryEntities.forEach(async function (categoryEntity) {\n                        await me.swSelectionAdd(categoryEntity, me.marketplaceCategoriesId[categoryEntity.id.toString()]);\n                    });\n                }\n                this.sortGridItems();\n            });\n\n            if (this.gridItems.length === 0) {\n                this.showEmptyState = true;\n            }\n        },\n\n        /**\n         * @param item\n         * @param marketplaceCategoriesIds\n         */\n        swSelectionAdd(item, marketplaceCategoriesIds = []) {\n            if (this.categoryAlreadyExists(item.id) === undefined) {\n                let breadCrumb = '', counter = 1, breadCrumbLength = item.breadcrumb.length, itemName = item.name;\n\n                item.breadcrumb.forEach(function (crumb) {\n                    if (counter < breadCrumbLength) {\n                        breadCrumb += crumb + ' / ';\n                    } else {\n                        breadCrumb += crumb;\n                    }\n                    ++counter;\n                });\n\n                this.addToStorage(item.id, marketplaceCategoriesIds);\n\n                if (itemName === null) {\n                    itemName = item.translated.name;\n                }\n\n                this.gridItems.push({\n                    swCategoriesId: item.id,\n                    shopwareCategory: breadCrumbLength > 1 ? '.../' + itemName : itemName,\n                    breadCrumb: breadCrumb,\n                    marketplaceCategoriesIds: marketplaceCategoriesIds\n                });\n\n                this.showEmptyState = false;\n            }\n        },\n        /**\n         * @param swCategoryId\n         */\n        categoryAlreadyExists(swCategoryId) {\n            return this.gridItems.find(item => (item.swCategoriesId.toString() === swCategoryId.toString()));\n        },\n        /**\n         * @param swCategoryId\n         * @param marketplaceCategoriesIds\n         */\n        addToStorage(swCategoryId, marketplaceCategoriesIds = []) {\n            let categoriesMappingStorage = this.getCategoriesMappingStorage();\n\n            categoriesMappingStorage[swCategoryId.toString()] = marketplaceCategoriesIds;\n            this.$store.commit('bfCategoryMapping/setCategoriesMappingStorage', categoriesMappingStorage);\n        },\n        showDeleteModal(id) {\n            this.toDeleteSwCategoryId = id;\n            this.showModal = true;\n        },\n        closeShowModal() {\n            this.toDeleteSwCategoryId = '';\n            this.showModal = false;\n        },\n        removeCategoryAssignment() {\n            let categoriesMappingStorage = this.getCategoriesMappingStorage(), counter = 0;\n            const me = this;\n\n            if (this.toDeleteSwCategoryId.length > 0) {\n\n                this.gridItems = this.gridItems.filter(function (item) {\n                    return item.swCategoriesId !== me.toDeleteSwCategoryId\n                });\n\n                categoriesMappingStorage[this.toDeleteSwCategoryId] = [];\n                this.$store.commit('bfCategoryMapping/setCategoriesMappingStorage', categoriesMappingStorage);\n                const objects = Object.entries(this.getCategoriesMappingStorage())\n\n                objects.forEach(async function (categoryMapping) {\n                    ++counter;\n\n                    await me.BfCategoryService.saveCategoryMapping(categoryMapping[0], categoryMapping[1], me.salesChannelType);\n\n                    if(counter === objects.length) {\n                        me.reset();\n                        me.loadSelectedSwCategories();\n                    }\n                });\n\n                this.showModal = false;\n            }\n        },\n        pageChange(params) {\n            this.page = params.page;\n            this.limit = params.limit;\n            this.reset();\n            this.loadSelectedSwCategories();\n        },\n        reset() {\n            this.gridItems = [];\n            this.swCategories = [];\n            this.categories = [];\n            this.swCategoriesIds = [];\n            this.marketplaceCategoriesId = {};\n            this.$store.commit('bfCategoryMapping/setCategoriesMappingStorage', []);\n        },\n        sortGridItems() {\n            if (this.gridItems.length > 1) {\n                this.gridItems.sort(function (a, b) {\n                    return a.shopwareCategory > b.shopwareCategory ? 1 : -1;\n                });\n            }\n        },\n        /**\n         * @returns {({property: string, label: *, rawData: boolean, height: number}|{property: string, label: *, rawData: boolean, height: string})[]}\n         */\n        getColumns() {\n            return [\n                {\n                    property: 'shopwareCategory',\n                    label: this.$tc('categories.shopware-tree-title'),\n                    rawData: true,\n                    height: 300\n                },\n                {\n                    property: 'salesChannelCategories',\n                    label: this.createColumnHeaderLabelForMarketplaceColumn(),\n                    rawData: true,\n                    height: '300px'\n                }\n            ]\n        },\n        createColumnHeaderLabelForMarketplaceColumn() {\n            return this.salesChannelType === 'amazon' ?\n                this.$tc('categories.amazon-marketplace-title') : this.$tc('categories.ebay-marketplace-title')\n        }\n    },\n});\n","import template from './bf-grid-column-tree-field.html.twig';\n\nconst {Component, Context} = Shopware;\nconst {EntityCollection} = Shopware.Data;\nconst {mapGetters, mapMutations} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-grid-column-tree-field', {\n    template,\n\n    inject: [\n        'BfCategoryService'\n    ],\n\n    props: {\n        marketplaceCategories: {\n            type: Object,\n            default() {\n                return {\n                    categories: [],\n                    categoryTree: []\n                }\n            }\n        },\n        marketplaceCategoriesIds: {\n            type: Array,\n            default() {\n                return []\n            }\n        },\n        swCategoryId: {\n            required: false\n        },\n        channelsId: {\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoadingMarketplaceCategories: true,\n            categories: [],\n            channelsId: null\n        }\n    },\n\n    methods: {\n        ...mapMutations([\n            'setCategoriesMappingStorage'\n        ]),\n        ...mapGetters('bfCategoryMapping', [\n            'getCategoriesMappingStorage'\n        ]),\n        loadComponent() {\n            this.loadMarketplaceCategoriesData();\n        },\n        loadMarketplaceCategoriesData() {\n            let categories = new EntityCollection('/bf-sales-channel', 'category', Context.api, null, this.categoryCollection),\n                marketplaceCategoriesIds = [];\n            if (this.marketplaceCategoriesIds.length <= 0) {\n                this.marketplaceCategories.categories = categories;\n                this.isLoadingMarketplaceCategories = false;\n                return;\n            }\n\n            this.marketplaceCategoriesIds.forEach(function (item){\n                marketplaceCategoriesIds.push({external_channels_categories_id: item});\n            });\n\n            this.BfCategoryService.findCategoriesById(\n                marketplaceCategoriesIds,\n                {key: 'channels_id', value: this.channelsId}\n            ).then(async (result) => {\n                await result.forEach((item) => {\n                    this.categories.push(item);\n                    this.getCategoryTree(item.parent_id).then(() => {\n                        if (this.categories.length > 0) {\n                            this.categories.forEach((category) => {\n                                this.marketplaceCategories.categoryTree.push(this.toString(category.id));\n                            });\n                        }\n                    });\n                });\n                result.forEach((item) => {\n                    item.id = this.toString(item.id);\n                    categories.add({\n                        data: item,\n                        id: this.toString(item.id),\n                        categoryId: item.external_channels_categories_id,\n                        name: item.name,\n                        translated: {\n                            name: item.name,\n                        },\n                        childCount: item.children,\n                        parentId: item.parent_id,\n                        afterCategoryId: item.parent_id,\n                        breadcrumb: item.breadCrumb.split(\" > \")\n                    });\n                });\n\n                this.marketplaceCategories.categories = categories;\n            });\n\n            this.isLoadingMarketplaceCategories = false;\n        },\n        /**\n         * @param categoryId\n         * @returns {Promise<void>}\n         */\n        async getCategoryTree(categoryId = null) {\n            if (categoryId != null) {\n                return await this.BfCategoryService.getCategoryById(categoryId).then(async (result) => {\n                    result.id = this.toString(result.id);\n                    this.categories.push({\n                        data: result,\n                        id: this.toString(result.id),\n                        categoryId: result.external_channels_categories_id,\n                        name: result.name,\n                        translated: {\n                            name: result.name,\n                        },\n                        childCount: result.children,\n                        parentId: this.toString(result.parent_id),\n                        afterCategoryId: this.toString(result.parent_id)\n                    });\n                    await this.getCategoryTree(result.parent_id);\n\n                    return Promise.resolve();\n                });\n            }\n        },\n        /**\n         * @param item\n         */\n        marketplaceCategorySelectionAdd(item) {\n            let categoriesMappingStorage = this.getCategoriesMappingStorage();\n\n            if (categoriesMappingStorage === null) {\n                return;\n            }\n\n            if (categoriesMappingStorage[this.swCategoryId].find(\n                marketplaceCategoryId => marketplaceCategoryId === item.categoryId) === undefined) {\n                categoriesMappingStorage[this.swCategoryId].push(item.categoryId);\n                this.$store.commit('bfCategoryMapping/setCategoriesMappingStorage', categoriesMappingStorage);\n            }\n        },\n        /**\n         * @param item\n         */\n        marketplaceCategoriesSelectionRemove(item) {\n            let categoriesMappingStorage = this.getCategoriesMappingStorage(), keyToRemove = null;\n            if (categoriesMappingStorage === null) {\n                return;\n            }\n\n            keyToRemove = categoriesMappingStorage[this.swCategoryId].indexOf(item.external_channels_categories_id);\n            if (keyToRemove !== -1) {\n                categoriesMappingStorage[this.swCategoryId].splice(keyToRemove, 1);\n                this.$store.commit('bfCategoryMapping/setCategoriesMappingStorage', categoriesMappingStorage);\n            }\n        },\n        toString(data) {\n            return data !== null ? data.toString() : null;\n        }\n    },\n\n    created() {\n        this.loadComponent();\n    }\n});\n","import template from './bf-sales-channel-category-mapping-tree-field.html.twig';\n\nimport './bf-sales-channel-category-mapping-tree-field.scss';\nimport '../bf-sales-channel-product-category-mapping/component';\n\nconst {Component} = Shopware;\nconst {sort} = Shopware.Utils;\n\nComponent.extend('bf-sales-channel-category-mapping-tree-field', 'sw-category-tree-field', {\n    template,\n    inject: [\n        'BfCategoryService'\n    ],\n    props: {\n        marketplaceCategories: {\n            type: Object,\n        },\n\n        parentProperty: {\n            type: String,\n            required: false,\n            default: 'parent_id'\n        }\n    },\n    data() {\n        return {\n            isLoading: false,\n            created: 0,\n            tagLimit: true,\n        }\n    },\n\n    watch: {\n        term: {\n            handler(newTerm){\n                if (newTerm.length === 0) {\n                    this.categories = [];\n                    this.getTreeItems();\n                }\n            }\n        }\n    },\n\n    computed: {\n        selectedCategoriesPathIds() {\n            return this.categoriesCollection.reduce((acc, item) => {\n                // add parent id to accumulator\n                return [...acc, ...this.marketplaceCategories.categoryTree];\n            }, []);\n        },\n        visibleTags() {\n            return this.tagLimit ? this.categoriesCollection.slice(0, 2) : this.categoriesCollection;\n        },\n    },\n    created() {\n        this.BfCategoryService.setSalesChannelId(this.$route.params.id);\n    },\n    methods: {\n        getTreeItems(parentId = null) {\n            this.BfCategoryService.getCategories(parentId).then((categories) => {\n                if (parentId === null) {\n                    categories.forEach((category) => {\n                        category.id = category.id.toString()\n                        this.categories.push({\n                            data: category,\n                            isDeleted: false,\n                            id: category.id,\n                            categoryId: category.external_channels_categories_id,\n                            translated: {name: category.name},\n                            childCount: category.children,\n                            parentId: category.parent_id,\n                            parentVersionId: category.parent_id,\n                            children: [],\n                            afterCategoryId: parentId,\n                            afterCategoryVersionId: parentId,\n                            name: category.name,\n                            breadCrumb: this.splitBreadCrumb(category.breadCrumb)\n                        })\n                    });\n                    this.isFetching = false;\n                    return Promise.resolve();\n                }\n\n                categories.forEach((category) => {\n                    this.categories.push({\n                        data: category,\n                        isDeleted: false,\n                        id: category.id.toString(),\n                        categoryId: category.external_channels_categories_id,\n                        translated: { name: category.name },\n                        childCount: category.children,\n                        parentId: category.parent_id.toString(),\n                        afterCategoryId: parentId.toString(),\n                        name: category.name,\n                        breadcrumb: this.splitBreadCrumb(category.breadCrumb)\n                    });\n\n                    this.isFetching = false;\n                    return Promise.resolve();\n                });\n            }).catch((error) => {\n                console.log(error);\n            });\n        },\n        searchCategories(term) {\n            return this.BfCategoryService.findCategoryByName(term).then((categories) => {\n                this.categories = [];\n\n                categories.forEach((category) => {\n                    category.id = category.id.toString();\n\n                    this.categories.push({\n                        data: category,\n                        id: category.id.toString(),\n                        categoryId: category.external_channels_categories_id,\n                        name: category.name,\n                        translated: {\n                            name: category.name,\n                        },\n                        childCount: category.children,\n                        parentId: category.parent_id,\n                        afterCategoryId: category.parent_id,\n                        breadcrumb: this.splitBreadCrumb(category.breadCrumb)\n                    });\n                });\n\n                return this.categories;\n            });\n        },\n        splitBreadCrumb(breadCrumb) {\n            return breadCrumb.split(\" > \")\n        }\n    }\n})\n","import template from './bf-sales-channel-product.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.override('bf-sales-channel-detail', {\n    name: 'bf-sales-channel-product',\n    template\n});\n","import template from './bf-sales-channel-detail-product-list.html.twig';\nimport './bf-sales-channel-detail-product-list.scss';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-detail-product-list', {\n    template,\n    inject: [\n        'BfSalesChannelService',\n        'bfContractService',\n        'repositoryFactory',\n        'bfProductApiService',\n        'filterFactory'\n    ],\n    metaInfo() {\n        return {\n            title: 'Products'\n        }\n    },\n    props: {\n        filterIsExpanded: {\n            type: Boolean\n        }\n    },\n    data() {\n        return {\n            products: null,\n            bfProductsErrors: [],\n            dangerZone: false,\n            warningZone: false,\n            greenZone: true,\n            currentContract: {},\n            searchWord: '',\n            shopProductData: [],\n            shopProductsErrors: [],\n            showProductsErrorsModal: false,\n            salesChannel: null,\n            marketplaceName: '',\n            marketplace: {},\n            sortBy: 'productNumber',\n            sortDirection: 'DESC',\n            naturalSorting: true,\n            isLoading: false,\n            fullPage: false,\n            channelLimit: 1000,\n            limit: 10,\n            license: null,\n            total: 0,\n            page: 1,\n            userAuthorised: false,\n            showLoginModal: false,\n            bfFilterCriteria: [],\n            defaultFilters: [\n                'active-filter',\n                'manufacturer-filter',\n            ],\n            storeKey: 'bf.product.list',\n            isExpanded: false,\n            activeFilterNumber: 0\n        }\n    },\n    watch: {\n        productCriteria: {\n            handler() {\n                this.getList();\n            },\n            deep: true\n        }\n    },\n    computed: {\n        columns() {\n            return this.getProductColumns();\n        },\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        listFilter() {\n            return this.filterFactory.create('product', {\n                'active-filter': {\n                    property: 'active',\n                    label: this.$tc('sw-product.filters.activeFilter.label'),\n                    placeholder: this.$tc('sw-product.filters.activeFilter.placeholder')\n                },\n                'manufacturer-filter': {\n                    property: 'manufacturer',\n                    label: this.$tc('sw-product.filters.manufacturerFilter.label'),\n                    placeholder: this.$tc('sw-product.filters.manufacturerFilter.placeholder')\n                },\n            });\n        },\n        productCriteria() {\n            const productCriteria = new Criteria(this.page, this.limit);\n\n            this.naturalSorting = this.sortBy === 'productNumber';\n\n            productCriteria.addFilter(Criteria.equals('product.parentId', null));\n            productCriteria.addFilter(Criteria.equals('product.visibilities.salesChannelId', this.$route.params.id));\n            productCriteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.naturalSorting));\n            productCriteria.addAssociation('cover');\n            productCriteria.addAssociation('visibilities');\n            productCriteria.addAssociation('categories');\n            productCriteria.addAssociation('manufacturer');\n\n            if (this.searchWord !== '') {\n                productCriteria.setTerm(this.searchWord);\n                productCriteria.page = 1;\n            }\n\n            this.bfFilterCriteria.forEach(filter => {\n                productCriteria.addFilter(filter);\n            });\n\n            return productCriteria;\n        }\n    },\n    created() {\n        this.bfProductApiService.setSalesChannelId(this.$route.params.id);\n\n        this.getList();\n        this.loadSalesChannel();\n    },\n    methods: {\n        closeLoginModal() {\n            this.showLoginModal = false;\n            this.getContractDetails();\n        },\n        loadMarketplace() {\n            this.isLoading = true;\n\n            this.BfSalesChannelService.getMarketplace()\n                .then((response) => {\n                    this.marketplace = response.data.data;\n\n                    this.isLoading = false;\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n                });\n        },\n        loadSalesChannel() {\n            this.isLoading = true;\n            this.salesChannelRepository\n                .get(this.$route.params.id, Context.api, this.getLoadSalesChannelCriteria())\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.marketplaceName = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n\n                    this.loadMarketplace();\n                    this.isLoading = false;\n                });\n        },\n        getContractDetails() {\n            return this.bfContractService.getContracts()\n                .then((contracts) => {\n                    if (contracts.current !== null) {\n                        this.currentContract = contracts.current;\n                        this.channelLimit = this.currentContract.items[0].limit;\n\n                        if (this.channelLimit > 0) {\n                            this.dangerZone = this.total > this.channelLimit * 0.9;\n                            this.warningZone = this.total > this.channelLimit * 0.6;\n                            this.greenZone = !this.dangerZone && !this.warningZone;\n                        }\n                    }\n\n                    this.userAuthorised = contracts.bookable !== undefined;\n\n                    return contracts;\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        handleSbpError(error) {\n            if (error.response === undefined) {\n                this.userAuthorised = false;\n            } else {\n                let errorResponse = error.response.data;\n\n                this.createNotificationError({\n                    title: errorResponse.title,\n                    message: errorResponse.description\n                });\n            }\n        },\n        getLoadSalesChannelCriteria() {\n            const criteria = new Criteria();\n\n            criteria.addAssociation('marketplaces');\n\n            return criteria;\n        },\n        async criteriaChanged(criteria) {\n            this.page = 1;\n            this.bfFilterCriteria = criteria;\n        },\n        async getList() {\n            this.isLoading = true;\n            this.productCriteria.page = this.page; // this part needed for pagination with search result\n\n            const criteria = await Shopware.Service('filterService').mergeWithStoredFilters(this.storeKey, this.productCriteria);\n            this.activeFilterNumber = criteria.filters.length - 1;\n\n            this.productRepository.search(this.productCriteria, Shopware.Context.api)\n                .then((products) => {\n                    if (products.getIds().length > 0) {\n                        this.bfProductApiService.getProductData(products.getIds()).then((response) => {\n                            this.getProductErrors(response).then((productErrors) => {\n                                if (response.success === true) {\n                                    response.data.forEach((shopProductDataItem) => {\n                                        shopProductDataItem.errors = [];\n\n                                        if (productErrors.success === true && productErrors.data.length > 0) {\n                                            productErrors.data.forEach((errors) => {\n                                                if (shopProductDataItem.productId === errors.shopsProductsData.externProductsId) {\n                                                    shopProductDataItem.errors.push(errors);\n                                                }\n                                            })\n                                        }\n\n                                        this.shopProductData[shopProductDataItem.productId] = shopProductDataItem;\n                                    });\n                                }\n\n                                this.total = products.total;\n                                this.products = products;\n\n                                this.getContractDetails();\n\n                                this.isLoading = false;\n                            });\n                        }).catch((error) => {\n                            console.log(error);\n                        })\n                    }\n                }).catch(() => {\n\n                })\n        },\n        paginateBf(args) {\n            this.page = args.page;\n            this.limit = args.limit;\n\n            this.getList();\n        },\n        openProductErrorsModal(productItem) {\n            this.shopProductsErrors = [];\n\n            if (this.shopProductData[productItem.id]) {\n                this.shopProductData[productItem.id].errors.forEach((error, item) => {\n                    let errorCode = error.shopsTypesErrorsData.shopsTypesErrorsCode,\n                        errorDescription = error.shopsProductsErrorsMessage;\n\n                    if (errorCode === null) {\n                        errorCode = 'N/A';\n                    }\n\n                    let parsedError = {\n                        code: errorCode,\n                        description: errorDescription\n                    };\n\n                    this.shopProductsErrors.push(parsedError);\n                });\n\n                let failedShopsFilter = this.shopProductData[productItem.id].failedShopsFilter;\n\n                if (failedShopsFilter !== undefined && failedShopsFilter.length > 0) {\n                    this.shopProductsErrors.push({\n                        code: 1,\n                        description: this.$tc('products.failedShopsFilter') + failedShopsFilter\n                    });\n                }\n\n                if (this.shopProductData[productItem.id].marketplaceInitialDate === '') {\n                    this.shopProductsErrors.push(\n                        this.getProductNotTransferredError(2, 'notTransferredProductToMarketplace')\n                    );\n                }\n            }\n\n            if (this.shopProductsErrors.length === 0) {\n                this.shopProductsErrors.push(\n                    this.getProductNotTransferredError(0, 'notTransferredProduct')\n                );\n            }\n\n            this.showProductsErrorsModal = true;\n        },\n        /**\n         * @param expanded {Boolean}\n         */\n        expand(expanded) {\n            this.isExpanded = expanded;\n        },\n        getErrorColumns() {\n            return [\n                {\n                    property: 'code',\n                    label: 'Code',\n                    primary: true,\n                    width: \"120px\"\n                }, {\n                    property: 'description',\n                    label: 'sw-property.list.columnDescription',\n                    width: 'auto'\n                }\n            ];\n        },\n        getProductErrors(response) {\n            let shopsProductsIds = [];\n            if (response.data.length > 0) {\n                response.data.forEach((data) => {\n                    shopsProductsIds.push(data.bfProductId);\n                })\n            }\n\n            return this.bfProductApiService.getProductErrors(shopsProductsIds);\n        },\n        getProductNotTransferredError(code, translationKey) {\n            return {\n                code: code,\n                description: this.$tc('products.' + translationKey)\n            };\n        },\n        getProductColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('products.table-headers.product-name'),\n                    allowResize: true,\n                    primary: true,\n                    width: '90px'\n                },\n                {\n                    property: 'productNumber',\n                    label: this.$tc('products.table-headers.product-number'),\n                    allowResize: true,\n                    align: 'left'\n                },\n                {\n                    property: 'active',\n                    label: this.$tc('products.table-headers.status'),\n                    allowResize: true,\n                    align: 'center'\n                },\n                {\n                    property: 'category',\n                    label: this.$tc('products.table-headers.category-name'),\n                    allowResize: true,\n                    sortable: false,\n                },\n                {\n                    property: 'online',\n                    label: this.$tc('products.table-headers.online-status'),\n                    allowResize: true,\n                    align: 'center',\n                    width: '30px',\n                    visible: true,\n                    sortable: false,\n                },\n                {\n                    property: 'error',\n                    label: this.$tc('products.table-headers.error'),\n                    allowResize: true,\n                    align: 'center',\n                    width: '45px',\n                    visible: true,\n                    sortable: false,\n                }\n            ];\n        },\n    }\n});\n","import template from './bf-sales-channel-product-modal.html.twig';\n\nconst {Component, Mixin} = Shopware;\nconst {EntityCollection} = Shopware.Data;\n\nComponent.register('bf-sales-channel-product-modal', {\n    template,\n    inject: [\n        'bfProductApiService',\n        'BfCategoryService',\n        'BfSalesChannelService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        product: {\n            type: Object,\n            required: true\n        },\n        currentContract: {\n            type: Object,\n            required: true\n        },\n        shopProductData: {\n            type: Array,\n            required: true\n        }\n    },\n    data() {\n        return {\n            allConditions: [],\n            allPolicies: {\n                shipping: [],\n                returns: [],\n                payments: []\n            },\n            isLoading: true,\n            salesChannelType: '',\n            activeTab: 'general',\n            categories: [],\n            formData: {\n                bfProductId: null,\n                conditionAttribute: null,\n                conditionNote: '',\n                ebayPlus: false,\n                ebayProposedPrice: {\n                    ebayBestOfferActive: false,\n                    ebayBestOfferAbsolute: 0,\n                    ebayBestOfferRelative: 0,\n                    ebayBestOfferAutoAccept: false,\n                    ebayBestOfferAbsoluteAutoAccept: 0,\n                    ebayBestOfferRelativeAutoAccept: 0\n                },\n                policies: {\n                    shipping: null,\n                    returns: null,\n                    payments: null\n                },\n                merchantShippingGroupName: '',\n                searchTerms: '',\n                platinumKeywords: '',\n                fbaActive: '',\n                category: ''\n            },\n            parentProduct: [],\n            productData: []\n        }\n    },\n    created() {\n        this.bfProductApiService.setSalesChannelId(this.$route.params.id);\n        this.componentCreated();\n    },\n    computed: {\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContract.name === ''\n                || this.currentContract.name === 'Starter';\n        }\n    },\n    methods: {\n        async componentCreated() {\n            const data = typeof this.shopProductData[this.product.id] !== 'undefined'\n                ? this.shopProductData[this.product.id]\n                : null;\n\n            if (data !== null) {\n                if (data.hasOwnProperty('ebayProposedPrice') && data.ebayProposedPrice !== null) {\n                    this.formData.ebayProposedPrice = data.ebayProposedPrice;\n\n                    for (let key in this.formData.ebayProposedPrice) {\n                        this.formData.ebayProposedPrice[key] = parseInt(this.formData.ebayProposedPrice[key]);\n                    }\n                }\n\n                this.formData.bfProductId = data.bfProductId;\n                this.formData.merchantShippingGroupName = data.hasOwnProperty('merchantShippingGroupName') && data.merchantShippingGroupName !== null ? data.merchantShippingGroupName : '';\n                this.formData.searchTerms = data.hasOwnProperty('searchTerms') && data.platinumKeywords !== null ? data.searchTerms : '';\n                this.formData.platinumKeywords = data.hasOwnProperty('platinumKeywords') && data.platinumKeywords !== null ? data.platinumKeywords.join(',') : '';\n                this.formData.ebayPlus = data.hasOwnProperty('ebayPlus') && data.ebayPlus !== null ? data.ebayPlus === 1 : false;\n                this.formData.conditionAttribute = data.hasOwnProperty('conditionId') && data.conditionId !== null ? data.conditionId : null;\n                this.formData.conditionNote = data.hasOwnProperty('conditionNote') && data.conditionNote !== null ? data.conditionNote : '';\n                this.formData.fbaActive = data.hasOwnProperty('fbaActive') && data.fbaActive !== null ? data.fbaActive === 1 : false;\n                this.formData.policies.shipping = data.hasOwnProperty('shippingPolicy') && data.shippingPolicy !== null ? data.shippingPolicy : null;\n                this.formData.policies.returns = data.hasOwnProperty('returnsPolicy') && data.returnsPolicy !== null ? data.returnsPolicy : null;\n                this.formData.policies.payments = data.hasOwnProperty('paymentsPolicy') && data.paymentsPolicy !== null ? data.paymentsPolicy : null;\n                this.formData.ebayProposedPrice.ebayBestOfferActive = this.formData.ebayProposedPrice.ebayBestOfferActive !== '' ? this.formData.ebayProposedPrice.ebayBestOfferActive === '1' : false;\n                this.formData.ebayProposedPrice.ebayBestOfferAutoAccept = this.formData.ebayProposedPrice.ebayBestOfferAutoAccept !== '' ? this.formData.ebayProposedPrice.ebayBestOfferAutoAccept === '1' : false;\n            }\n\n            this.isLoading = true;\n\n            await this.bfProductApiService.getSalesChannelType().then((result) => {\n                this.salesChannelType = result;\n                this.getAllConditions();\n            });\n\n            await this.getProductData();\n            this.loadPolicies();\n            this.isLoading = false;\n        },\n        changeFormInputValue(fieldName, event) {\n            this.formData.ebayProposedPrice[fieldName] = event;\n\n        },\n        async getProductData() {\n            await this.bfProductApiService.getProductData([this.product.id])\n                .then((product) => {\n                    if (product.success) {\n                        this.productData = product.data[0];\n\n                        if (this.productData.categories.length <= 0) {\n                            this.product.categories = new EntityCollection('/bf-sales-channel', 'category', Shopware.Context.api, null, this.categoryCollection);\n                            return;\n                        }\n                        this.BfCategoryService.findCategoriesById(this.productData.categories)\n                            .then(async (result) => {\n\n                                let channelsId = this.productData.categories[0].channels_id;\n                                this.product.categoryTree = [];\n\n                                await result.forEach((item) => {\n                                    if (item.channels_id === channelsId) {\n                                        this.categories.push(item);\n                                        this.getCategoryTree(item.parent_id).then((result) => {\n                                            if (this.categories.length > 0) {\n                                                this.categories.forEach((category) => {\n                                                    this.product.categoryTree.push(category.id.toString());\n                                                });\n                                            }\n                                        }).catch((error) => {\n                                            console.log(error);\n                                        });\n                                    }\n                                });\n\n                                const categories = new EntityCollection('/bf-sales-channel', 'category', Shopware.Context.api, null, this.categoryCollection);\n\n                                result.forEach((item) => {\n                                    if (item.channels_id === channelsId) {\n                                        item.id = item.id.toString();\n\n                                        categories.add({\n                                            data: item,\n                                            id: item.id.toString(),\n                                            categoryId: item.external_channels_categories_id,\n                                            name: item.name,\n                                            translated: {\n                                                name: item.name,\n                                            },\n                                            childCount: item.children,\n                                            parentId: item.parent_id,\n                                            afterCategoryId: item.parent_id,\n                                        });\n                                    }\n                                });\n\n                                this.product.categories = categories;\n                            }).catch((error) => {\n                            console.log(error);\n                        })\n                    }\n                }).catch((error) => {\n                console.log(error);\n            });\n        },\n        async getCategoryTree(categoryId = null) {\n            if (categoryId != null) {\n                return await this.BfCategoryService.getCategoryById(categoryId)\n                    .then(async (result) => {\n                        result.id = result.id === null ? result.id : result.id.toString();\n\n                        this.categories.push({\n                            data: result,\n                            id: result.id,\n                            categoryId: result.external_channels_categories_id,\n                            name: result.name,\n                            translated: {\n                                name: result.name,\n                            },\n                            childCount: result.children,\n                            parentId: result.parent_id=== null ? result.parent_id : result.parent_id.toString(),\n                            afterCategoryId: result.parent_id === null ? result.parent_id : result.parent_id.toString()\n                        });\n                        await this.getCategoryTree(result.parent_id);\n\n                        return Promise.resolve();\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    })\n            }\n        },\n        saveData() {\n            const data = typeof this.shopProductData[this.product.id] !== 'undefined'\n                ? this.shopProductData[this.product.id]\n                : null;\n\n            if (data !== null) {\n                this.bfProductApiService.saveProductData(\n                    data.bfProductId,\n                    {\n                        merchantShippingGroupName: this.formData.merchantShippingGroupName,\n                        searchTerms: this.formData.searchTerms,\n                        platinumKeywords: this.formData.platinumKeywords !== null ? this.formData.platinumKeywords.split(', ') : [],\n                        proposedPrice: {\n                            EBAY_BEST_OFFER_ACTIVE: this.formData.ebayProposedPrice.ebayBestOfferActive ? 1 : 0,\n                            EBAY_BEST_OFFER_ABSOLUTE: this.formData.ebayProposedPrice.ebayBestOfferAbsolute,\n                            EBAY_BEST_OFFER_RELATIVE: this.formData.ebayProposedPrice.ebayBestOfferRelative,\n                            EBAY_BEST_OFFER_AUTO_ACCEPT: this.formData.ebayProposedPrice.ebayBestOfferAutoAccept ? 1 : 0,\n                            EBAY_BEST_OFFER_ABSOLUTE_AUTO_ACCEPT: this.formData.ebayProposedPrice.ebayBestOfferAbsoluteAutoAccept,\n                            EBAY_BEST_OFFER_RELATIVE_AUTO_ACCEPT: this.formData.ebayProposedPrice.ebayBestOfferRelativeAutoAccept,\n                        },\n                        ebayPlus: this.formData.ebayPlus ? 1 : 0,\n                        conditionAttribute: this.formData.conditionAttribute,\n                        conditionNote: this.formData.conditionNote,\n                        shippingPolicy: this.formData.policies.shipping,\n                        returnsPolicy: this.formData.policies.returns,\n                        paymentsPolicy: this.formData.policies.payments,\n                        fbaActive: this.formData.fbaActive ? 1 : 0,\n                        shopsCategories: [...this.product.categories.map(i => i.categoryId)]\n                    }\n                ).then((response) => {\n                    this.isLoading = false;\n\n                    let data = response.data;\n\n                    data.errors = this.shopProductData[this.product.id].errors;\n\n                    this.shopProductData[this.product.id] = data;\n\n                    return this.createNotificationSuccess({\n                        title: this.$tc('products.edit.notification.title.success'),\n                        message: this.$tc('products.edit.notification.message.success')\n                    });\n                }).catch(() => {\n                    this.isLoading = false;\n\n                    this.$emit('modal-close');\n\n                    return this.createNotificationError({\n                        title: this.$tc('products.edit.notification.title.error'),\n                        message: this.$tc('products.edit.notification.message.error')\n                    });\n                });\n            } else {\n                this.$emit('modal-close');\n\n                this.createNotificationError({\n                    title: this.$tc('products.edit.notification.title.error'),\n                    message: this.$tc('products.edit.notification.message.error')\n                })\n            }\n        },\n        getAllConditions() {\n            let defaultConditionValue = '1000';\n\n            if (this.salesChannelType === 'amazon') {\n                this.getAllAmazonConditions();\n                defaultConditionValue = 'New';\n            } else {\n                this.getAllEbayConditions();\n            }\n\n            this.formData.conditionAttribute = this.formData.conditionAttribute === null\n                ? defaultConditionValue\n                : this.formData.conditionAttribute;\n        },\n        getAllEbayConditions() {\n            this.allConditions = [\n                {\n                    value: '1000',\n                    label: this.$tc('products.edit.conditions.ebay.new')\n                },\n                {\n                    value: '2750',\n                    label: this.$tc('products.edit.conditions.ebay.asNew')\n                },\n                {\n                    value: '3000',\n                    label: this.$tc('products.edit.conditions.ebay.used')\n                },\n                {\n                    value: '4000',\n                    label: this.$tc('products.edit.conditions.ebay.veryGood')\n                },\n                {\n                    value: '5000',\n                    label: this.$tc('products.edit.conditions.ebay.good')\n                },\n                {\n                    value: '6000',\n                    label: this.$tc('products.edit.conditions.ebay.acceptable')\n                },\n            ];\n        },\n        getAllAmazonConditions() {\n            this.allConditions = [\n                {\n                    value: 'New',\n                    label: this.$tc('products.edit.conditions.amazon.new')\n                },\n                {\n                    value: 'UsedLikeNew',\n                    label: this.$tc('products.edit.conditions.amazon.usedLikeNew')\n                },\n                {\n                    value: 'UsedVeryGood',\n                    label: this.$tc('products.edit.conditions.amazon.usedVeryGood')\n                },\n                {\n                    value: 'UsedGood',\n                    label: this.$tc('products.edit.conditions.amazon.usedGood')\n                },\n                {\n                    value: 'UsedAcceptable',\n                    label: this.$tc('products.edit.conditions.amazon.usedAcceptable')\n                },\n                {\n                    value: 'CollectibleLikeNew',\n                    label: this.$tc('products.edit.conditions.amazon.collectibleLikeNew')\n                },\n                {\n                    value: 'CollectibleVeryGood',\n                    label: this.$tc('products.edit.conditions.amazon.collectibleVeryGood')\n                },\n                {\n                    value: 'CollectibleGood',\n                    label: this.$tc('products.edit.conditions.amazon.collectibleGood')\n                },\n                {\n                    value: 'CollectibleAcceptable',\n                    label: this.$tc('products.edit.conditions.amazon.collectibleAcceptable')\n                },\n                {\n                    value: 'Refurbished',\n                    label: this.$tc('products.edit.conditions.amazon.refurbished')\n                },\n                {\n                    value: 'Club',\n                    label: this.$tc('products.edit.conditions.amazon.club')\n                }\n            ];\n        },\n        loadPolicies() {\n            this.getShippingPolicies();\n            this.getPaymentPolicies();\n            this.getReturnPolicies();\n        },\n        async getShippingPolicies() {\n            await this.BfSalesChannelService.getEbayPolicy('shipping').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.allPolicies.shipping = this.buildPolicies(response.data.data);\n                    }\n                }\n            });\n        },\n        async getPaymentPolicies() {\n            await this.BfSalesChannelService.getEbayPolicy('payment').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.allPolicies.payments = this.buildPolicies(response.data.data);\n                    }\n                }\n            });\n        },\n        async getReturnPolicies() {\n            await this.BfSalesChannelService.getEbayPolicy('return').then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    if (response.data.data.length > 0) {\n                        this.allPolicies.returns = this.buildPolicies(response.data.data);\n                    }\n                }\n            });\n        },\n        buildPolicies(data) {\n            let policies = [{label: this.$tc('products.edit.noInformation'), value: null}];\n\n            data.forEach((item) => {\n                policies.push({label: item.profileName, value: item.profileId})\n            });\n\n            return policies;\n        }\n    }\n});\n","import template from './bf-sales-channel-amazon-asin-management.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('bf-sales-channel-amazon-asin-management', {\n    template,\n\n    inject: [\n        'bfProductApiService',\n        'BfAmazonService'\n    ],\n\n    props: {\n        shopProductData: {\n            type: Array,\n            required: true\n        },\n        product: {\n            type: Object,\n            required: true\n        },\n    },\n\n    data () {\n        return {\n            dataSource: [],\n            total: 0,\n            page: 1,\n            limit: 5\n        }\n    },\n\n    computed: {\n        getColumns () {\n            return this.columns ();\n        }\n    },\n\n    created() {\n        this.loadShopsProductsVariationsData ();\n    },\n\n    methods: {\n        loadShopsProductsVariationsData () {\n            const me = this;\n            this.bfProductApiService.loadProductVariationData(this.shopProductData[this.product.id].bfProductId, this.limit, this.page).then((response) => {\n                if (response.success) {\n                    this.total  = response.data.totalCount\n                    response.data.data.forEach(function (item) {\n                        let hasAsin = false;\n                        if (item.hasOwnProperty('shopsProductsVariationsOffers') && item.shopsProductsVariationsOffers.length > 0) {\n                            hasAsin = item.shopsProductsVariationsOffers[0].hasOwnProperty('externShopsProductsVariationsId');\n                        }\n\n                        me.dataSource.push({\n                            shopsProductsVariationsId: item.bfShopsProductsVariationsId,\n                            productNumber: item.productsVariationsItemNumber,\n                            externShopsProductsVariationsId: hasAsin ? item.shopsProductsVariationsOffers[0].externShopsProductsVariationsId : '',\n                            shopsProductsVariationsOffersId: hasAsin ? item.shopsProductsVariationsOffers[0].shopsProductsVariationsOffersId : null\n                        })\n                    });\n                }\n            })\n        },\n        /**\n         * @param item {object}\n         */\n        async inlineEditSave (item) {\n            await this.BfAmazonService.saveAmazonAsin(item).then((response) => {\n                if (response.success) {\n                    this.dataSource.forEach(function (item) {\n                        if (item.shopsProductsVariationsId === response.data.shopsProductsVariationsId) {\n                            item.shopsProductsVariationsOffersId = response.data.shopsProductsVariationsOffersId\n                        }\n                    })\n                }\n            });\n        },\n        /**\n         * @param paginationData {object}\n         */\n        paginate (paginationData) {\n            this.page = paginationData.page;\n            this.limit = paginationData.limit;\n            this.dataSource = [];\n            this.loadShopsProductsVariationsData();\n        },\n        columns () {\n            return [\n                {\n                    property: \"productNumber\",\n                    label: this.$tc('products.table-headers.product-number'),\n                    allowResize: false,\n                    align: 'left'\n                },\n                {\n                    property: 'externShopsProductsVariationsId',\n                    label: this.$tc('products.table-headers.asin'),\n                    allowResize: false,\n                    allowInlineEdit: true,\n                    inlineEdit: 'string'\n                }\n            ]\n        }\n    }\n})\n","import template from './bf-sales-channel-product-visibility-select.html.twig';\n\nconst {Component, Mixin, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.override('sw-product-visibility-select', {\n    template,\n    inject: [\n        'bfSystemApiService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product')\n        }\n    },\n    data() {\n        return {\n            skuLimit: null\n        }\n    },\n    created() {\n        this.criteria.addAssociation('type');\n        this.getSkuLimit();\n    },\n    methods: {\n        getSkuLimit() {\n            return this.bfSystemApiService\n                .getSkuLimit()\n                .then((response) => {\n                    if (response.success) {\n                        return this.skuLimit = response.data.skuLimit\n                    }\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n        },\n        addItem(item) {\n            if (item.type.translated.manufacturer === 'brickfox GmbH') {\n                if (this.isSelected(item)) {\n                    const associationEntity = this.currentCollection.find(entity => {\n                        return entity.salesChannelId === item.id;\n                    });\n                    this.remove(associationEntity);\n                    return;\n                }\n\n                const criteria = new Criteria(1, 1);\n                criteria.addFilter(\n                    Criteria.equals('product.visibilities.salesChannelId', item.id)\n                );\n                criteria.addAssociation('visibilities');\n\n                this.productRepository\n                    .search(criteria, Context.api)\n                    .then((products) => {\n                        if(products.total >= this.skuLimit) {\n                            return this.createNotificationError({\n                                title: 'Error',\n                                message: 'SKU Limit for this channel was reached'\n                            });\n                        }\n\n                        this.$super('addItem', item);\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n                return;\n            }\n\n            this.$super('addItem', item);\n        },\n    }\n});","import template from './bf-sales-channel-product-category-mapping.html.twig';\n\nimport './component';\n\nconst {Component} = Shopware;\nconst {EntityCollection} = Shopware.Data;\nconst {debounce, sort} = Shopware.Utils;\n\nComponent.extend('bf-sales-channel-product-category-mapping', 'sw-category-tree-field', {\n    template,\n    inject: [\n        'BfCategoryService'\n    ],\n    props: {\n        product: {\n            type: Object,\n        },\n\n        parentProperty: {\n            type: String,\n            required: false,\n            default: 'parent_id'\n        }\n    },\n    data() {\n        return {\n            isLoading: false,\n            created: 0\n        }\n    },\n    computed: {\n        selectedCategoriesPathIds() {\n            return this.categoriesCollection.reduce((acc, item) => {\n                // add parent id to accumulator\n                return [...acc, ...this.product.categoryTree];\n            }, []);\n        }\n    },\n    methods: {\n        getTreeItems(parentId = null) {\n            this.BfCategoryService.getCategories(parentId).then((categories) => {\n                if (parentId === null) {\n                    categories.forEach((category) => {\n                        category.id = category.id.toString()\n                        this.categories.push({\n                            data: category,\n                            // isDeleted: false,\n                            id: category.id.toString(),\n                            categoryId: category.external_channels_categories_id,\n                            translated: {name: category.name},\n                            childCount: category.children,\n                            parentId: category.parent_id,\n                            parentVersionId: category.parent_id,\n                            children: [],\n                            afterCategoryId: parentId,\n                            afterCategoryVersionId: parentId,\n                            name: category.name,\n                        })\n                    });\n                    this.isFetching = false;\n                    return Promise.resolve();\n                }\n\n                categories.forEach((category) => {\n                    this.categories.push({\n                        data: category,\n                        isDeleted: false,\n                        id: category.id.toString(),\n                        categoryId: category.external_channels_categories_id,\n                        translated: { name: category.name },\n                        childCount: category.children,\n                        parentId: category.parent_id === null ? category.parent_id : category.parent_id.toString(),\n                        afterCategoryId: parentId === null ? parentId : parentId.toString(),\n                        name: category.name\n                    });\n\n                    this.isFetching = false;\n                    return Promise.resolve();\n                });\n            }).catch((error) => {\n                console.log(error);\n            });\n        },\n        searchCategories(term) {\n            return this.BfCategoryService.findCategoryByName(term).then((categories) => {\n                this.categories = [];\n\n                categories.forEach((category) => {\n                    category.id = category.id.toString();\n\n                    this.categories.push({\n                        data: category,\n                        id: category.id.toString(),\n                        categoryId: category.external_channels_categories_id,\n                        name: category.name,\n                        translated: {\n                            name: category.breadCrumb,\n                        },\n                        childCount: category.children,\n                        parentId: category.parent_id,\n                        afterCategoryId: category.parent_id\n                    });\n                });\n\n                return this.categories;\n            });\n        },\n    },\n    created() {\n        this.BfCategoryService.setSalesChannelId(this.$route.params.id);\n    }\n})\n","import template from './bf-filter-panel.html.twig';\nimport './bf-filter-panel.scss';\nconst {Component} = Shopware;\n\n\nComponent.extend('bf-filter-panel', 'sw-filter-panel', {\n    template,\n});\n","import template from './bf-sales-channel-property-mapping-grid.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.extend('bf-sales-channel-property-mapping-grid', 'sw-data-grid', {\n    template\n});\n","import template from './bf-sales-channel-property-mapping-list.html.twig';\n\nconst {Component, State} = Shopware;\n\nComponent.extend('bf-sales-channel-property-mapping-list', 'sw-data-grid', {\n    template,\n    props: {\n        attributeMappingData: {\n            type: Array,\n            required: true\n        }\n    },\n    data() {\n        return {\n            showPropertyMappingModal: false,\n            selectedProperty: null\n        };\n    },\n    computed: {\n        currentLocale() {\n            return State.get('session').currentLocale;\n        }\n    },\n    methods: {\n        getBfAttributeMappingData() {\n            for (const attributeMapping of this.attributeMappingData) {\n                if (attributeMapping.internalValue !== null && attributeMapping.internalValue.toLowerCase() === this.selectedProperty.productsAttributesCode.toLowerCase()) {\n                    return attributeMapping;\n                }\n            }\n\n            return null;\n        },\n        getExternalName(item) {\n            for (const attributeMapping of this.attributeMappingData) {\n                if (attributeMapping.internalValue !== null && attributeMapping.internalValue.toLowerCase() === item.productsAttributesCode.toLowerCase()) {\n                    return attributeMapping.externalValue;\n                }\n            }\n\n            return '';\n        },\n        onEditPropertyMappingClick(item) {\n            this.showPropertyMappingModal = true;\n            this.selectedProperty = item;\n        }\n    }\n});\n","import template from './bf-sales-channel-property-mapping-modal.html.twig';\n\nconst {Component, Mixin} = Shopware;\n\nComponent.register('bf-sales-channel-property-mapping-modal', {\n    template,\n    inject: [\n        'bfPropertyService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        title: {\n            type: String,\n            required: true\n        },\n        property: {\n            type: Object,\n            required: true\n        },\n        bfAttributeMappingData: {\n            type: Object\n        }\n    },\n    data() {\n        return {\n            isLoading: false,\n            externalName: null,\n            searchString: '',\n            attributeData: [],\n            columns: [\n                {\n                    property: 'id',\n                    visible: false,\n                    primary: true\n                },\n                {\n                    property: 'name',\n                    label: 'propertyMapping.columns.name'\n                }\n            ]\n        }\n    },\n    created() {\n        this.componentCreated();\n    },\n    methods: {\n        componentCreated() {\n            this.loadAttributeData();\n        },\n        getBfMappingId() {\n            if (this.bfAttributeMappingData !== null) {\n                return this.bfAttributeMappingData.bfMappingId;\n            }\n\n            return null;\n        },\n        saveData() {\n            if (this.$refs['attributeGrid'].selectionCount > 1) {\n                this.createNotificationWarning({\n                    title: this.$tc('propertyMapping.notifications.title.warning'),\n                    message: this.$tc('propertyMapping.notifications.message.warningTooManySelected')\n                });\n\n                return;\n            }\n\n            if (this.$refs['attributeGrid'].selectionCount === 0) {\n                this.createNotificationWarning({\n                    title: this.$tc('propertyMapping.notifications.title.warning'),\n                    message: this.$tc('propertyMapping.notifications.message.warningNoSelection')\n                });\n\n                return;\n            }\n\n            this.bfPropertyService.saveAttributeMappingData({\n                bfMappingId: this.getBfMappingId(),\n                attributeId: this.property.productsAttributesCode,\n                externalValue: Object.values(this.$refs['attributeGrid'].selection)[0].name\n            }).then(() => {\n                this.$emit('modal-close');\n\n                this.createNotificationSuccess({\n                    title: this.$tc('propertyMapping.notifications.title.success'),\n                    message: this.$tc('propertyMapping.notifications.message.success')\n                });\n            }).catch(() => {\n                this.$emit('modal-close');\n\n                this.createNotificationError({\n                    title: this.$tc('propertyMapping.notifications.title.error'),\n                    message: this.$tc('propertyMapping.notifications.message.error')\n                });\n            });\n        },\n        loadAttributeData() {\n            this.isLoading = true;\n\n            this.bfPropertyService.loadAttributeData(this.searchString).then((response) => {\n                this.attributeData = this.getUniqueValues(response.data);\n\n                this.isLoading = false;\n            });\n        },\n        getUniqueValues(data) {\n            return data.filter((value, index, allElements) => {\n                return allElements.findIndex(element => (element.id === value.id)) === index;\n            });\n        },\n        sortList() {\n            // ToDo: add logic\n        }\n    }\n});\n","import template from './bf-sales-channel-variation-properties-grid.html.twig';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-variation-properties-grid', {\n    template,\n    inject: [\n        'bfPropertyService',\n        'BfSalesChannelService',\n        'repositoryFactory',\n    ],\n    data() {\n        return {\n            variationProperties: [],\n            gridColumns: [],\n            showActions: true,\n            showEmptyStateVariationProperties: false,\n            isLoading: false,\n            total: 0,\n            limit: 5,\n            page: 1\n        }\n    },\n\n    computed: {\n        propertyRepository() {\n            return this.repositoryFactory.create('property_group');\n        },\n        getColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('propertyMapping.variationProperties.swLabel'),\n                    dataIndex: 'name'\n                },\n                {\n                    property: 'selectedVariation',\n                    dataIndex: 'selectedVariation',\n                    label: this.$tc('propertyMapping.variationProperties.amazonLabel'),\n                    inlineEdit: 'string'\n                },\n                {\n                    property: 'bfMappingId',\n                    dataIndex: 'bfMappingId',\n                    label: '',\n                    visible: false\n                }\n            ];\n        }\n\n    },\n    created() {\n        this.loadComponent();\n    },\n    methods: {\n        async loadComponent() {\n            this.isLoading = true;\n            this.bfPropertyService.setSalesChannelId(this.$route.params.id)\n            await this.getVariationProperties()\n\n            if (this.variationProperties.length === 0) {\n                this.showEmptyState = true;\n            }\n            this.isLoading = false;\n        },\n        async getVariationProperties() {\n            let me = this,\n                variationPropertiesIds = [],\n                mappedVariationsProperties = [];\n\n            await this.bfPropertyService.getVariationsDiffsOptionsMapping(await this.bfPropertyService.getSalesChannelType()).then((response) => {\n                if (response.success) {\n                    response.data.forEach(function (item) {\n                        mappedVariationsProperties.push(item);\n                    })\n                }\n            });\n\n            await this.bfPropertyService.getVariationProperties(this.page, this.limit)\n                .then(async (response) => {\n                    if (response.success) {\n                        this.total = response.data.totalCount;\n                        response.data.data.forEach(function (item) {\n                            variationPropertiesIds.push([item.externProductsVariationsDiffsOptionsId]);\n                        });\n\n                        if (variationPropertiesIds.length > 0) {\n                            let criteria = new Criteria();\n                            criteria.addFilter(Criteria.equalsAny('id', variationPropertiesIds));\n\n                            await this.propertyRepository.search(criteria, Context.api).then((entityCollection) => {\n                                if (entityCollection.length > 0) {\n                                    entityCollection.forEach(function (entity) {\n                                        let mappedInformation = me.getMappedInformation(mappedVariationsProperties, entity);\n                                        me.variationProperties.push({\n                                            id: entity.id,\n                                            name: entity.translated.name,\n                                            selectedVariation: mappedInformation.selectedVariation,\n                                            bfMappingId: mappedInformation.bfMappingId\n                                        });\n                                    });\n                                }\n                            });\n                        }\n                    }\n                }).catch((error) => {\n                    console.log(error);\n                });\n        },\n        /**\n         *\n         * @param mappedVariationsProperties\n         * @param entity\n         * @returns {{selectedVariation: string, bfMappingId: string}}\n         */\n        getMappedInformation(mappedVariationsProperties = Array, entity = {}) {\n            let mappedInformation = {selectedVariation: '', bfMappingId: ''};\n\n            if (mappedVariationsProperties.length > 0) {\n                for (let i = 0; i < mappedVariationsProperties.length; i++) {\n                    if (mappedVariationsProperties[i].internalValue === entity.id) {\n                        mappedInformation.selectedVariation = mappedVariationsProperties[i].externalValue;\n                        mappedInformation.bfMappingId = mappedVariationsProperties[i].bfMappingId;\n                        break;\n                    }\n                }\n            }\n\n            return mappedInformation;\n        },\n        async onInlineEditSave(item) {\n            if (item.bfMappingId.length === 0){\n                item.bfMappingId = null;\n            }\n\n            this.bfPropertyService.storeVariationsDiffsOptionsMapping(\n                await this.BfSalesChannelService.getSalesChannelType(),\n                {\n                    bfMappingId: item.bfMappingId,\n                    propertyId: item.id,\n                    externalValue: item.selectedVariation\n                }\n            )\n        },\n        pageChange(params) {\n            this.page = params.page;\n            this.limit = params.limit;\n            this.variationProperties = [];\n            this.loadComponent();\n        },\n        onDbClickCell(item) {\n        },\n        onEditCellValue(item) {\n            this.$root.$emit('onDbClickCell', item.id);\n        }\n    }\n})\n","import template from './bf-sales-channel-detail-custom-fields.html.twig';\nimport './bf-sales-channel-detail-custom-fields.scss';\n\nconst { Component, Mixin} = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('bf-sales-channel-detail-custom-fields', {\n    template,\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing')\n    ],\n    inject: ['repositoryFactory', 'bfPropertyService'],\n    data() {\n        return {\n            propertyGroup: null,\n            sortBy: 'name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n            transferredCustomFields: []\n        };\n    },\n    created() {\n        this.getTransferredCustomFields();\n    },\n    computed: {\n        customFieldsRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.useNaturalSorting));\n            criteria.addFilter(Criteria.equals('customFieldSet.relations.entityName', 'product'));\n            criteria.addFilter(Criteria.equals('active', 1));\n            criteria.addAssociation('customFieldSet');\n\n            return criteria;\n        },\n\n        useNaturalSorting() {\n            return this.sortBy === 'property.name';\n        }\n    },\n    methods: {\n        getList() {\n            this.isLoading = true;\n\n            return this.customFieldsRepository.search(this.defaultCriteria, Shopware.Context.api).then((items) => {\n                this.propertyGroup = items;\n                this.isLoading = false;\n\n                return items;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n        getPropertyColumns() {\n            return [{\n                property: 'name',\n                label: 'bf-custom-fields-transfer.list.columnName',\n                routerLink: 'sw.property.detail',\n                inlineEdit: 'string',\n                allowResize: false,\n                primary: true\n            }, {\n                property: 'transfer',\n                label: 'bf-custom-fields-transfer.list.columnTransfer',\n                width: '50px',\n                visible: true,\n                sortable: false,\n                allowResize: false\n            }];\n        },\n        checked(item) {\n            for (let i = 0; i < this.transferredCustomFields.length; i++) {\n                if (this.createPropertyUniqName(item.name, item.id) === this.transferredCustomFields[i]) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        toggleItemCheck($event, item) {\n            let uniqueName = this.createPropertyUniqName(item.name, item.id);\n\n            if ($event) {\n                this.transferredCustomFields.push(uniqueName);\n            } else {\n                this.transferredCustomFields.splice(this.transferredCustomFields.indexOf(uniqueName), 1);\n            }\n\n            localStorage.setItem('bfTransferredCustomFields', this.transferredCustomFields)\n        },\n\n        getTransferredCustomFields() {\n            this.bfPropertyService.loadPropertyData()\n                .then((response) => {\n                    response.data.forEach(configuration => {\n                        if (\n                            configuration.configurationKey === 'CUSTOM_FIELDS_TO_IMPORT_AS_ATTRIBUTES'\n                            && configuration.configurationValue !== ''\n                        ) {\n                            this.transferredCustomFields = configuration.configurationValue.split(',');\n                        }\n                    });\n\n                    localStorage.setItem('bfTransferredCustomFields', this.transferredCustomFields);\n\n                    this.isLoading = false;\n                }).catch((error) => {\n                this.isLoading = false;\n\n                // ToDo: error handling\n            });\n        },\n\n        createPropertyUniqName(name, id) {\n            return name + ' ##' + id + '##';\n        },\n    }\n});\n","import template from './bf-sales-channel-detail-property-transfer.html.twig';\nimport './bf-sales-channel-detail-property-transfer.scss';\n\nconst { Component, Mixin} = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('bf-sales-channel-detail-property-transfer', {\n    template,\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing')\n    ],\n    inject: ['repositoryFactory', 'bfPropertyService'],\n    data() {\n        return {\n            propertyGroup: null,\n            sortBy: 'name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n            transferredProperties: []\n        };\n    },\n    created() {\n        this.getTransferredProperties();\n    },\n    computed: {\n        propertyRepository() {\n            return this.repositoryFactory.create('property_group');\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.useNaturalSorting));\n\n            return criteria;\n        },\n\n        useNaturalSorting() {\n            return this.sortBy === 'property.name';\n        }\n    },\n    methods: {\n        getList() {\n            this.isLoading = true;\n\n            return this.propertyRepository.search(this.defaultCriteria, Shopware.Context.api).then((items) => {\n                this.propertyGroup = items;\n                this.isLoading = false;\n\n                return items;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n        getPropertyColumns() {\n            return [{\n                property: 'name',\n                label: 'bf-property-transfer.list.columnName',\n                routerLink: 'sw.property.detail',\n                inlineEdit: 'string',\n                allowResize: false,\n                primary: true\n            }, {\n                property: 'transfer',\n                label: 'bf-property-transfer.list.columnTransfer',\n                width: '50px',\n                visible: true,\n                sortable: false,\n                allowResize: false\n            }];\n        },\n        checked(item) {\n            for (let i = 0; i < this.transferredProperties.length; i++) {\n                if (this.transferredProperties[i].indexOf(item.id) > 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        toggleItemCheck($event, item) {\n            let uniqueName = this.createPropertyUniqName(item.name, item.id);\n\n            if ($event) {\n                this.transferredProperties.push(uniqueName);\n            } else {\n                this.transferredProperties.splice(this.transferredProperties.indexOf(uniqueName), 1);\n            }\n\n            localStorage.setItem('bfTransferredProperties', this.transferredProperties)\n        },\n\n        getTransferredProperties() {\n            this.bfPropertyService.loadPropertyData()\n                .then((response) => {\n                    response.data.forEach(configuration => {\n                        if (\n                            configuration.configurationKey === 'PROPERTIES_TO_IMPORT_AS_ATTRIBUTES'\n                            && configuration.configurationValue !== ''\n                        ) {\n                            this.transferredProperties = configuration.configurationValue.split(',');\n                        }\n                    });\n\n                    localStorage.setItem('bfTransferredProperties', this.transferredProperties);\n\n                    this.isLoading = false;\n                }).catch((error) => {\n                this.isLoading = false;\n                console.log(error);\n                // ToDo: error handling\n            });\n        },\n\n        createPropertyUniqName(name, id) {\n            return name + ' ##' + id + '##';\n        },\n    }\n});\n\n","import template from './bf-sales-channel-shopware-segment-dropdown.html.twig';\nimport './bf-sales-channel-shopware-segment-dropdown.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('bf-sales-channel-amazon-segment-dropdown', {\n    template,\n    inject: [\n        'BfCategoryService'\n    ],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            required: ''\n        }\n    },\n    data() {\n        return {\n            allProductsSegments: [],\n            productsTypes: [],\n            selectedSegment: '',\n            selectedType: '',\n            productSegmentAndType: null\n        }\n    },\n    created() {\n        this.getAllSegments();\n\n        if (this.selectedSegment) {\n            this.getSegmentTypes()\n        }\n    },\n    computed: {\n        currentCategorySegment() {\n            return this.prepareCategorySegmentSaveObject();\n        },\n        isDisabled() {\n            return !this.clientExists\n                || this.clientInProgress\n                || this.currentContractName === '';\n        }\n    },\n    methods: {\n        prepareCategorySegmentSaveObject() {\n            if (!this.selectedSegment) {\n                this.selectedSegment = '-';\n            }\n\n            if (!this.selectedType) {\n                this.selectedType = '-';\n            }\n\n            return {\n                productSegmentsName: this.selectedSegment,\n                productTypesName: this.selectedType\n            }\n        },\n        setSegment(segmentAndType, segmentKey, productTypeKey) {\n            this.productSegmentAndType = segmentAndType;\n            this.selectedSegment = segmentAndType[segmentKey];\n            this.selectedType = segmentAndType[productTypeKey];\n            this.feelSegmentTypesField();\n        },\n        feelSegmentTypesField() {\n            if (this.selectedSegment && this.selectedSegment !== '-') {\n                this.getSegmentTypes();\n            } else {\n                this.productsTypes = [];\n            }\n        },\n        getSegmentTypes() {\n            this.$emit('onStartLoading');\n\n            this.BfCategoryService.getSegmentsTypes(this.selectedSegment)\n                .then((types) => {\n                    this.productsTypes = [];\n\n                    types.forEach((item, key) => {\n                        this.productsTypes.push({\n                            value: item.productTypesName,\n                            label: item.productTypesName\n                        });\n                    });\n\n                    this.$emit('onStopLoading');\n                })\n                .catch((typeError) => {\n                    console.log(typeError);\n\n                    this.$emit('onStopLoading');\n                });\n        },\n        onSelectSegment() {\n            this.feelSegmentTypesField();\n            this.$emit('onSetCurrentSegment');\n        },\n        onSelectType(item) {\n            this.$emit('onSetCurrentSegment');\n        },\n        getAllSegments() {\n            this.BfCategoryService.getSegments()\n                .then((response) => {\n                    response.forEach((item, key) => {\n                        this.allProductsSegments.push({\n                            value: item.productSegmentsName,\n                            label: item.productSegmentsName\n                        });\n                    });\n\n                    this.$emit('onStopLoading');\n                })\n                .catch((error) => {\n                    console.log(error);\n                    this.$emit('onStopLoading');\n                });\n        },\n        clearMappedData() {\n            this.productsTypes = [];\n            this.selectedSegment = '';\n            this.selectedType = '';\n        }\n    }\n});\n","import template from './bf-sales-channel-segment-mapping.html.twig';\nimport './bf-sales-channel-segment-mapping.scss';\n\nimport '../bf-sales-channel-shopware-segment-dropdown';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-segment-mapping', {\n    template,\n    inject: [\n        'repositoryFactory',\n        'BfCategoryService',\n        'bfContractService',\n        'BfSalesChannelService'\n    ],\n    props: {\n        clientExists: {\n            type: Boolean,\n            required: true\n        },\n        clientInProgress: {\n            type: Boolean,\n            required: true\n        },\n        currentContractName: {\n            type: String,\n            required: false,\n            default: ''\n        }\n    },\n    data() {\n        return {\n            isSegmentLoading: false,\n            salesChannel: null,\n            marketplaceName: '',\n            activeCategoryId: ''\n        }\n    },\n    created() {\n        this.getSalesChannelInfo();\n    },\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        }\n    },\n    methods: {\n        getSalesChannelInfo() {\n            this.isLoading = true;\n\n            this.salesChannelRepository\n                .get(this.$route.params.id, Context.api, new Criteria())\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.marketplaceName = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n                    this.isLoading = false;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n        setCurrentCategorySegment() {\n            let mapObject = this.$refs.segmentDropdown.currentCategorySegment;\n            mapObject.categoryId = this.activeCategoryId;\n\n            localStorage.setItem('productSegment', JSON.stringify(mapObject));\n        },\n        onSelectCategory(item) {\n            this.isSegmentLoading = true;\n            this.activeCategoryId = item;\n\n            this.BfCategoryService.getCategorySegment(this.activeCategoryId)\n                .then((response) => {\n                    this.$refs.segmentDropdown.setSegment(response, 'productSegmentsName', 'productTypesName');\n                    this.setCurrentCategorySegment();\n\n                    this.isSegmentLoading = false;\n                })\n                .catch((error) => {\n                    console.log(error);\n\n                    this.isSegmentLoading = false;\n                });\n        }\n    }\n});\n","import template from './bf-sales-channel-mapping.html.twig';\nimport BfSalesChannelService from \"../../../../service/bf-sales-channel.service\";\n\nconst {Component} = Shopware;\nconst {mapGetters, mapMutations} = Shopware.Component.getComponentHelper();\n\nComponent.override('bf-sales-channel-detail', {\n    name: 'bf-sales-channel-mapping',\n    template,\n    inject: [\n        'BfSalesChannelService'\n    ],\n    data() {\n        return {\n            categoriesReloadTriggerEvent: false\n        }\n    },\n    computed: {\n        salesChannelTypeId() {\n            return this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n        }\n    },\n    watch: {\n        '$route.params.id'() {\n            this.onSalesChannelChange();\n        }\n    },\n    methods: {\n        ...mapMutations([\n            'setCategoriesMappingStorage'\n        ]),\n        ...mapGetters('bfCategoryMapping', [\n            'getCategoriesMappingStorage'\n        ]),\n        /**\n         * @returns {Promise<void>}\n         */\n        async storeCategoriesMapping(){\n            let me = this;\n            const objects = Object.entries(this.getCategoriesMappingStorage());\n\n            for (const categoryMapping of objects) {\n                await me.BfCategoryService.saveCategoryMapping(categoryMapping[0], categoryMapping[1], me.salesChannelTypeId);\n            }\n\n            this.categoriesReloadTriggerEvent = !this.categoriesReloadTriggerEvent;\n        },\n        onSalesChannelChange() {\n            this.BfSalesChannelService.setSalesChannelId(this.$route.params.id);\n        },\n    },\n    created() {\n        this.onSalesChannelChange();\n    },\n});\n","import template from './bf-sales-channel-detail-mapping.html.twig';\nimport './bf-sales-channel-detail-mapping.scss';\n\nconst {Component, Mixin, State, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-detail-mapping', {\n    template,\n    inject: [\n        'bfContractService',\n        'repositoryFactory',\n        'BfSalesChannelService'\n    ],\n    mixins: [\n        Mixin.getByName('listing')\n    ],\n    props: {\n        categoriesReloadTriggerEvent: {\n            required: false\n        }\n    },\n    data() {\n        return {\n            clientExists: false,\n            clientInProgress: false,\n            currentContract: {},\n            propertyGroup: null,\n            swPropertyGroup: null,\n            isLoading: false,\n            attributeMappingData: [],\n            marketplaceName: '',\n            salesChannel: null,\n            amazonSegment: '',\n            amazonProductType: ''\n        };\n    },\n    watch: {\n        '$route.params.id'() {\n            this.getSalesChannelInfo();\n        }\n    },\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        isAmazon() {\n            return this.$attrs.salesChannelType === 'amazon';\n        },\n        currentLocale() {\n            return State.get('session').currentLocale;\n        }\n    },\n    created() {\n        this.getContract();\n        this.getSalesChannelInfo();\n        this.checkClientState();\n        this.loadShopsConfigurations();\n    },\n    methods: {\n        async getSalesChannelInfo() {\n            this.isLoading = true;\n\n            await this.salesChannelRepository\n                .get(this.$route.params.id, Context.api, new Criteria())\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.marketplaceName = this.$route.meta.$module.getSalesChannelByTypeId(this.salesChannel.typeId);\n                    this.isLoading = false;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n        getContract() {\n            return this.bfContractService.getUserInformation('user-token')\n                .then((response) => {\n                    if (response.longLifeToken === null || response.shopSecret === null) {\n                        return response;\n                    } else {\n                        return this.getContractDetails();\n                    }\n                });\n        },\n        getContractDetails() {\n            return this.bfContractService.getContracts()\n                .then((contracts) => {\n                    if (contracts.current !== null) {\n                        this.currentContract = contracts.current;\n                    }\n\n                    return contracts;\n                })\n                .catch((error) => {\n                    this.handleSbpError(error);\n                });\n        },\n        checkClientState() {\n            this.BfSalesChannelService.checkClientState().then((response) => {\n                this.clientExists = response.clientExists;\n                this.clientInProgress = response.clientInProgress;\n            })\n        },\n        async loadShopsConfigurations() {\n            await this.BfSalesChannelService.getShopsConfigurations().then((response) => {\n                let shopsConfigurations = response.data.data;\n                this.amazonSegment = shopsConfigurations.hasOwnProperty('productSegment') ? shopsConfigurations.productSegment : '-';\n                this.amazonProductType = shopsConfigurations.hasOwnProperty('productType') ? shopsConfigurations.productType : '-';\n            }).catch((error) => {\n                this.isLoading = false;\n            });\n        }\n    }\n});\n","const {Application} = Shopware;\n\nclass AttributesMappingUtils {\n\n    /**\n     * @param propertyService\n     * @returns {Promise<[]>}\n     */\n    async loadSwagMarketsAttributesMapping(propertyService) {\n        let swagMarketsAttributesMappingData = [];\n        await propertyService.loadAttributeMappingData().then((response) => {\n            if (!response.success) {\n                return;\n            }\n            swagMarketsAttributesMappingData = response.data;\n        });\n\n        return swagMarketsAttributesMappingData;\n    }\n\n    /**\n     * @param item\n     * @param type\n     * @returns {Promise<null>}\n     */\n    async getMappedErpSystemsList(item, type = 'PROPERTIES_TO_IMPORT_AS_ATTRIBUTES') {\n        let erpSystemsMappingData = null;\n\n        if (item !== null && item !== undefined && item.success) {\n            item.data.forEach(function (itemData) {\n                if (itemData.configurationKey === type) {\n                    erpSystemsMappingData = itemData.configurationValue;\n                }\n            });\n\n            erpSystemsMappingData = this.extractMappedErpSystemsEntries(erpSystemsMappingData);\n        }\n\n        return erpSystemsMappingData;\n    }\n\n    /**\n     * @param data\n     * @returns {[]}\n     */\n    extractMappedErpSystemsEntries(data) {\n        let result = [];\n\n        if (data !== null && typeof data === 'string') {\n            let found = data.split(',');\n\n            if (found !== null) {\n                result = found;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @param item\n     * @param swagMarketsErpSystemsAttributesMappingData\n     * @param swFieldName\n     */\n    saveInlineEdit(item, swagMarketsErpSystemsAttributesMappingData, swFieldName = 'swProperty') {\n        if (swagMarketsErpSystemsAttributesMappingData.length === 0 ||\n            this.erpSystemMappingExists(swagMarketsErpSystemsAttributesMappingData, item.id) === undefined) {\n            swagMarketsErpSystemsAttributesMappingData.push(item[swFieldName] + ' ##' + item.id + '##');\n        }\n        return swagMarketsErpSystemsAttributesMappingData;\n    }\n\n    /**\n     * @param propertyService\n     * @param swagMarketsErpSystemsAttributesMappingData\n     * @param type\n     */\n    transferErpSystemsConfigurations(propertyService, swagMarketsErpSystemsAttributesMappingData, type) {\n        let configurationValue = '';\n\n        swagMarketsErpSystemsAttributesMappingData.forEach(function (data, idx, array) {\n            if (idx === array.length - 1) {\n                configurationValue += data;\n            } else {\n                configurationValue += data + ',';\n            }\n        });\n\n        propertyService.storePropertyData(type, configurationValue).then(() => {\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    /**\n     * @param id\n     * @param translations\n     * @param propertyService\n     * @returns {Promise<null>}\n     */\n    async upsertProductsAttributesResource(id, translations, propertyService) {\n        let productsAttributesId = null;\n\n        await propertyService.loadBfAttributeDataV2({query: {externProductsAttributesId: id}}).then(async (response) => {\n            if (!response.success) {\n                return;\n            }\n\n            if (response.data.length === 0) {\n                await propertyService.createProductsAttributes(id, translations).then((productsAttributesResponse) => {\n                    if (!productsAttributesResponse.success) {\n                        return;\n                    }\n                    productsAttributesId = productsAttributesResponse.data.productsAttributesId;\n                });\n            }\n\n            if (response.data.length === 1) {\n                await propertyService.updateProductsAttributes(response.data[0].productsAttributesId, translations).then((productsAttributesResponse) => {\n                    if (!productsAttributesResponse.success) {\n                        return;\n                    }\n                    productsAttributesId = productsAttributesResponse.data.productsAttributesId;\n                });\n            }\n        });\n        return productsAttributesId;\n    }\n\n    /**\n     * @param propertyService\n     * @param attributesMappingName\n     * @param attributeCode\n     * @param swagMarketsMappingId\n     * @returns {Promise<void>}\n     */\n    async upsertProductsAttributesMappingResource(propertyService, attributesMappingName, attributeCode, swagMarketsMappingId = null) {\n        await propertyService.saveAttributeMappingData({\n            bfMappingId: swagMarketsMappingId,\n            attributeId: attributeCode,\n            externalValue: attributesMappingName\n        });\n    }\n\n    /**\n     * @param propertyService\n     * @param item\n     * @returns {Promise<void>}\n     */\n    async removeAttributesMappingAssignment(propertyService, item) {\n        await propertyService.removeAttributeMappingData(item.swagMarketsMappingId)\n    }\n\n    /**\n     * @param mappedData\n     * @param swagMarketsId\n     */\n    erpSystemMappingExists(mappedData, swagMarketsId) {\n        let extractedData = [];\n        if (mappedData.length === 0) {\n            return false;\n        }\n\n        mappedData.forEach(function (item, index) {\n            item = item.match(/##([A-Z0-9])+##/gi);\n            if (item !== null) {\n                extractedData[index] = item[0].replace(/##/g, '');\n            }\n        });\n        return extractedData.find(el => el === swagMarketsId);\n    }\n}\n\nexport default AttributesMappingUtils;\n\nApplication.addServiceProvider('AttributesMappingUtils', (container) => {\n    return new AttributesMappingUtils();\n});\n","import template from './attributes-mapping-modal.html.twig';\n\nconst {Component, Mixin} = Shopware;\n\nComponent.register('attributes-mapping-modal', {\n    template,\n\n    inject: [\n        'bfPropertyService',\n        'BfAmazonService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        showAttributesMappingModal: {\n            type: Boolean,\n            default: false\n        },\n        attributesMappingModalItem: {\n            type: Object,\n            default() {\n                return {}\n            },\n            required: true\n        },\n        salesChannelType: {\n            type: String,\n            required: true\n        },\n        amazonSegment: {\n            type: String,\n            default: ''\n        },\n        amazonProductType: {\n            type: String,\n            default: ''\n        }\n    },\n    watch: {\n        showAttributesMappingModal: function (newVal, oldVal) {\n            if (newVal === true) {\n                this.loadComponent();\n            }\n        }\n    },\n    created() {\n        this.loadComponent()\n    },\n    data() {\n        return {\n            searchString: '',\n            attributeData: [],\n            isLoading: false,\n            limit: 10,\n            page: 1,\n            total: 0\n        }\n    },\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n    },\n    methods: {\n        loadComponent() {\n            this.loadAttributeData();\n\n        },\n        async loadAttributeData() {\n            this.isLoading = true;\n            await this.bfPropertyService.loadAttributeData(this.searchString, this.limit, this.page).then((response) => {\n                this.total = response.totalCount;\n                this.attributeData = response.data;\n\n                if (this.salesChannelType === 'amazon' && this.amazonSegment.length > 0 && this.amazonProductType.length > 0) {\n                    this.BfAmazonService.getAmazonSegmentByName(this.amazonSegment).then((response) => {\n                        if (response.success && response.data.length > 0) {\n                            this.BfAmazonService.getProductTypesIdByProductTypesName(this.amazonProductType, response.data[0].id, response.data[0].name).then((response) => {\n                                if (response.success && response.data.length > 0) {\n                                    this.BfAmazonService.getProductTypesAttributesByProductType(response.data[0].id, this.limit, this.page, this.searchString).then((response) => {\n                                        if (response.success) {\n                                            this.total = response.totalCount;\n                                            this.attributeData = response.data;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n\n                this.isLoading = false;\n            });\n        },\n        saveData() {\n            if (this.$refs['attributeGrid'].selectionCount > 1) {\n                this.createNotificationWarning({\n                    title: this.$tc('propertyMapping.notifications.title.warning'),\n                    message: this.$tc('propertyMapping.notifications.message.warningTooManySelected')\n                });\n\n                return;\n            }\n\n            if (this.$refs['attributeGrid'].selectionCount === 0) {\n                this.createNotificationWarning({\n                    title: this.$tc('propertyMapping.notifications.title.warning'),\n                    message: this.$tc('propertyMapping.notifications.message.warningNoSelection')\n                });\n\n                return;\n            }\n\n            this.attributesMappingModalItem.swagMarketsAttributeName = Object.values(this.$refs['attributeGrid'].selection)[0].name;\n            this.$emit('save-attribute-mapping', this.attributesMappingModalItem);\n            this.$emit('modal-close-attr-mapping-win');\n        },\n        pageChange(params) {\n            this.page = params.page;\n            this.limit = params.limit;\n            this.loadComponent();\n        },\n        getColumns() {\n            return [\n                {\n                    property: 'id',\n                    visible: false,\n                    primary: true\n                },\n                {\n                    property: 'name',\n                    label: this.getMarketplaceColumnsHeader()\n                },\n                {\n                    property: 'mandatory',\n                    label: this.$tc('attributesMapping.mandatory'),\n                    width: \"100px\"\n                }\n            ]\n        },\n        getMarketplaceColumnsHeader() {\n            return this.salesChannelType === 'amazon' ?\n                this.$tc('attributesMapping.amazonColumnName') : this.$tc('attributesMapping.ebayColumnName');\n        }\n\n    }\n});\n","import template from './properties-mapping.html.twig';\nimport '../component/utils';\nimport '../attributes-mapping-modal';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('properties-mapping', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'bfPropertyService',\n        'AttributesMappingUtils'\n    ],\n\n    props: {\n        salesChannelType: {\n            type: String,\n            default: ''\n        },\n        amazonSegment: {\n            type: String,\n            default: ''\n        },\n        amazonProductType: {\n            type: String,\n            default: ''\n        }\n    },\n\n    data() {\n        return {\n            propertiesMapping: [],\n            isLoadingPropertiesMapping: true,\n            page: 1,\n            limit: 5,\n            total: 0,\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            showEmptyState: false,\n            swagMarketsAttributesMappingData: {},\n            swagMarketsErpSystemsAttributesMappingData: {},\n            showDeleteModalPropertiesAttributesMapping: false,\n            toRemoveAssignmentIem: null,\n            showAttributesMappingModal: false,\n            attributesMappingModalItem: {}\n        }\n    },\n    created() {\n        this.bfPropertyService.setSalesChannelId(this.$route.params.id);\n        this.loadComponent();\n    },\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n        propertyGroupRepository() {\n            return this.repositoryFactory.create('property_group');\n        },\n        useNaturalSorting() {\n            return this.sortBy === 'property.swProperty';\n        },\n    },\n    methods: {\n        async loadComponent() {\n            this.isLoadingPropertiesMapping = true;\n            this.swagMarketsErpSystemsAttributesMappingData = await this.AttributesMappingUtils.getMappedErpSystemsList(\n                await this.bfPropertyService.loadPropertyData());\n            await this.loadSwagMarketsAttributesMapping();\n            await this.loadPropertiesMappingData();\n            this.isLoadingPropertiesMapping = false;\n        },\n        /**\n         * @returns {Promise<void>}\n         */\n        async loadSwagMarketsAttributesMapping() {\n            this.swagMarketsAttributesMappingData = await this.AttributesMappingUtils.loadSwagMarketsAttributesMapping(this.bfPropertyService);\n        },\n        /**\n         * @returns {Promise<void>}\n         */\n        async loadPropertiesMappingData() {\n            let me = this, criteria = new Criteria(this.page, this.limit),\n                mapping = [];\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.useNaturalSorting));\n            criteria.addAssociation('translations.language.locale');\n\n            await this.propertyGroupRepository.search(criteria, Context.api).then((entityCollection) => {\n                this.total = entityCollection.total;\n                if (entityCollection.length > 0) {\n                    entityCollection.forEach(function (entity) {\n                        let translations = [], swagMarketsAttributeName = '', swagMarketsMappingId = null, assigned = false;\n                        entity.translations.forEach(function(entityTranslations) {\n                            translations.push({\n                                isoCode: entityTranslations.language.locale.code.split('-')[0],\n                                name: entityTranslations.name\n                            });\n                        });\n\n                        if (me.swagMarketsErpSystemsAttributesMappingData !== null && me.swagMarketsErpSystemsAttributesMappingData.length > 0) {\n                            if (me.swagMarketsAttributesMappingData.length > 0) {\n                                me.swagMarketsAttributesMappingData.forEach(function(mappingData) {\n                                    if (entity.id === mappingData.internalValue) {\n                                        swagMarketsAttributeName = mappingData.externalValue;\n                                        swagMarketsMappingId = mappingData.bfMappingId;\n                                        assigned = true;\n                                    }\n                                });\n                            }\n                        }\n\n                        mapping.push({\n                            id: entity.id,\n                            swProperty: entity.name,\n                            swagMarketsAttributeName: swagMarketsAttributeName,\n                            translations: translations,\n                            swagMarketsMappingId: swagMarketsMappingId,\n                            assigned: assigned\n                        });\n                    });\n                }\n            });\n\n            this.propertiesMapping = mapping;\n\n            if (this.propertiesMapping.length === 0) {\n                this.showEmptyState = true;\n            }\n        },\n        /**\n         *\n         * @param item\n         */\n        saveInlineEdit(item) {\n            this.isLoadingPropertiesMapping = true;\n            this.saveErpConfiguration(item);\n            this.upsertAndGetProductsAttributes(item);\n        },\n        /**\n         * @param item\n         */\n        async saveErpConfiguration(item) {\n            this.swagMarketsErpSystemsAttributesMappingData = await this.AttributesMappingUtils.saveInlineEdit(\n                item, this.swagMarketsErpSystemsAttributesMappingData);\n\n            this.AttributesMappingUtils.transferErpSystemsConfigurations(\n                this.bfPropertyService, this.swagMarketsErpSystemsAttributesMappingData, 'property');\n        },\n        /**\n         * @param item\n         */\n        async upsertAndGetProductsAttributes(item) {\n            let productsAttributesId = await this.AttributesMappingUtils.upsertProductsAttributesResource(\n                item.id,\n                item.translations,\n                this.bfPropertyService\n            );\n            if (productsAttributesId > 0) {\n                await this.upsertProductsAttributesMapping(item);\n            }\n        },\n        /**\n         * @param item\n         */\n        async upsertProductsAttributesMapping(item) {\n            await this.AttributesMappingUtils.upsertProductsAttributesMappingResource(\n                this.bfPropertyService,\n                item.swagMarketsAttributeName,\n                item.id,\n                item.swagMarketsMappingId\n            ).then(() => {\n                this.loadComponent();\n            });\n        },\n        pageChange(param) {\n            this.page = param.page;\n            this.limit = param.limit;\n            this.loadComponent();\n        },\n        showRemoveAssignmentModal(item) {\n            this.toRemoveAssignmentIem = item;\n             this.showDeleteModalPropertiesAttributesMapping = true;\n        },\n        closeRemoveAssignmentModal() {\n            this.showDeleteModalPropertiesAttributesMapping = false;\n        },\n        async removePropertiesAssignment() {\n            await this.AttributesMappingUtils.removeAttributesMappingAssignment(\n                this.bfPropertyService,\n                this.toRemoveAssignmentIem\n            ).then(() => {\n                this.showDeleteModalPropertiesAttributesMapping = false;\n                this.loadComponent();\n            });\n        },\n        showAttributesMappingModalWindow(item) {\n            this.attributesMappingModalItem = item;\n            this.showAttributesMappingModal = true;\n        },\n        closeAttributesMappingModalWindow() {\n            this.attributesMappingModalItem = {};\n            this.showAttributesMappingModal = false;\n        },\n        /**\n         * @returns {({property: string, width: string, label: string, rawData: boolean}|{property: string, inlineEdit: string, label: string, rawData: boolean})[]}\n         */\n        getColumns() {\n            return [\n                {\n                    property: 'swProperty',\n                    label: this.$tc('attributesMapping.properties.columnName'),\n                    rawData: true,\n                    width: '400px'\n                },\n                {\n                    property: 'swagMarketsAttributeName',\n                    label: this.getMarketplaceColumnsHeader(),\n                    rawData: true,\n                    inlineEdit: 'string'\n                },\n                {\n                    property: 'assigned',\n                    label: this.$tc('attributesMapping.assigned'),\n                    rawData: true,\n                }\n            ]\n        },\n        getMarketplaceColumnsHeader() {\n            return this.salesChannelType === 'amazon' ?\n                this.$tc('attributesMapping.amazonColumnName') : this.$tc('attributesMapping.ebayColumnName');\n        }\n    }\n});\n","import template from './custom-fields-mapping.html.twig';\nimport '../component/utils';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('custom-fields-mapping', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'bfPropertyService',\n        'AttributesMappingUtils'\n    ],\n\n    props: {\n        salesChannelType: {\n            type: String,\n            default: ''\n        },\n        amazonSegment: {\n            type: String,\n            default: ''\n        },\n        amazonProductType: {\n            type: String,\n            default: ''\n        }\n    },\n\n    data() {\n        return {\n            isLoadingCustomFieldsMapping: false,\n            showEmptyState: false,\n            page: 1,\n            limit: 5,\n            total: 0,\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            customFieldsMapping: [],\n            swagMarketsErpSystemsAttributesMappingData: {},\n            swagMarketsAttributesMappingData: {},\n            toRemoveAssignmentIem: null,\n            showDeleteModalCustomFieldsAttributesMapping: false,\n            showAttributesMappingModal: false,\n            attributesMappingModalItem: {}\n        }\n    },\n    created() {\n        this.bfPropertyService.setSalesChannelId(this.$route.params.id);\n        this.loadComponent();\n    },\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n        customFieldsRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n        useNaturalSorting() {\n            return this.sortBy === 'property.swCustomFields';\n        },\n    },\n    methods: {\n        async loadComponent() {\n            this.isLoadingCustomFieldsMapping = true;\n            this.swagMarketsErpSystemsAttributesMappingData = await this.AttributesMappingUtils.getMappedErpSystemsList(\n                await this.bfPropertyService.loadPropertyData(), 'CUSTOM_FIELDS_TO_IMPORT_AS_ATTRIBUTES');\n            await this.loadSwagMarketsAttributesMapping();\n            await this.loadCustomFieldsMappingData();\n            this.isLoadingCustomFieldsMapping = false;\n        },\n        async loadSwagMarketsAttributesMapping() {\n            this.swagMarketsAttributesMappingData = await this.AttributesMappingUtils.loadSwagMarketsAttributesMapping(this.bfPropertyService);\n        },\n        async loadCustomFieldsMappingData() {\n            let me = this, criteria = new Criteria(this.page, this.limit),\n                mapping = [];\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.useNaturalSorting));\n            await this.customFieldsRepository.search(criteria, Context.api).then((entityCollection) => {\n                this.total = entityCollection.total;\n                if (entityCollection.length > 0) {\n                    entityCollection.forEach(function (entity) {\n                        let translations = [], swagMarketsAttributeName = '', swagMarketsMappingId = null,\n                            assigned = false;\n                        for (const [key, value] of Object.entries(entity.config.label)) {\n                            translations.push({\n                                isoCode: `${key}`.split('-')[0],\n                                name: `${value}`\n                            })\n                        }\n                        if (me.swagMarketsErpSystemsAttributesMappingData !== null && me.swagMarketsErpSystemsAttributesMappingData.length > 0) {\n                            if (me.swagMarketsAttributesMappingData.length > 0) {\n                                me.swagMarketsAttributesMappingData.forEach(function (mappingData) {\n\n                                    if (entity.name === mappingData.internalValue) {\n                                        swagMarketsAttributeName = mappingData.externalValue;\n                                        swagMarketsMappingId = mappingData.bfMappingId;\n                                        assigned = true;\n                                    }\n                                });\n                            }\n                        }\n\n                        mapping.push({\n                            id: entity.id,\n                            swCustomFields: entity.name,\n                            swagMarketsAttributeName: swagMarketsAttributeName,\n                            translations: translations,\n                            swagMarketsMappingId: swagMarketsMappingId,\n                            assigned: assigned\n                        });\n\n                    });\n                }\n            });\n\n            this.customFieldsMapping = mapping;\n            if (this.customFieldsMapping.length === 0) {\n                this.showEmptyState = true;\n            }\n        },\n        saveInlineEdit(item) {\n            this.isLoadingPropertiesMapping = true;\n            this.saveErpConfiguration(item);\n            this.upsertAndGetProductsAttributes(item);\n        },\n        /**\n         * @param item\n         */\n        saveErpConfiguration(item) {\n            this.swagMarketsErpSystemsAttributesMappingData = this.AttributesMappingUtils.saveInlineEdit(\n                item, this.swagMarketsErpSystemsAttributesMappingData, 'swCustomFields');\n\n            this.AttributesMappingUtils.transferErpSystemsConfigurations(\n                this.bfPropertyService, this.swagMarketsErpSystemsAttributesMappingData, 'custom_field');\n        },\n        /**\n         * @param item\n         */\n        async upsertAndGetProductsAttributes(item) {\n            let productsAttributesId = await this.AttributesMappingUtils.upsertProductsAttributesResource(\n                item.swCustomFields,\n                item.translations,\n                this.bfPropertyService\n            );\n            if (productsAttributesId > 0) {\n                await this.upsertProductsAttributesMapping(item);\n            }\n        },\n        /**\n         * @param item\n         */\n        async upsertProductsAttributesMapping(item) {\n            await this.AttributesMappingUtils.upsertProductsAttributesMappingResource(\n                this.bfPropertyService,\n                item.swagMarketsAttributeName,\n                item.swCustomFields,\n                item.swagMarketsMappingId\n            ).then(() => {\n                this.loadComponent();\n            });\n        },\n        /**\n         * @param param\n         */\n        pageChange(param) {\n            this.page = param.page;\n            this.limit = param.limit;\n            this.loadComponent();\n        },\n        showRemoveAssignmentModal(item) {\n            this.toRemoveAssignmentIem = item;\n            this.showDeleteModalCustomFieldsAttributesMapping = true;\n        },\n        closeRemoveAssignmentModal() {\n            this.showDeleteModalCustomFieldsAttributesMapping = false;\n        },\n        async removeCustomFieldsAssignment() {\n            await this.AttributesMappingUtils.removeAttributesMappingAssignment(\n                this.bfPropertyService,\n                this.toRemoveAssignmentIem\n            ).then(() => {\n                this.showDeleteModalCustomFieldsAttributesMapping = false;\n                this.loadComponent();\n            });\n        },\n        showAttributesMappingModalWindow(item) {\n            this.attributesMappingModalItem = item;\n            this.showAttributesMappingModal = true;\n        },\n        closeAttributesMappingModalWindow() {\n            this.attributesMappingModalItem = {};\n            this.showAttributesMappingModal = false;\n        },\n        /**\n         * @returns {({property: string, width: string, label: string, rawData: boolean}|{property: string, inlineEdit: string, label: string, rawData: boolean})[]}\n         */\n        getColumns() {\n            return [\n                {\n                    property: 'swCustomFields',\n                    label: this.$tc('attributesMapping.custom-fields.columnName'),\n                    rawData: true,\n                    width: '400px'\n                },\n                {\n                    property: 'swagMarketsAttributeName',\n                    label: this.getMarketplaceColumnsHeader(),\n                    rawData: true,\n                    inlineEdit: 'string'\n                },\n                {\n                    property: 'assigned',\n                    label: this.$tc('attributesMapping.assigned'),\n                    rawData: true,\n                }\n            ]\n        },\n        getMarketplaceColumnsHeader() {\n            return this.salesChannelType === 'amazon' ?\n                this.$tc('attributesMapping.amazonColumnName') : this.$tc('attributesMapping.ebayColumnName');\n        }\n    }\n});\n","import template from './bf-sales-channel-attributes-mapping.html.twig';\n\nimport './properties-mapping';\nimport './custom-fields-mapping';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-attributes-mapping', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'bfPropertyService',\n    ],\n\n    props: {\n        salesChannelType: {\n            type: String,\n            default: ''\n        },\n        amazonSegment: {\n            type: String,\n            default: ''\n        },\n        amazonProductType: {\n            type: String,\n            default: ''\n        }\n    }\n});\n","import template from './bf-tree.html.twig';\nimport './bf-tree.scss';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {debounce, sort} = Shopware.Utils;\nconst {mapMutations} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-tree', {\n    template,\n    inject:[\n        'repositoryFactory',\n        'BfCategoryService'\n    ],\n    props: {\n        items: {\n            type: Array,\n            required: true\n        },\n        parentProperty: {\n            type: String,\n            required: false,\n            default: 'parentId'\n        },\n        afterIdProperty: {\n            type: String,\n            required: false,\n            default: 'afterCategoryId'\n        },\n        rootParentId: {\n            type: String,\n            required: false,\n            default: null\n        },\n        searchable: {\n            type: Boolean,\n            required: false,\n            default: true\n        },\n        title: {\n            type: String,\n            required: false,\n            default: ''\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            treeItems:[],\n            currentTreeSearch: null,\n        }\n    },\n    computed: {\n        isSearched() {\n            return this.currentTreeSearch !== null && this.currentTreeSearch.length > 0;\n        },\n        hasNoItems() {\n            if(this.items.length === 1 && this.items[0] && this.items[0].isDeleted) {\n                return true;\n            }\n            return false;\n        },\n        categoryMappingRepository() {\n            return this.repositoryFactory.create('bf_category_mapping');\n        }\n    },\n    watch: {\n        items: {\n            immediate: true,\n            handler() {\n                this.treeItems = this.getTreeItems(this.isSearched ? null : this.rootParentId);\n            }\n        }\n    },\n    created() {\n        this.isLoading = true;\n    },\n    methods: {\n        ...mapMutations('bfCategoryMapping', [\n            'setSelectedCategories'\n        ]),\n        getTreeItems(parentId) {\n            const treeItems = [];\n            this.items.forEach((item) => {\n                if(parentId === null && typeof this.items.find(i => i.id === item.parentId) !== 'undefined') {\n                    return;\n                }\n\n                if(parentId !== null && item.parentId !== parentId) {\n                    return;\n                }\n\n                treeItems.push({\n                    data: item,\n                    id: item.id,\n                    parentId: parentId,\n                    childCount: item.childCount,\n                    children: this.getTreeItems(item.id),\n                    initialOpened: false,\n                    active: false,\n                    name: item.name,\n                    [this.afterIdProperty]: item[this.afterIdProperty]\n                });\n            });\n\n            this.isLoading = false;\n            return sort.afterSort(treeItems, this.afterIdProperty);\n        },\n        getItems(parentId = this.rootParentId, searchTerm = null) {\n            this.$emit('get-tree-items', parentId, searchTerm);\n        },\n        onChange(item) {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addFilter(new Criteria.equals('categoryId', item));\n\n            this.categoryMappingRepository.search(criteria, Context.api)\n                .then((categories) => {\n                    if(categories.length <= 0) {\n                        this.$store.commit('bfCategoryMapping/setSelectedCategories', null);\n                        return;\n                    }\n                    let ids = [];\n                    categories.forEach((category) => {\n                        ids.push(category.bfCategoryId);\n                    });\n\n                    this.BfCategoryService.findCategoriesByIds(ids).then((result) => {\n                        let items = [];\n                        result.forEach((item) => {\n                            items.push({\n                                item,\n                                mapping: categories.find(i => i.bfCategoryId == item.id)\n                            });\n                        });\n\n                        this.$store.commit('bfCategoryMapping/setSelectedCategories', items);\n                    });\n                });\n\n            this.$emit('on-change', item);\n        },\n        searchItems: debounce(function debouncedTreeSearch() {\n            this.$emit('search-tree-items', this.currentTreeSearch);\n        }, 600)\n    }\n});\n","import template from './bf-tree-item.html.twig';\nimport './bf-tree-item.scss';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-tree-item', {\n    template,\n    props: {\n        item: {\n            type: Object,\n            required: true,\n            default() {\n                return {}\n            }\n        },\n        value: {\n            type: String,\n            required: false\n        }\n    },\n    data() {\n        return {\n            isLoading: false,\n            currentSelected: '',\n            active: this.item.active,\n            opened: this.item.initialOpened\n        }\n    },\n    computed: {\n        isOpened() {\n            if(this.item.initialOpened) {\n                this.openTreeItem(true);\n                this.getTreeItemChildren(this.item);\n                this.item.initialOpened = false;\n            }\n            return this.opened;\n        },\n        styling() {\n            return {\n                'is--active': this.active,\n                'is--no-children': this.item.childCOunt <= 0,\n                'is--opened': this.isOpened,\n            }\n        }\n    },\n    updated() {\n        this.componentUpdated();\n    },\n    created() {\n    },\n    methods: {\n        componentUpdated() {\n            if(this.item.children.length > 0) {\n                this.isLoading = false;\n            }\n        },\n        openTreeItem(opened = !this.opened) {\n            this.opened = opened;\n        },\n        getTreeItemChildren(treeItem) {\n            if(treeItem.children.length <= 0) {\n                this.isLoading = true;\n                this.getItems(treeItem.data.id);\n            }\n        },\n        getItems(args) {\n            return this.$parent.getItems(args);\n        },\n        emitCheckedItem(item) {\n            this.$emit('on-change', item);\n        },\n        onChangeItem(item) {\n            this.$emit('on-change', item);\n        }\n    }\n})","import template from './bf-sales-channel-shopware-category-tree.html.twig';\n\nimport '../structure/bf-tree';\nimport '../structure/bf-tree-item';\n\nconst {Component, Context, Collection, State} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {mapMutations, mapGetters} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-sales-channel-shopware-category-tree', {\n    template,\n    inject: [\n        'repositoryFactory'\n    ],\n    data() {\n        return {\n            loadedCategories: [],\n            loadedParentIds: [],\n            translationContext: 'sw-category',\n            isLoadingInitialData: true,\n            showDeleteModal: false,\n            selectedItem: ''\n        }\n    },\n    computed: {\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n        categories() {\n            return Object.values(this.loadedCategories);\n        }\n    },\n    created() {\n        this.componentCreated();\n    },\n    methods: {\n        ...mapMutations([\n            'setSelectedCategories',\n            'setShopwareCategories',\n            'setMarketplaceCategories',\n            'setMarketplace'\n        ]),\n        ...mapGetters('bfCategoryMapping', [\n            'getSelectedCategories',\n            'getMarketplaceCategories'\n        ]),\n        componentCreated() {\n            this.loadRootCategories()\n                .then(() => {\n                    this.isLoadingInitialData = false;\n                });\n        },\n        onGetTreeItems(parentId) {\n            if (this.loadedParentIds.includes(parentId)) {\n                return Promise.resolve();\n            }\n\n            this.loadedParentIds.push(parentId);\n\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equals('parentId', parentId));\n\n            return this.categoryRepository.search(criteria, Context.api)\n                .then((children) => {\n                    this.addCategories(children);\n                })\n                .catch(() => {\n                    this.loadedParentIds = this.loadedParentIds.filter((id) => {\n                        return id !== parentId;\n                    });\n                });\n        },\n        onChangeItem(item) {\n            this.$store.commit('bfCategoryMapping/setShopwareCategories', item);\n            this.selectedItem = this.getSelectedCategories();\n        },\n        loadRootCategories() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equals('parentId', null));\n\n            return this.categoryRepository\n                .search(criteria, Context.api)\n                .then((categories) => {\n                    this.addCategories(categories, true);\n                });\n        },\n        searchTreeItems(searchText) {\n            this.loadedCategories = [];\n            this.loadedParentIds = [];\n\n            if (searchText === '') {\n                return this.componentCreated();\n            } else {\n                const criteria = new Criteria(1, 500);\n                criteria.addFilter(Criteria.contains('name', searchText));\n\n                return this.categoryRepository\n                    .search(criteria, Context.api)\n                    .then((categories) => {\n                        this.addCategories(categories, true);\n                    });\n            }\n        },\n        addCategories(categories, parentId = null, root = false) {\n            categories.forEach((category) => {\n                this.loadedCategories[category.id] = category;\n            });\n\n            this.loadedCategories = {...this.loadedCategories};\n        }\n    }\n})\n;\n","import template from './bf-segment-category-tree.html.twig';\n\nconst {Component} = Shopware;\nconst {sort, debounce} = Shopware.Utils;\n\nComponent.register('bf-segment-category-tree', {\n    template,\n    props: {\n        items: {\n            type: Array,\n            required: true\n        },\n        parentProperty: {\n            type: String,\n            required: false,\n            default: 'parentId'\n        },\n        afterIdProperty: {\n            type: String,\n            required: false,\n            default: 'afterCategoryId'\n        },\n        rootParentId: {\n            type: String,\n            required: false,\n            default: null\n        },\n        searchable: {\n            type: Boolean,\n            required: false,\n            default: true\n        },\n        title: {\n            type: String,\n            required: false,\n            default: ''\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            treeItems:[],\n            currentTreeSearch: null,\n        }\n    },\n    computed: {\n        hasNoItems() {\n            return this.items.length === 1 && this.items[0] && this.items[0].isDeleted;\n        }\n    },\n    watch: {\n        items: {\n            immediate: true,\n            handler() {\n                this.treeItems = this.getTreeItems(this.isSearched ? null : this.rootParentId);\n            }\n        }\n    },\n    created() {\n        this.isLoading = true;\n    },\n    methods: {\n        getTreeItems(parentId) {\n            const treeItems = [];\n            this.items.forEach((item) => {\n                if(parentId === null && typeof this.items.find(i => i.id === item.parentId) !== 'undefined') {\n                    this.isLoading = false;\n                    return;\n                }\n\n                if(parentId !== null && item.parentId !== parentId) {\n                    return;\n                }\n\n                treeItems.push({\n                    data: item,\n                    id: item.id,\n                    parentId: parentId,\n                    childCount: item.childCount,\n                    children: this.getTreeItems(item.id),\n                    initialOpened: false,\n                    active: false,\n                    name: item.name,\n                    [this.afterIdProperty]: item[this.afterIdProperty]\n                });\n            });\n\n            this.isLoading = false;\n            return sort.afterSort(treeItems, this.afterIdProperty);\n        },\n        getItems(parentId = this.rootParentId, searchTerm = null) {\n            this.$emit('get-tree-items', parentId, searchTerm);\n        },\n        onChange(item) {\n            this.$emit('on-change', item);\n        },\n        searchItems: debounce(function debouncedTreeSearch() {\n            this.$emit('search-tree-items', this.currentTreeSearch);\n        }, 600)\n    }\n});\n","import template from './bf-segment-category-tree-item.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.register('bf-segment-category-tree-item', {\n    template,\n    props: {\n        item: {\n            type: Object,\n            required: true,\n            default() {\n                return {}\n            }\n        },\n        value: {\n            type: String,\n            required: false\n        }\n    },\n    data() {\n        return {\n            isLoading: false,\n            currentSelected: '',\n            active: this.item.active,\n            opened: this.item.initialOpened\n        }\n    },\n    computed: {\n        isOpened() {\n            if(this.item.initialOpened) {\n                this.openTreeItem(true);\n                this.getTreeItemChildren(this.item);\n                this.item.initialOpened = false;\n            }\n            return this.opened;\n        },\n        styling() {\n            return {\n                'is--active': this.active,\n                'is--no-children': this.item.childCOunt <= 0,\n                'is--opened': this.isOpened,\n            }\n        }\n    },\n    updated() {\n        this.componentUpdated();\n    },\n    methods: {\n        componentUpdated() {\n            if(this.item.children.length > 0) {\n                this.isLoading = false;\n            }\n        },\n        openTreeItem(opened = !this.opened) {\n            this.opened = opened;\n        },\n        getTreeItemChildren(treeItem) {\n            if(treeItem.children.length <= 0) {\n                this.isLoading = true;\n                this.getItems(treeItem.data.id);\n            }\n        },\n        getItems(args) {\n            return this.$parent.getItems(args);\n        },\n        emitCheckedItem(item) {\n            this.$emit('on-change', item);\n        },\n        onChangeItem(item) {\n            this.$emit('on-change', item);\n        }\n    }\n})\n","import template from './bf-sales-channel-shopware-segment-category-tree.html.twig';\n\nimport '../structure/bf-segment-category-tree';\nimport '../structure/bf-segment-category-tree-item';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('bf-sales-channel-shopware-segment-category-tree', {\n    template,\n    inject: [\n        'repositoryFactory'\n    ],\n    data() {\n        return {\n            loadedCategories: [],\n            loadedParentIds: [],\n            isLoadingInitialData: true\n        }\n    },\n    computed: {\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n        categories() {\n            return Object.values(this.loadedCategories);\n        }\n    },\n    created() {\n        this.componentCreated();\n    },\n    methods: {\n        componentCreated() {\n            this.loadRootCategories()\n                .then(() => {\n                    this.isLoadingInitialData = false;\n                });\n        },\n        onGetTreeItems(parentId) {\n            if (this.loadedParentIds.includes(parentId)) {\n                return Promise.resolve();\n            }\n\n            this.loadedParentIds.push(parentId);\n\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equals('parentId', parentId));\n\n            return this.categoryRepository.search(criteria, Context.api)\n                .then((children) => {\n                    this.addCategories(children);\n                })\n                .catch(() => {\n                    this.loadedParentIds = this.loadedParentIds.filter((id) => {\n                        return id !== parentId;\n                    });\n                });\n        },\n        onChangeCategory(item) {\n            this.$emit('onSelectCategory', item);\n        },\n        loadRootCategories() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equals('parentId', null));\n\n            return this.categoryRepository\n                .search(criteria, Context.api)\n                .then((categories) => {\n                    this.addCategories(categories, true);\n                });\n        },\n        searchTreeItems(searchText) {\n            this.loadedCategories = [];\n            this.loadedParentIds = [];\n\n            if (searchText === '') {\n                return this.componentCreated();\n            } else {\n                const criteria = new Criteria(1, 500);\n                criteria.addFilter(Criteria.contains('name', searchText));\n\n                return this.categoryRepository\n                    .search(criteria, Context.api)\n                    .then((categories) => {\n                        this.addCategories(categories, true);\n                    });\n            }\n        },\n        addCategories(categories, parentId = null, root = false) {\n            categories.forEach((category) => {\n                this.loadedCategories[category.id] = category;\n            });\n\n            this.loadedCategories = {...this.loadedCategories};\n        }\n    }\n});\n","import template from './bf-sales-channel-marketplace-category-tree.html.twig';\nimport './bf-sales-channel-marketplace-category-tree.scss';\n\nconst {Component, Context, Mixin} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {mapMutations, mapGetters, mapState} = Shopware.Component.getComponentHelper();\n\nComponent.register('bf-sales-channel-marketplace-category-tree', {\n    template,\n    inject: [\n        'BfCategoryService',\n        'repositoryFactory'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    data() {\n        return {\n            isLoading: true,\n            categories: [],\n            activeCategories: [],\n            checkedCategories: [],\n            title: this.$tc('categories.marketplace-default-title')\n        }\n    },\n    created() {\n        this.componentCreated();\n    },\n    computed: {\n        ...mapState('bfCategoryMapping', ['selectedCategories']),\n        categoryMappingRepository() {\n            return this.repositoryFactory.create('bf_category_mapping');\n        },\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n        async salesChannelType() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('id', this.$route.params.id));\n\n            return await this.salesChannelRepository.search(criteria, Context.api)\n                .then((response) => {\n                    return this.$route.meta.$module.getSalesChannelByTypeId(response.first().typeId)\n                });\n        },\n    },\n    watch: {\n        selectedCategories(newValue, oldValue) {\n            if(newValue !== null) {\n                this.activeCategories = newValue.filter((item) => { return item.mapping.salesChannelId === this.$route.params.id });\n            }\n\n        },\n        salesChannelType() {\n\n            Promise.resolve(this.salesChannelType).then((result) => {\n                this.title = result === 'amazon' ?\n                    this.$tc('categories.amazon-marketplace-title') :\n                    this.$tc('categories.ebay-marketplace-title');\n            });\n        }\n    },\n    methods: {\n        ...mapMutations([\n            'setSelectedCategories',\n            'setShopwareCategories',\n            'setMarketplaceCategories',\n            'setMarketplace'\n        ]),\n        ...mapGetters('bfCategoryMapping', [\n            'getSelectedCategories'\n        ]),\n        removeItem(item) {\n            this.categoryMappingRepository.delete(item.mapping.id, Context.api)\n                .then((result) => {\n                    this.activeCategories = this.activeCategories.filter((i) => {\n                        return i.item.id !== item.item.id\n                    });\n\n                    this.createNotificationSuccess({\n                        title: 'Success !',\n                        message: 'Category mapping was successful deleted'\n                    });\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        title: 'Error !',\n                        message: 'Deleting mapping was not successful. Please try again!'\n                    });\n                });\n        },\n        componentCreated() {\n            this.loadRootCategories()\n                .then(() => {\n                    this.isLoading = false;\n                });\n        },\n        onChangeRoute(args) {\n        },\n        getTreeItems(item) {\n            return this.loadChildCategories(item);\n        },\n        searchTreeItems(item) {\n            this.isLoading = true;\n            this.categories = [];\n\n            this.loadRootCategories(item)\n                .then(() => {\n                    this.isLoading = false;\n                });\n        },\n        checkItem(item) {\n            if (item.checked) {\n                this.checkedCategories.push(item);\n            }\n            if (this.activeCategories !== null && this.activeCategories.length >= 1) {\n                this.isDisabled = true;\n            }\n            if (!item.checked) {\n                this.checkedCategories = this.checkedCategories.filter((value, index, arr) => {\n                    return value.id != item.id;\n                })\n            }\n\n            this.$store.commit('bfCategoryMapping/setMarketplaceCategories', this.checkedCategories);\n        },\n        async loadRootCategories(searchText) {\n            let categories = [];\n\n            if (searchText !== undefined && searchText.length > 0) {\n                categories = this.BfCategoryService.findCategoryByName(searchText);\n            } else {\n                categories = this.BfCategoryService.getRootCategories();\n            }\n\n            return categories.then((categories) => {\n                this.addCategories(categories);\n            });\n        },\n        async loadChildCategories(parentId) {\n            return this.BfCategoryService\n                .getChildCategories(parentId)\n                .then((categories) => {\n                    this.addCategories(categories);\n                });\n        },\n        addCategories(categories) {\n            categories.forEach((category) => {\n                this.categories.push({\n                    data: category,\n                    id: category.id,\n                    categoryId: category.external_channels_categories_id,\n                    name: category.name,\n                    childCount: category.children,\n                    parentId: category.parent_id,\n                    afterId: category.id - 1\n                });\n            });\n        },\n    }\n});\n","import template from './bf-sales-channel-unit-mapping-grid.html.twig';\n\nconst {Component, State} = Shopware;\n\nComponent.extend('bf-sales-channel-unit-mapping-grid', 'sw-data-grid', {\n    template,\n    props: {\n        unitMappings: {\n            type: Array,\n            required: true\n        }\n    },\n    data() {\n        return {\n            selectedUnit: null,\n            showUnitMappingModal: false\n        }\n    },\n    computed: {\n        currentLocale() {\n            return State.get('session').currentLocale;\n        }\n    },\n    methods: {\n        getCurrentData(item) {\n            let currentData = {};\n\n            this.unitMappings.forEach(function (unitMapping) {\n                if (unitMapping.internalValue !== null && unitMapping.internalValue.toLowerCase() === item.externUnitsId.toLowerCase()) {\n                    currentData = unitMapping;\n                }\n            });\n\n            return currentData;\n        },\n        getExternalName(item) {\n            let externalName = '';\n\n            this.unitMappings.forEach(function (unitMapping) {\n                if (unitMapping.internalValue !== null && unitMapping.internalValue.toLowerCase() === item.externUnitsId.toLowerCase()) {\n                    externalName = unitMapping.externalValue;\n                }\n            });\n\n            return externalName;\n        },\n        onEditUnitMappingClick(item) {\n            this.selectedUnit = item;\n            this.showUnitMappingModal = true;\n        }\n    }\n});\n","import template from './bf-sales-channel-unit-mapping-modal.html.twig';\n\nconst {Component, Mixin} = Shopware;\n\nComponent.register('bf-sales-channel-unit-mapping-modal', {\n    template,\n    inject: [\n        'bfUnitService'\n    ],\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n    props: {\n        unit: {\n            type: Object,\n            required: true\n        },\n        currentData: {\n            type: Object,\n            required: true\n        },\n        title: {\n            type: String,\n            required: true\n        }\n    },\n    data() {\n        return {\n            columns: [],\n            unitData: [],\n            amazonColumns: [\n                {\n                    property: 'type',\n                    label: 'unitMapping.column.type'\n                },\n                {\n                    property: 'name',\n                    label: 'unitMapping.column.name'\n                }\n            ],\n            amazonUnitData: [\n                {id: 1, type: 'weight', name: 'GR'},\n                {id: 2, type: 'weight', name: 'KG'},\n                {id: 3, type: 'weight', name: 'OZ'},\n                {id: 4, type: 'weight', name: 'LB'},\n                {id: 5, type: 'weight', name: 'MG'},\n\n                {id: 6, type: 'volume', name: 'cubic-cm'},\n                {id: 7, type: 'volume', name: 'cubic-ft'},\n                {id: 8, type: 'volume', name: 'cubic-in'},\n                {id: 9, type: 'volume', name: 'cubic-m'},\n                {id: 10, type: 'volume', name: 'cubic-yd'},\n                {id: 11, type: 'volume', name: 'cup'},\n                {id: 12, type: 'volume', name: 'fluid-oz'},\n                {id: 13, type: 'volume', name: 'gallon'},\n                {id: 14, type: 'volume', name: 'liter'},\n                {id: 15, type: 'volume', name: 'milliliter'},\n                {id: 16, type: 'volume', name: 'ounce'},\n                {id: 17, type: 'volume', name: 'pint'},\n                {id: 18, type: 'volume', name: 'quart'},\n                {id: 19, type: 'volume', name: 'liters'},\n                {id: 20, type: 'volume', name: 'deciliters'},\n                {id: 21, type: 'volume', name: 'centiliters'},\n                {id: 22, type: 'volume', name: 'milliliters'},\n                {id: 23, type: 'volume', name: 'microliters'},\n                {id: 24, type: 'volume', name: 'nanoliters'},\n                {id: 25, type: 'volume', name: 'picoliters'},\n\n                {id: 26, type: 'length', name: 'MM'},\n                {id: 27, type: 'length', name: 'CM'},\n                {id: 28, type: 'length', name: 'M'},\n                {id: 29, type: 'length', name: 'IN'},\n                {id: 30, type: 'length', name: 'FT'},\n                {id: 31, type: 'length', name: 'inches'},\n                {id: 32, type: 'length', name: 'feet'},\n                {id: 33, type: 'length', name: 'meters'},\n                {id: 34, type: 'length', name: 'decimeters'},\n                {id: 35, type: 'length', name: 'centimeters'},\n                {id: 36, type: 'length', name: 'millimeters'},\n                {id: 37, type: 'length', name: 'micrometers'},\n                {id: 38, type: 'length', name: 'nanometers'},\n                {id: 39, type: 'length', name: 'picometers'}\n            ],\n            ebayColumns: [\n                {\n                    property: 'name',\n                    label: 'unitMapping.column.name'\n                }\n            ],\n            ebayUnitData: [\n                {id: 1, name: 'Kg'},\n                {id: 2, name: '100g'},\n                {id: 3, name: '10g'},\n                {id: 4, name: 'g'},\n                {id: 5, name: 'L'},\n                {id: 6, name: '100ml'},\n                {id: 7, name: '10ml'},\n                {id: 8, name: 'ml'},\n                {id: 9, name: 'M'},\n                {id: 10, name: 'M2'},\n                {id: 11, name: 'M3'},\n                {id: 12, name: 'Unit'}\n            ]\n        }\n    },\n    computed: {\n        gridColumns() {\n            return this.columns;\n        },\n        gridUnitData() {\n            return this.unitData;\n        }\n    },\n    created() {\n        this.bfUnitService.setSalesChannelId(this.$route.params.id);\n\n        this.isLoading = true;\n\n        this.bfUnitService.getSalesChannelType().then((response) => {\n            if (response === 'amazon') {\n                this.columns = this.amazonColumns;\n                this.unitData = this.amazonUnitData;\n            }\n\n            if (response === 'ebay') {\n                this.columns = this.ebayColumns;\n                this.unitData = this.ebayUnitData;\n            }\n\n            this.isLoading = false;\n        }).catch(() => {\n            this.isLoading = false;\n        });\n    },\n    methods: {\n        saveData() {\n            if (this.$refs['unitGrid'].selectionCount > 1) {\n                this.createNotificationWarning({\n                    title: this.$tc('unitMapping.notifications.title.warning'),\n                    message: this.$tc('unitMapping.notifications.message.warningTooManySelected')\n                })\n\n                return;\n            }\n\n            if (this.$refs['unitGrid'].selectionCount === 0) {\n                this.createNotificationWarning({\n                    title: this.$tc('unitMapping.notifications.title.warning'),\n                    message: this.$tc('unitMapping.notifications.message.warningNoSelection')\n                });\n\n                return;\n            }\n\n            const selection = Object.values(this.$refs['unitGrid'].selection)[0];\n\n            let data = this.currentData;\n\n            data.unitId = this.unit.externUnitsId;\n            data.externalValue = selection.name;\n\n            if (selection.hasOwnProperty('type')) {\n                data.measure = selection.type;\n            }\n\n            this.bfUnitService.saveUnitMappingData(data).then((response) => {\n                if (response.success) {\n                    this.createNotificationSuccess({\n                        title: this.$tc('unitMapping.notifications.title.success'),\n                        message: this.$tc('unitMapping.notifications.message.success')\n                    })\n                } else {\n                    this.createNotificationError({\n                        title: this.$tc('unitMapping.notifications.title.error'),\n                        message: this.$tc('unitMapping.notifications.message.error')\n                    })\n                }\n\n                this.$emit('modal-close');\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('unitMapping.notifications.title.error'),\n                    message: this.$tc('unitMapping.notifications.message.error')\n                })\n\n                this.$emit('modal-close');\n            });\n        }\n    }\n});\n","import template from './bf-sales-channel-detail-unit-mapping.html.twig';\n\nconst {Component, State} = Shopware;\n\nComponent.register('bf-sales-channel-detail-unit-mapping', {\n    template,\n    inject: [\n        'bfUnitService'\n    ],\n    data() {\n        return {\n            units: null,\n            unitMappings: null,\n            sortBy: 'name',\n            isLoading: false,\n            sortDirection: 'ASC'\n        };\n    },\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n        currentLocale() {\n            return State.get('session').currentLocale;\n        }\n    },\n    created() {\n        this.bfUnitService.setSalesChannelId(this.$route.params.id);\n        this.getList('*');\n    },\n    methods: {\n        getColumns() {\n            return [\n                {\n                    property: 'unitsDescription.' + this.currentLocale + '.unitsName',\n                    label: 'unitMapping.column.name',\n                    primary: true\n                },\n                {\n                    property: 'external_name',\n                    label: 'unitMapping.column.externalName'\n                }\n            ];\n        },\n        getList(name) {\n            this.isLoading = true;\n\n            this.bfUnitService.loadUnitMappingData().then((response) => {\n                this.unitMappings = response.data;\n\n                this.bfUnitService.loadUnitData(name).then((response) => {\n                    this.units = response.data;\n\n                    this.isLoading = false;\n                }).catch(() => {\n                    this.isLoading = false;\n                });\n            })\n        }\n    }\n});\n","import '../../state/category-mapping/category-mapping.state';\nimport '../../service/bf-category.service';\nimport '../../service/bf-property.service';\nimport '../../service/bf-unit.service';\nimport '../../service/bf-system-api.service';\nimport '../../service/bf-product-api.service';\nimport '../../service/bf-sales-channel.service';\nimport '../../service/bf-amazon.service';\nimport '../../service/bf-ebay.service';\nimport '../../service/bf-plugin-configuration.service';\n//Import overrides\nimport '../../app/component/entity/sw-category-tree-field-override';\nimport '../../app/component/base/sw-card-override';\n// Import overrides for sales channels\nimport './component/structure/bf-sales-channel-menu';\nimport './component/bf-sales-channel-modal';\nimport './component/bf-sales-channel-modal-grid';\nimport './component/bf-sales-channel-product-grid';\nimport './component/bf-contract';\nimport './component/bf-collapse';\nimport './component/bf-plugin-configuration';\nimport './component/bf-bookable-contracts';\nimport './component/bf-bookable-contracts/bf-bookable-contracts-permissions';\nimport './component/bf-bookable-contracts/bf-bookable-contracts-sub-processor';\nimport './component/bf-sales-channel-amazon-fba-prime-shipping-methods';\nimport './component/bf-sales-channel-amazon-extended-configuration';\nimport './component/bf-sales-channel-ebay-extended-configuration';\nimport './component/bf-sales-channel-ebay-best-offer';\nimport './component/bf-sales-channel-defaults-select-only';\n// Import sales channel detail\nimport './page/bf-sales-channel-detail';\nimport './view/bf-sales-channel-detail-base'\n// Import sales channel creation\nimport './page/bf-sales-channel-create';\nimport './view/bf-sales-channel-create-base';\n// Import sales channel amazon fba / prime tab\nimport './page/bf-sales-channel-amazon-fba-prime';\nimport './view/bf-sales-channel-detail-amazon-prime-fba';\n// Import sales channel category mapping\nimport './component/bf-sales-channel-category-mapping';\nimport './component/bf-sales-channel-category-mapping/bf-grid-column-tree-field';\nimport './component/bf-sales-channel-category-mapping-tree-field';\n// Import sales channel product listing\nimport './page/bf-sales-channel-product';\nimport './view/bf-sales-channel-detail-product-list';\nimport './component/bf-sales-channel-product-modal';\nimport './component/bf-sales-channel-amazon-asin-management';\nimport './component/bf-sales-channel-product-visibility-select';\nimport './component/bf-sales-channel-product-category-mapping';\nimport './component/bf-filter-panel';\n// Import sales channel property / custom field mapping\nimport './component/bf-sales-channel-property-mapping-grid';\nimport './component/bf-sales-channel-property-mapping-list';\nimport './component/bf-sales-channel-property-mapping-modal';\nimport './component/bf-sales-channel-variation-properties-grid';\nimport './component/bf-sales-channel-detail-custom-fields';\nimport './component/bf-sales-channel-detail-property-transfer';\nimport './component/bf-sales-channel-segment-mapping';\nimport './page/bf-sales-channel-mapping';\nimport './view/bf-sales-channel-detail-mapping';\n\n//attributes mapping\nimport \"./component/bf-sales-channel-attributes-mapping\";\n\n//segment mapping\nimport './component/bf-sales-channel-shopware-category-tree';\nimport './component/bf-sales-channel-shopware-segment-category-tree';\nimport './component/bf-sales-channel-shopware-segment-dropdown';\nimport './component/bf-sales-channel-marketplace-category-tree';\n\n// Import sales channel unit mapping\nimport './component/bf-sales-channel-unit-mapping-grid';\nimport './component/bf-sales-channel-unit-mapping-modal';\nimport './component/bf-sales-channel-detail-unit-mapping';\n\n//import snippets\nimport deDE from './snippet/de-DE.json';\nimport enEN from './snippet/en-EN.json';\n\nconst {Module} = Shopware;\n\nModule.register('bf-sales-channel', {\n    type: 'plugin',\n    name: 'brickfox-sales-channel',\n    description: 'Managing marketplace channels',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#0CD70A',\n    icon: 'default-action-share',\n    entity: 'sales_channel',\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enEN\n    },\n    routes: {\n        detail: {\n            component: 'bf-sales-channel-detail',\n            path: 'detail/:id',\n            redirect: {\n                name: 'bf.sales.channel.detail.base'\n            },\n            children: {\n                base: {\n                    component: 'bf-sales-channel-detail-base',\n                    path: 'base',\n                    children: {\n                        amazonConnectionAssistant: {\n                            component: 'bf-amazon-connection-assistant-index',\n                            path: 'amazonConnectionAssistant',\n                            children: {\n                                start: {\n                                    component: 'bf-amazon-connection-assistant-start',\n                                    path: 'start',\n                                    children: {\n                                        authorize: {\n                                            component: 'bf-amazon-connection-assistant-start-authorize',\n                                            path: 'authorize'\n                                        }\n                                    }\n                                },\n                                account: {\n                                    component: 'bf-amazon-connection-assistant-account',\n                                    path: 'account',\n                                    children: {\n                                        marketplace: {\n                                            component: 'bf-amazon-connection-assistant-account-marketplace',\n                                            path: 'marketplace'\n                                        },\n                                        'product-check': {\n                                            component: 'bf-amazon-connection-assistant-account-product',\n                                            path: 'product-check'\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        ebayConnectionAssistant: {\n                            component: 'bf-ebay-connection-assistant-index',\n                            path: 'ebayConnectionAssistant',\n                            children: {\n                                start: {\n                                    component: 'bf-ebay-connection-assistant-start',\n                                    path: 'start',\n                                    children: {\n                                        authorize: {\n                                            component: 'bf-ebay-connection-assistant-start-authorize',\n                                            path: 'authorize'\n                                        },\n                                        'authorize-oauth': {\n                                            component: 'bf-ebay-connection-assistant-start-authorize-oauth',\n                                            path: 'authorize-oauth'\n                                        }\n                                    }\n                                },\n                                account: {\n                                    component: 'bf-ebay-connection-assistant-account',\n                                    path: 'account',\n                                    children: {\n                                        marketplace: {\n                                            component: 'bf-ebay-connection-assistant-account-marketplace',\n                                            path: 'marketplace'\n                                        },\n                                        'product-check': {\n                                            component: 'bf-ebay-connection-assistant-account-product',\n                                            path: 'product-check'\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                product: {\n                    component: 'bf-sales-channel-detail-product-list',\n                    path: 'product',\n                    children: {\n                        detail: {\n                            path: 'detail/:productId',\n                            component: 'bf-sales-channel-detail-product-detail'\n                        }\n                    }\n                },\n                mapping: {\n                    component: 'bf-sales-channel-detail-mapping',\n                    path: 'mapping'\n                },\n                unit: {\n                    component: 'bf-sales-channel-detail-unit-mapping',\n                    path: 'unit-mapping'\n                },\n                'amazon-fba-prime': {\n                    component: 'bf-sales-channel-detail-amazon-prime-fba',\n                    path: 'amazon-fba-prime'\n                }\n            }\n        },\n        create: {\n            component: 'bf-sales-channel-create',\n            path: 'create/:typeId',\n            redirect: {\n                name: 'bf.sales.channel.create.base'\n            },\n            children: {\n                base: {\n                    component: 'bf-sales-channel-create-base',\n                    path: 'base'\n                }\n            }\n        }\n    },\n\n    getSalesChannelByTypeId: function (salesChannelTypeId) {\n        switch (salesChannelTypeId) {\n            case '26a9ece25bd14b288b30c3d71e667d2c':\n                return 'amazon';\n            case '7ff39608fed04e4bbcc62710b7223966':\n                return 'ebay';\n            default:\n                return '';\n        }\n    }\n});\n","import template from './bf-support.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('bf-support', {\n    template,\n    inject: [\n        'repositoryFactory',\n        'bfSupportService'\n    ],\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('salutation')\n    ],\n    props: {\n        showSupportModal: {\n            type: Boolean,\n            default: false\n        },\n        supportTitle: {\n            type: String,\n            default: ''\n        },\n        requestType: {\n            type: String,\n            default: ''\n        },\n        marketplace: {\n            type: String,\n            default: ''\n        }\n    },\n    created() {\n        this.prepareSupportTitle();\n    },\n    data() {\n        return {\n            isLoading: false,\n            userForm: {\n                salutationId: '',\n                name: '',\n                company: '',\n                phoneNumber: '',\n                email: '',\n                message: '',\n                requestAccept: false\n            },\n            errors: {}\n        }\n    },\n    methods: {\n        sendRequest() {\n            this.isLoading = true;\n            this.getErrorsVariables();\n\n            let requestParams = this.userForm;\n\n            requestParams.salesChannelId = this.$route.params.id;\n            requestParams.requestSubject = this.supportTitle;\n            requestParams.marketplace = this.marketplace;\n            requestParams.requestType = this.requestType;\n            requestParams.languageCode = localStorage.getItem('sw-admin-locale');\n\n            this.bfSupportService.sendRequest(this.userForm)\n                .then((response) => {\n                    if (response && response.status === 201) {\n                        this.$emit('closeSupportModal');\n\n                        this.createNotificationSuccess({\n                            title: this.$tc('bf-support.notification.success.title'),\n                            message: this.$tc('bf-support.notification.success.message')\n                        });\n                    } else {\n                        response.data.forEach((error, key) => {\n                            let propertyName = error.propertyPath,\n                                capitalizedProperty = propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n\n                            this.errors['support' + capitalizedProperty + 'Error'] = this.getErrorCode(error);\n                        });\n                    }\n\n                    this.isLoading = false;\n                })\n                .catch((errors) => {\n                    this.createNotificationError({\n                        title: this.$tc('bf-support.notification.error.title'),\n                        message: this.$tc('bf-support.notification.error.message')\n                    });\n\n                    this.isLoading = false;\n                });\n\n        },\n        getModalTitle() {\n            let title = this.supportTitle;\n\n            if (this.marketplace) {\n                title += ' ' + this.marketplace;\n            }\n\n            return title;\n        },\n        getErrorCode(error) {\n            return {\n                code: error.code\n            }\n        },\n        getErrorsVariables() {\n            this.errors = {\n                supportSalutationIdError: null,\n                supportNameError: null,\n                supportCompanyError: null,\n                supportEmailError: null,\n                supportPhoneNumberError: null,\n                supportMessageError: null\n            }\n        },\n        prepareSupportTitle() {\n            if (this.supportTitle === '') {\n                this.supportTitle = this.$tc('bf-support.modal.titleSupport');\n            }\n        }\n    }\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-marketplace-category-tree.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2c5ec822\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_page %}\\n    <div class=\\\"bf-ebay-connection-assistant\\\">\\n        {% block bf_ebay_connection_assistant_page_content %}\\n            <bf-ebay-connection-assistant-modal />\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-modal.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3d8a6b63\", content, true, {});","module.exports = \"{% block bf_sales_channel_detail_base_contract %}\\n<div class=\\\"bf-contract\\\">\\n    <sw-container\\n        v-if=\\\"userAuthorised && currentContract.name === undefined\\\"\\n        columns=\\\"1fr\\\"\\n        class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n        <sw-alert\\n            variant=\\\"warning\\\"\\n            appearance=\\\"notification\\\"\\n            :closable=\\\"false\\\">\\n            {{$tc('salesChannel-connectionAssistant.connectionNotAvailable')}} <br><br>\\n            <sw-button\\n                :disabled=\\\"false\\\"\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                :square=\\\"false\\\"\\n                :block=\\\"false\\\"\\n                :isLoading=\\\"false\\\"\\n                @click=\\\"openContractModal\\\"\\n            >\\n                {{$tc('salesChannel-connectionAssistant.chooseContract')}}\\n            </sw-button>\\n        </sw-alert>\\n    </sw-container>\\n\\n    <sw-container\\n        v-if=\\\"!userAuthorised\\\"\\n        columns=\\\"1fr\\\"\\n        class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n        <sw-alert\\n            variant=\\\"warning\\\"\\n            appearance=\\\"notification\\\"\\n            :closable=\\\"false\\\">\\n            <p>\\n                {{ $tc('bf-sales-channel.detail.notAuthorisedText') }}\\n            </p>\\n\\n            <sw-button\\n                :disabled=\\\"false\\\"\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                :square=\\\"false\\\"\\n                :block=\\\"false\\\"\\n                :isLoading=\\\"false\\\"\\n                @click=\\\"showLoginModal = true\\\"\\n            >\\n                {{ $tc('global.login') }}\\n            </sw-button>\\n        </sw-alert>\\n    </sw-container>\\n\\n    <sw-card v-if=\\\"userAuthorised && currentContract.name\\\" :isLoading=\\\"isLoading\\\" :title=\\\"$tc('bf-sales-channel.detail.contractLabel')\\\">\\n        <sw-container columns=\\\"1fr 1fr\\\" class=\\\"border-bottom\\\">\\n            <div>\\n                <div v-if=\\\"currentContract.name === undefined\\\">\\n                    <strong>\\n                        {{ $tc('bf-sales-channel.detail.withoutContractTitle') }}\\n                    </strong>\\n                </div>\\n                <div v-else class=\\\"sw-sales-channel-detail-base__description-text\\\">\\n                    <div>\\n                        <sw-icon name=\\\"default-basic-checkmark-circle\\\" color=\\\"#37D046\\\" :small=\\\"true\\\"></sw-icon>\\n                        <strong class=\\\"active-license-status\\\">\\n                            {{ currentContract.label }}\\n                        </strong>\\n                    </div>\\n                    <div class=\\\"p-l\\\">\\n                        &euro; {{ currentContract.minPricePerMonth ?? 0 }} / {{ $tc('bf-sales-channel.contractModal.month') }}\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"contract-status-section text-right\\\">\\n                <span class=\\\"status active\\\">\\n                    <sw-color-badge color=\\\"#37D046\\\" rounded></sw-color-badge>\\n                    <strong class=\\\"capitalize\\\">\\n                        {{ $tc('bf-sales-channel.detail.labelInputActive') }}\\n                    </strong>\\n                </span>\\n            </div>\\n        </sw-container>\\n\\n        <sw-container columns=\\\"1fr 1fr 1fr 1fr\\\" class=\\\"contract-details\\\">\\n            <div>\\n                <strong>{{ $tc('bf-sales-channel.detail.labelActiveSince') }}</strong></br>\\n                {{ formatDate(currentContract.creationDate) }}\\n            </div>\\n            <div>\\n                <strong>{{ $tc('bf-sales-channel.detail.labelNextBilling') }}</strong></br>\\n                {{ formatDate(currentContract.facturaDate) }}\\n            </div>\\n            <div class=\\\"text-right\\\">\\n                <sw-button @click=\\\"showAgbDialog(currentContract, 'cancel')\\\">\\n                    {{ $tc('bf-sales-channel.contractModal.buttonRemove') }}\\n                </sw-button>\\n            </div>\\n            <div class=\\\"text-right\\\">\\n                <sw-button variant=\\\"ghost\\\" @click=\\\"openContractModal\\\">\\n                    {{ $tc('bf-sales-channel.detail.contractButton') }}\\n                </sw-button>\\n            </div>\\n        </sw-container>\\n    </sw-card>\\n\\n    {% block bf_sales_channel_detail_base_contract_modal %}\\n    <sw-modal\\n        v-if=\\\"showContractModal && userAuthorised\\\"\\n        class=\\\"bf-sales-channel-detail-base__modal-contract\\\"\\n        ref=\\\"modal\\\"\\n        variant=\\\"large\\\"\\n        :title=\\\"$tc('bf-sales-channel.contractModal.title')\\\"\\n        @modal-close=\\\"onCloseContractModal\\\"\\n    >\\n        {% block bf_sales_channel_detail_base_contract_modal_confirm_text %}\\n            <bf-bookable-contracts\\n                :bookableContracts=\\\"bookableContracts\\\"\\n                :currentContract=\\\"currentContract\\\"\\n                @setNewContract=\\\"showAgbDialog\\\"\\n                @onRemoveContract=\\\"showAgbDialog\\\"\\n                @openPermissionModal=\\\"openPermissionModal\\\"\\n                @openSubProcessorModal=\\\"openSubProcessorModal\\\"\\n            ></bf-bookable-contracts>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_base_contract_modal_footer %}\\n        <template slot=\\\"modal-footer\\\">\\n            {% block bf_sales_channel_detail_contract_modal_footer_abort %}\\n            <sw-button size=\\\"small\\\" @click=\\\"onCloseContractModal\\\">\\n                {{ $tc('sw-sales-channel.detail.buttonCloseDeleteModal') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n    {% block bf_sales_channel_detail_base_contract_cancel_modal %}\\n    <sw-modal\\n        v-if=\\\"showContractCancelModal\\\"\\n        class=\\\"bf-sales-channel-detail-base__modal-contract\\\"\\n        ref=\\\"modal\\\"\\n        :title=\\\"$tc('bf-sales-channel.contractCancelModal.title')\\\"\\n        @modal-close=\\\"onCloseContractCancelModal\\\"\\n    >\\n        {% block bf_sales_channel_detail_base_contract_cancel_modal_confirm_text %}\\n        <p>\\n            {{ $tc('bf-sales-channel.contractCancelModal.text', selectedContract.name,{ name: selectedContract.name }) }}\\n        </p>\\n        <p>\\n            <sw-checkbox-field\\n                :label=\\\"$tc('bf-sales-channel.contractCancelModal.agreementWithCancelingLabel')\\\"\\n                @change=\\\"confirmedAgb = $event\\\"\\n            ></sw-checkbox-field>\\n        </p>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_base_contract_cancel_modal_footer %}\\n        <template slot=\\\"modal-footer\\\">\\n            {% block bf_sales_channel_detail_contract_cancel_modal_footer_abort %}\\n            <sw-button size=\\\"small\\\" @click=\\\"onCloseContractCancelModal\\\">\\n                {{ $tc('sw-sales-channel.detail.buttonCloseDeleteModal') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            {% block bf_sales_channel_detail_contract_cancel_modal_footer_confirm %}\\n            <sw-button size=\\\"small\\\" @click=\\\"onRemoveContract\\\" variant=\\\"danger\\\" :disabled=\\\"!confirmedAgb\\\">\\n                {{ $tc('bf-sales-channel.contractModal.buttonRemove') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n    {% block sw_plugin_store_login_status_login_modal %}\\n        <sw-modal :title=\\\"$tc('sw-extension.my-extensions.tabs.shopwareAccount')\\\" v-if=\\\"showLoginModal\\\" @modal-close=\\\"closeLoginModal\\\">\\n            <sw-extension-my-extensions-account></sw-extension-my-extensions-account>\\n        </sw-modal>\\n    {% endblock %}\\n\\n    {% block swag_markets_permissions__modal %}\\n        <sw-modal v-if=\\\"showPermissions\\\"\\n                  @modal-close=\\\"closePermissionsModal\\\"\\n                  :title=\\\"$tc('bf-sales-channel.contractModal.permissionsModalTitle')\\\">\\n            <bf-bookable-contracts-permissions @go-to-sub-processor=\\\"closePermissionsModal\\\"></bf-bookable-contracts-permissions>\\n            {% block swag_markets_permissions_modal_footer %}\\n                <template slot=\\\"modal-footer\\\">\\n                    {% block swag_markets_permissions_modal_footer__close %}\\n                        <sw-button size=\\\"small\\\" @click=\\\"closePermissionsModal\\\" variant=\\\"primary\\\">\\n                            {{ $tc('bf-sales-channel.contractModal.permissionsClose') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n    {% endblock %}\\n\\n    {% block swag_markets_sub_processor__modal %}\\n        <sw-modal v-if=\\\"showSubProcessor\\\" @modal-close=\\\"closeSubProcessorModal\\\" :title=\\\"$tc('bf-sales-channel.contractModal.subProcessorTitle')\\\">\\n            <bf-bookable-contracts-sub-processor :subProcessorData=\\\"subProcessorData\\\"></bf-bookable-contracts-sub-processor>\\n            {% block swag_markets_sub_processor_modal_footer %}\\n                <template slot=\\\"modal-footer\\\">\\n                    {% block swag_markets_sub_processor_modal_footer__close %}\\n                        <sw-button size=\\\"small\\\" @click=\\\"closeSubProcessorModal\\\" variant=\\\"primary\\\">\\n                            {{ $tc('bf-sales-channel.contractModal.permissionsClose') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_amazon_prime_fba %}\\n    <div>\\n        <bf-sales-channel-amazon-extended-configuration\\n            :isSalesChannelAmazon=\\\"isSalesChannelAmazon\\\"\\n            :salesChannel=\\\"salesChannel\\\"\\n            :currentContractName=\\\"currentContractName\\\"\\n            :clientExists=\\\"clientExists\\\"\\n            :clientInProgress=\\\"clientInProgress\\\"\\n        ></bf-sales-channel-amazon-extended-configuration>\\n        <bf-sales-channel-amazon-fba-prime-shipping-methods\\n            :isSalesChannelAmazon=\\\"isSalesChannelAmazon\\\"\\n            :salesChannel=\\\"salesChannel\\\"\\n            :currentContractName=\\\"currentContractName\\\"\\n            :clientExists=\\\"clientExists\\\"\\n            :clientInProgress=\\\"clientInProgress\\\"\\n        ></bf-sales-channel-amazon-fba-prime-shipping-methods>\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_card_title %}\\n    <slot name=\\\"title\\\">\\n        <div class=\\\"sw-card__title\\\" v-if=\\\"title\\\">{{ title }}\\n            <sw-help-text v-if=\\\"showHelpTextIcon\\\" :text=\\\"helpTextDescription\\\" :width=\\\"helpTextWidth\\\" tooltipPosition=\\\"top\\\">\\n            </sw-help-text>\\n        </div>\\n    </slot>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_content_tab %}\\n    {% parent %}\\n    <sw-tabs-item\\n            :disabled=\\\"!clientExists || clientInProgress\\\"\\n            :route=\\\"{ name: 'bf.sales.channel.detail.product', params: { id: $route.params.id } }\\\">\\n        {{ $tc('products.tab-title') }}\\n    </sw-tabs-item>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_variation_properties_grid %}\\n    <div class=\\\"bf-sales-channel-variation-properties-grid--content\\\">\\n        <sw-card class=\\\"bf-card\\\"\\n                 :title=\\\"$tc('propertyMapping.card-title.variationProperties')\\\"\\n                 :showHelpTextIcon=\\\"true\\\"\\n                 :helpTextDescription=\\\"$tc('propertyMapping.information.message')\\\"\\n                 :helpTextWidth=\\\"500\\\">\\n            <sw-data-grid\\n                :dataSource=\\\"variationProperties\\\"\\n                :columns=\\\"getColumns\\\"\\n                :showSelection=\\\"false\\\"\\n                :showActions=\\\"showActions\\\"\\n                :allowColumnEdit=\\\"false\\\"\\n                :allowInlineEdit=\\\"true\\\"\\n                @dblclick=\\\"onDbClickCell\\\"\\n                @inline-edit-save=\\\"onInlineEditSave\\\"\\n                identifer=\\\"bf-sales-channel-variation-properties-grid\\\"\\n                :isLoading=\\\"isLoading\\\">\\n                {% block sw_data_grid_columns_slot %}\\n\\n                    <template #column-selectedVariation=\\\"{item, isInlineEdit}\\\">\\n                        <template v-if=\\\"isInlineEdit\\\">\\n                            <sw-single-select\\n                                v-model=\\\"item.selectedVariation\\\"\\n                                :options=\\\"[\\n                                    { value: 'Color', label: 'Color'},\\n                                    { value: 'Size', label: 'Size'}\\n                                ]\\\"\\n                                :value=\\\"item.selectedVariation\\\"\\n                                size=\\\"small\\\">\\n                            </sw-single-select>\\n                        </template>\\n                        <template v-else>\\n                            {{ item.selectedVariation }}\\n                        </template>\\n                    </template>\\n                    <template #actions=\\\"{ item }\\\">\\n                        {{ $tc('propertyMapping.product-variant-properties.edit') }}\\n                    </template>\\n                {% endblock %}\\n            </sw-data-grid>\\n            {% block swag_markets_variation_properties_grid_empty_state %}\\n                <sw-empty-state\\n                    v-if=\\\"showEmptyStateVariationProperties\\\"\\n                    :absolute=\\\"false\\\"\\n                    :title=\\\"$tc('propertyMapping.variationProperties.emptyState')\\\"\\n                    :showDescription=\\\"false\\\">\\n                </sw-empty-state>\\n            {% endblock %}\\n            {% block swag_markets_variations_properties_grid__pagination %}\\n                <sw-pagination :total=\\\"total\\\"\\n                               :limit=\\\"limit\\\"\\n                               :page=\\\"page\\\"\\n                               @page-change=\\\"pageChange\\\"\\n                               :steps=\\\"[5, 10]\\\">\\n                </sw-pagination>\\n            {% endblock %}\\n        </sw-card>\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_ebay_extended_configuration %}\\n<sw-card\\n    v-if=\\\"isSalesChannelEbay\\\"\\n    :title=\\\"$tc('salesChannelSettings.card.title.extendedSettings')\\\">\\n    <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n    </sw-alert>\\n\\n    <sw-switch-field\\n        :label=\\\"$tc('salesChannelSettings.ebay.label.enableEbayPlus')\\\"\\n        :value=\\\"salesChannel && salesChannel.ebayPlus\\\"\\n        :ghostValue=\\\"false\\\"\\n        :noMarginTop=\\\"true\\\"\\n        :helpText=\\\"$tc('salesChannelSettings.ebay.helpText.ebayPlus')\\\"\\n        :disabled=\\\"isDisabled\\\"\\n        size=\\\"small\\\"\\n        @change=\\\"salesChannel.ebayPlus = $event\\\"\\n    >\\n    </sw-switch-field>\\n</sw-card>\\n{% endblock %}\\n\";","const { Component } = Shopware;\nconst { debounce, sort } = Shopware.Utils;\n\nComponent.extend('bf-product-category-mapping-tree', 'sw-tree', {\n    methods: {\n        getTreeItems(parentId) {\n            const treeItems = [];\n\n            this.items.forEach((item) => {\n                if (item.isDeleted) {\n                    return;\n                }\n\n                if (parentId === null && typeof this.items.find(i => i.id === item.parentId) !== 'undefined') {\n                    return;\n                }\n\n                if (parentId !== null && item[this.parentProperty] !== parentId) {\n                    return;\n                }\n\n                item.id = item.id.toString();\n\n                treeItems.push({\n                    data: item,\n                    id: item.id.toString(),\n                    parentId: parentId,\n                    childCount: item[this.childCountProperty],\n                    children: this.getTreeItems(item.id),\n                    initialOpened: false,\n                    active: false,\n                    checked: !!this.checkItemsInitial,\n                    [this.afterIdProperty]: item[this.afterIdProperty]\n                });\n            });\n\n            return sort.afterSort(treeItems, this.afterIdProperty);\n        }\n    }\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-modal.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"25cae4e1\", content, true, {});","module.exports = \"{% block bf_amazon_connection_assistant_account_product %}\\n    <div class=\\\"bf-amazon-connection-assistant-account-product__content\\\">\\n        {% block bf_amazon_connection_assistant_account_product_content_information %}\\n            <sw-card-section class=\\\"bf-amazon-connection-assistant-modal__content-description\\\">\\n                {{ $tc('amazon.productCheckDescription') }}\\n            </sw-card-section>\\n            <div v-if=\\\"hasRetailerProducts\\\" class=\\\"bf-amazon-connection-assistant-account-product__content-information\\\">\\n                {% block bf_amazon_connection_assistant_account_product_content_information_warning %}\\n                    <sw-alert variant=\\\"warning\\\" v-if=\\\"hasRetailerProducts\\\"\\n                              class=\\\"bf-amazon-connection-assistant-account-product__content-information-warning\\\">\\n                        {{ $tc('amazon.productCheckAccountHasAlreadyProducts') }}\\n                    </sw-alert>\\n                {% endblock %}\\n                {% block bf_amazon_connection_assistant_account_product_content_information_takeover %}\\n                    <div class=\\\"bf-amazon-connection-assistant-account-product__content-information-takeover\\\">\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_takeover_title %}\\n                            <h6 class=\\\"title\\\">{{ $tc('amazon.productCheckBookTransferTitle') }}</h6>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_takeover_content %}\\n                            <p>{{ $tc('amazon.productCheckBookTransferContent') }}</p>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_takeover_link %}\\n                        <sw-button\\n                            size=\\\"small\\\"\\n                            variant=\\\"contrast\\\"\\n                            @click=\\\"$emit('showSupportModal')\\\"\\n                            class=\\\"bf-amazon-connection-assistant-account-product-content-information-delete-button\\\">\\n                            {{ $tc('amazon.productCheckBookTransfer') }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n                {% block bf_amazon_connection_assistant_account_product_content_information_delete %}\\n                    <div class=\\\"bf-amazon-connection-assistant-account-product__content-information-delete\\\">\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_delete_title %}\\n                            <h6 class=\\\"title\\\">{{ $tc('amazon.productCheckDeleteExistingTitle') }}</h6>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_delete_content %}\\n                            <p>{{ $tc('amazon.productCheckDeleteExistingContent') }}</p>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_account_product_content_information_delete_button %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                variant=\\\"danger\\\"\\n                                link=\\\"https://sellercentral.amazon.de/\\\"\\n                                class=\\\"bf-amazon-connection-assistant-account-product-content-information-delete-button\\\">\\n                                {{ $tc('amazon.productCheckDeleteExistingBtn') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </div>\\n            <div v-if=\\\"!hasRetailerProducts && hasRetailerProducts !== null\\\" class=\\\"bf-amazon-connection-assistant-account-product__content-information\\\">\\n                {% block bf_amazon_connection_assistant_account_product_content_information_success %}\\n                    <sw-alert variant=\\\"success\\\"\\n                              class=\\\"bf-amazon-connection-assistant-account-product__content-information-success\\\">\\n                        {{ $tc('amazon.productCheckCongrats') }}\\n                    </sw-alert>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        <sw-container align=\\\"end\\\" justify=\\\"end\\\"\\n                      class=\\\"bf-amazon-connection-assistant-account-product__content-button-check\\\">\\n            {% block bf_amazon_connection_assistant_accout_product_check_button %}\\n                <sw-button\\n                    v-if=\\\"hasRetailerProducts || hasRetailerProducts === null\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"primary\\\"\\n                    :block=\\\"true\\\"\\n                    @click=\\\"productCheck\\\"\\n                    v-tooltip=\\\"tooltip\\\">\\n                    {{$tc('amazon.productCheckBtn')}}\\n                </sw-button>\\n            {% endblock %}\\n        </sw-container>\\n        {% block bf_amazon_connection_assistant_confirm_finish_modal %}\\n        <sw-modal\\n            :title=\\\"$t('amazon.amazonConfirmFinishModalTitle')\\\"\\n            v-if=\\\"showConfirmModal\\\"\\n            variant=\\\"small\\\"\\n            @modal-close=\\\"closeModal\\\">\\n            {% block bf_amazon_connection_assistant_confirm_fnish_modal_content %}\\n                <sw-card>\\n                    {{ $tc('amazon.amazonConfirmFinishModalMessageFirstPart') }}<br>\\n                    {{ $tc('amazon.amazonConfirmFinishModalMessageSecondPart') }}\\n                </sw-card>\\n            {% endblock %}\\n            {% block bf_amazon_connection_assistant_confirm_finish_footer %}\\n                <template #modal-footer>\\n                    <sw-button size=\\\"small\\\" @click=\\\"closeModal\\\">\\n                        {{ $tc('button.cancel') }}\\n                    </sw-button>\\n                    <sw-button size=\\\"small\\\" variant=\\\"primary\\\" @click=\\\"confirmFinishModal\\\">\\n                        {{ $tc('button.finish') }}\\n                    </sw-button>\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_support %}\\n<sw-modal\\n    v-if=\\\"showSupportModal\\\"\\n    ref=\\\"modal\\\"\\n    variant=\\\"small\\\"\\n    :title=\\\"getModalTitle()\\\"\\n    :isLoading=\\\"isLoading\\\"\\n    @modal-close=\\\"$emit('closeSupportModal')\\\"\\n>\\n    {% block bf_support_form %}\\n        <sw-container gap=\\\"0px 32px\\\">\\n            <sw-container columns=\\\"150px 1fr\\\" gap=\\\"32px\\\">\\n                {% block bf_support_form_salutation_field %}\\n                    <sw-entity-single-select\\n                        required\\n                        validation=\\\"required\\\"\\n                        class=\\\"sw-customer-base-form__salutation-select\\\"\\n                        entity=\\\"salutation\\\"\\n                        labelProperty=\\\"displayName\\\"\\n                        v-model=\\\"userForm.salutationId\\\"\\n                        :label=\\\"$tc('sw-customer.baseForm.labelSalutation')\\\"\\n                        :placeholder=\\\"$tc('sw-customer.baseForm.placeholderSalutation')\\\"\\n                        :error=\\\"errors.supportSalutationIdError\\\">\\n                    </sw-entity-single-select>\\n                {% endblock %}\\n\\n                {% block bf_support_form_name_field %}\\n                    <sw-text-field\\n                        required\\n                        validation=\\\"required\\\"\\n                        v-model=\\\"userForm.name\\\"\\n                        placeholder=\\\"Max Mustermann\\\"\\n                        :label=\\\"$tc('bf-support.modal.nameFieldLabel')\\\"\\n                        :error=\\\"errors.supportNameError\\\">\\n                    </sw-text-field>\\n                {% endblock %}\\n            </sw-container>\\n\\n            <sw-container columns=\\\"1fr\\\">\\n                {% block bf_support_form_company_field %}\\n                    <sw-text-field\\n                        required\\n                        placeholder=\\\"Shopware AG\\\"\\n                        :label=\\\"$tc('sw-customer.addressForm.labelCompany')\\\"\\n                        :error=\\\"errors.supportCompanyError\\\"\\n                        v-model=\\\"userForm.company\\\">\\n                    </sw-text-field>\\n                {% endblock %}\\n\\n                {% block bf_support_form_email_field %}\\n                    <sw-text-field\\n                        required\\n                        placeholder=\\\"example@mail.com\\\"\\n                        :label=\\\"$tc('sw-customer.baseForm.labelEmail')\\\"\\n                        :error=\\\"errors.supportEmailError\\\"\\n                        v-model=\\\"userForm.email\\\">\\n                    </sw-text-field>\\n                {% endblock %}\\n\\n                {% block bf_support_form_phone_field %}\\n                    <sw-text-field\\n                        placeholder=\\\"+49 30 343262211\\\"\\n                        v-model=\\\"userForm.phoneNumber\\\"\\n                        :label=\\\"$tc('sw-customer.addressForm.labelPhoneNumber')\\\"\\n                        :error=\\\"errors.supportPhoneNumberError\\\">\\n                    </sw-text-field>\\n                {% endblock %}\\n\\n                {% block bf_support_message_field %}\\n                    <sw-textarea-field\\n                        type=\\\"textarea\\\"\\n                        v-model=\\\"userForm.message\\\"\\n                        :label=\\\"$tc('bf-support.modal.labelMessage')\\\"\\n                        :placeholder=\\\"$tc('bf-support.modal.messagePlaceholder')\\\"\\n                        :error=\\\"errors.supportMessageError\\\"\\n                    ></sw-textarea-field>\\n                {% endblock %}\\n\\n                {% block bf_support_accept_checkbox %}\\n                    <sw-checkbox-field\\n                        :label=\\\"$tc('bf-support.modal.agreementWithSendToBrickfox')\\\"\\n                        @change=\\\"userForm.requestAccept = $event\\\"\\n                    ></sw-checkbox-field>\\n                {% endblock %}\\n            </sw-container>\\n        </sw-container>\\n    {% endblock %}\\n\\n    {% block bf_support_modal_footer %}\\n    <template slot=\\\"modal-footer\\\">\\n        {% block bf_support_footer_abort %}\\n        <sw-button size=\\\"small\\\" @click=\\\"$emit('closeSupportModal')\\\">\\n            {{ $tc('sw-sales-channel.detail.buttonCloseDeleteModal') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        {% block bf_support_footer_send_request %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"!userForm.requestAccept\\\"\\n            :isLoading=\\\"isLoading\\\"\\n            @click=\\\"sendRequest\\\">\\n            {{ $tc('bf-support.modal.buttonSendRequest') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_property_transfer %}\\n<div>\\n    <sw-container columns=\\\"1fr\\\" class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n        <sw-alert variant=\\\"warning\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n            {{ $tc('bf-property-transfer.tab.warningText') }}\\n        </sw-alert>\\n        <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :closable=\\\"false\\\">\\n            {{ $tc('bf-property-transfer.tab.text') }}\\n        </sw-alert>\\n    </sw-container>\\n\\n    <sw-card class=\\\"bf-card\\\" :title=\\\"$tc('bf-property-transfer.tab.label')\\\">\\n        <div class=\\\"bf_property_mapping\\\">\\n            {% block sw_property_list_grid %}\\n            <sw-entity-listing :items=\\\"propertyGroup\\\"\\n                               :columns=\\\"getPropertyColumns()\\\"\\n                               :repository=\\\"propertyRepository\\\"\\n                               ref=\\\"propertyList\\\"\\n                               :showSelection=\\\"false\\\"\\n                               :showActions=\\\"false\\\"\\n                               :fullPage=\\\"false\\\"\\n                               :sortBy=\\\"sortBy\\\"\\n                               :sortDirection=\\\"sortDirection\\\"\\n                               :isLoading=\\\"isLoading\\\"\\n                               :allowColumnEdit=\\\"false\\\"\\n                               :compactMode=\\\"true\\\"\\n                               identifier=\\\"sw-properties-list\\\"\\n                               @column-sort=\\\"onSortColumn\\\">\\n\\n                {% block sw_property_list_grid_bound %}\\n                <template slot=\\\"column-transfer\\\" slot-scope=\\\"{ item }\\\">\\n                    <sw-field\\n                        :disabled=\\\"false\\\"\\n                        @change=\\\"toggleItemCheck($event, item)\\\"\\n                        type=\\\"checkbox\\\"\\n                        :value=\\\"checked(item)\\\">\\n                    </sw-field>\\n                </template>\\n                {% endblock %}\\n\\n            </sw-entity-listing>\\n            {% endblock %}\\n        </div>\\n    </sw-card>\\n</div>\\n{% endblock %}\\n\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-category-mapping-tree-field.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9a0b503e\", content, true, {});","module.exports = \"{% block sw_sales_channel_defaults_select %}\\n<sw-container :title=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethods')\\\"\\n              :isLoading=\\\"loadingPaymentMatching\\\"\\n              class=\\\"bf-sales-channel-ebay-payment-methods\\\">\\n    {% block bf_sales_channel_ebay_payment_container__content %}\\n    <sw-container columns=\\\"1fr 1fr 1fr\\\" gap=\\\"2em\\\">\\n        {%  block bf_sales_channel_payment_container_selects__PayPal %}\\n            <sw-select-field\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethodPayPal')\\\"\\n                :options=\\\"payments\\\"\\n                @change=\\\"changedEbayPayment($event,'payPal')\\\"\\n                :value=\\\"selectedPayment.payPal.id\\\"\\n                required>\\n            </sw-select-field>\\n        {% endblock %}\\n        {%  block bf_sales_channel_payment_container_selects__MoneyXferAcceptedInCheckout %}\\n            <sw-select-field\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethodMoneyXferAcceptedInCheckout')\\\"\\n                :options=\\\"payments\\\"\\n                @change=\\\"changedEbayPayment($event,'moneyXferAcceptedInCheckout')\\\"\\n                :value=\\\"selectedPayment.moneyXferAcceptedInCheckout.id\\\"\\n                required>\\n            </sw-select-field>\\n        {% endblock %}\\n        {%  block bf_sales_channel_payment_container_selects__CashOnPickup %}\\n            <sw-select-field\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethodCashOnPickup')\\\"\\n                :options=\\\"payments\\\"\\n                @change=\\\"changedEbayPayment($event,'cashOnPickup')\\\"\\n                :value=\\\"selectedPayment.cashOnPickup.id\\\"\\n                required>\\n            </sw-select-field>\\n        {% endblock %}\\n        {%  block bf_sales_channel_payment_container_selects__COD %}\\n            <sw-select-field\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethodCod')\\\"\\n                :options=\\\"payments\\\"\\n                @change=\\\"changedEbayPayment($event,'cod')\\\"\\n                :value=\\\"selectedPayment.cod.id\\\"\\n                required>\\n            </sw-select-field>\\n        {% endblock %}\\n        {%  block bf_sales_channel_payment_container_selects__EbayPayments %}\\n            <sw-select-field\\n                :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentMethodEbayPayments')\\\"\\n                :options=\\\"payments\\\"\\n                @change=\\\"changedEbayPayment($event,'ebayPayments')\\\"\\n                :value=\\\"selectedPayment.ebayPayments.id\\\"\\n                required>\\n            </sw-select-field>\\n        {% endblock %}\\n    {% endblock %}\\n    </sw-container>\\n</sw-container>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-detail-mapping.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"73ebcbec\", content, true, {});","module.exports = \"{% block swag_markets_properties_mapping %}\\n    <div>\\n        {% block swag_markets_properties_grid__content %}\\n            <sw-data-grid\\n                v-if=\\\"!showEmptyState\\\"\\n                :dataSource=\\\"propertiesMapping\\\"\\n                :columns=\\\"columns\\\"\\n                :allowInlineEdit=\\\"true\\\"\\n                @inline-edit-save=\\\"saveInlineEdit\\\"\\n                :showSelection=\\\"false\\\"\\n                :plainAppearance=\\\"true\\\"\\n                :isLoading=\\\"isLoadingPropertiesMapping\\\"\\n                :skeletonItemAmount=\\\"limit\\\"\\n                style=\\\"min-height: 300px\\\">\\n                <template slot=\\\"column-assigned\\\" slot-scope=\\\"{ item }\\\">\\n                    <sw-icon v-if=\\\"item.assigned\\\" name=\\\"small-default-checkmark-line-medium\\\" small\\n                             class=\\\"is--active\\\"></sw-icon>\\n                    <sw-icon v-else name=\\\"small-default-x-line-medium\\\" small class=\\\"is--inactive\\\"></sw-icon>\\n                </template>\\n                <template #actions=\\\"{ item }\\\">\\n                    <sw-context-menu-item @click=\\\"showAttributesMappingModalWindow(item)\\\">\\n                        {{ $tc('attributesMapping.selectAttribute') }}\\n                    </sw-context-menu-item>\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!item.assigned\\\"\\n                        variant=\\\"danger\\\"\\n                        @click=\\\"showRemoveAssignmentModal(item)\\\">\\n                        {{ $tc('attributesMapping.removeAssignment') }}\\n                    </sw-context-menu-item>\\n                </template>\\n            </sw-data-grid>\\n        {% endblock %}\\n        {% block swag_markets_attributes_mapping_properties_delete_modal %}\\n            <sw-modal\\n                v-if=\\\"showDeleteModalPropertiesAttributesMapping\\\"\\n                class=\\\"bf-sales-channel-product-errors-modal\\\"\\n                :title=\\\"$tc('bf-category-segment-mapping.deleteModalWarning')\\\"\\n                @modal-close=\\\"showDeleteModalPropertiesAttributesMapping = false\\\">\\n                {{ $tc('attributesMapping.removeWarningMsg') }}\\n                <template slot=\\\"modal-footer\\\">\\n                    {% block swag_markets_categories_mapping_footer_cancel %}\\n                        <sw-button\\n                            @click=\\\"closeRemoveAssignmentModal\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalCancelBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                    {% block swag_markets_attributes_mapping_properties_footer_delete %}\\n                        <sw-button\\n                            @click=\\\"removePropertiesAssignment\\\"\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalDeleteBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </template>\\n            </sw-modal>\\n        {% endblock %}\\n        {% block swag_markets_properties_mapping_empty_state %}\\n            <sw-empty-state\\n                v-else-if=\\\"showEmptyState\\\"\\n                :absolute=\\\"false\\\"\\n                :title=\\\"$tc('attributesMapping.properties.emptyStateText')\\\"\\n                :showDescription=\\\"false\\\">\\n            </sw-empty-state>\\n        {% endblock %}\\n        {% block swag_markets_attributes_mapping_modal %}\\n            <attributes-mapping-modal\\n                :showAttributesMappingModal=\\\"showAttributesMappingModal\\\"\\n                :attributesMappingModalItem=\\\"attributesMappingModalItem\\\"\\n                :salesChannelType=\\\"salesChannelType\\\"\\n                :amazonSegment=\\\"amazonSegment\\\"\\n                :amazonProductType=\\\"amazonProductType\\\"\\n                @modal-close-attr-mapping-win=\\\"closeAttributesMappingModalWindow\\\"\\n                @save-attribute-mapping=\\\"saveInlineEdit\\\">\\n            </attributes-mapping-modal>\\n        {% endblock %}\\n        {% block swag_markets_properties_grid__pagination %}\\n            <sw-pagination :total=\\\"total\\\"\\n                           :limit=\\\"limit\\\"\\n                           :page=\\\"page\\\"\\n                           @page-change=\\\"pageChange\\\"\\n                           :steps=\\\"[5, 10]\\\">\\n            </sw-pagination>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{#{% block sw_category_tree_field_input_results_tree %}#}\\n{#    <bf-product-category-mapping-tree v-if=\\\"term.length <= 0 && categories.length > 0\\\"#}\\n{#             :items=\\\"categories\\\"#}\\n{#             after-id-property=\\\"afterCategoryId\\\"#}\\n{#             ref=\\\"swTree\\\"#}\\n{#             @get-tree-items=\\\"getTreeItems\\\"#}\\n{#             :sortable=\\\"false\\\">#}\\n\\n{#        {% block sw_category_tree_field_input_results_tree_headline %}#}\\n{#            <template #headline><span></span></template>#}\\n{#        {% endblock %}#}\\n\\n{#        {% block sw_category_tree_field_input_results_tree_search %}#}\\n{#            <template #search><span></span></template>#}\\n{#        {% endblock %}#}\\n\\n{#        {% block sw_category_tree_field_input_results_tree_items %}#}\\n{#            <template #items=\\\"{#}\\n{#                                                    treeItems,#}\\n{#                                                    sortable,#}\\n{#                                                    draggedItem,#}\\n{#                                                    newElementId,#}\\n{#                                                    checkItem,#}\\n{#                                                    translationContext,#}\\n{#                                                    onChangeRoute,#}\\n{#                                                    disableContextMenu#}\\n{#                                                }\\\">#}\\n{#                {% block sw_category_tree_field_input_results_tree_item %}#}\\n{#                    <sw-tree-item v-for=\\\"item in treeItems\\\"#}\\n{#                                  :key=\\\"item.id\\\"#}\\n{#                                  :item=\\\"item\\\"#}\\n{#                                  :translationContext=\\\"translationContext\\\"#}\\n{#                                  :draggedItem=\\\"draggedItem\\\"#}\\n{#                                  :activeParentIds=\\\"selectedCategoriesPathIds\\\"#}\\n{#                                  :activeItemIds=\\\"selectedCategoriesItemsIds\\\"#}\\n{#                                  @check-item=\\\"onCheckItem\\\"#}\\n{#                                  :sortable=\\\"false\\\"#}\\n{#                                  shouldFocus#}\\n{#                                  :activeFocusId=\\\"selectedTreeItem.id\\\"#}\\n{#                                  :markInactive=\\\"true\\\">#}\\n\\n{#                        {% block sw_category_tree_field_input_results_tree_item_actions %}#}\\n{#                            <template #actions><span></span></template>#}\\n{#                        {% endblock %}#}\\n\\n{#                    </sw-tree-item>#}\\n{#                {% endblock %}#}\\n{#            </template>#}\\n{#        {% endblock %}#}\\n{#    </bf-product-category-mapping-tree>#}\\n{#{% endblock %}#}\";","module.exports = \"{% block bf_sales_channel_shopware_segment_dropdown %}\\n    <div class=\\\"bf-segment-dropdown-container\\\">\\n        <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n            {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n        </sw-alert>\\n\\n        {% block bf_sales_channel_shopware_segment_dropdown_input_segment %}\\n        <sw-single-select\\n            :label=\\\"$tc('bf-category-segment-mapping.amazonProductSegmentLabel')\\\"\\n            :options=\\\"allProductsSegments\\\"\\n            :disabled=\\\"isDisabled\\\"\\n            v-model=\\\"selectedSegment\\\"\\n            @change=\\\"onSelectSegment\\\"\\n        ></sw-single-select>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_shopware_segment_dropdown_input_ %}\\n        <sw-single-select\\n            v-if=\\\"productsTypes.length > 1\\\"\\n            :label=\\\"$tc('bf-category-segment-mapping.amazonProductTypeLabel')\\\"\\n            :options=\\\"productsTypes\\\"\\n            :disabled=\\\"isDisabled\\\"\\n            v-model=\\\"selectedType\\\"\\n            @change=\\\"onSelectType\\\"\\n        ></sw-single-select>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_data_grid_columns_slot %}\\n    <slot :name=\\\"`column-${column.property}`\\\"\\n          v-bind=\\\"{ item, itemIndex, column, columnIndex, compact }\\\">\\n\\n        <template v-if=\\\"column.property === 'external_name'\\\">\\n            {{ getExternalName(item) }}\\n        </template>\\n        <template v-else>\\n            {{ renderColumn(item, column) }}\\n        </template>\\n    </slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_actions %}\\n<slot name=\\\"detail-action\\\" v-bind=\\\"{ item }\\\">\\n    <sw-context-menu-item class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n                          @click=\\\"onEditUnitMappingClick(item)\\\">\\n        {{ $tc('global.default.edit') }}\\n    </sw-context-menu-item>\\n</slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_bulk_modals %}\\n<bf-sales-channel-unit-mapping-modal\\n    v-if=\\\"showUnitMappingModal\\\"\\n    :title=\\\"selectedUnit.unitsDescription[currentLocale].unitsName\\\"\\n    :unit=\\\"selectedUnit\\\"\\n    :currentData=\\\"getCurrentData(selectedUnit)\\\"\\n    @modal-close=\\\"showUnitMappingModal = false; $emit('load-unit-mapping'); $emit('modal-close')\\\">\\n</bf-sales-channel-unit-mapping-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./index.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"450236ec\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-bookable-contracts-sub-processor.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"00a83928\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-filter-panel.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"30ef8b48\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./index.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7b61658a\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_logo %}\\n    <img class=\\\"bf-ebay-connection-assistant__logo\\\"\\n         :src=\\\"'swagmarkets/static/img/ebay_logo_final.svg' | asset\\\"/>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_data_grid_columns_render_value %}\\n    <span class=\\\"sw-data-grid__cell-value\\\">\\n        <template v-if=\\\"column.property === 'mandatory'\\\">\\n            <sw-color-badge :class=\\\"item.mandatory ? 'is--success' : 'is--error'\\\"></sw-color-badge>\\n        </template>\\n        <template v-else>\\n            {{ renderColumn(item, column) }}\\n        </template>\\n    </span>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-start-authorize-oauth.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1bba9e32\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_start_authorize_oauth_content %}\\n    <sw-container>\\n        {% block bf_ebay_connection_assistant_modal_content_description %}\\n            <sw-card-section class=\\\"bf-ebay-connection-assistant-modal__content-description\\\">\\n                {{ $tc('ebay.authoriseOAuthDescription') }}\\n            </sw-card-section>\\n        {% endblock %}\\n        {% block bf_ebay_connection_assistant_start_authorize_oauth_content %}\\n        <sw-card-section divider=\\\"right\\\">\\n            <div class=\\\"bf-ebay-connection-assistant-start-authorize__content-left\\\">\\n                {% block bf_ebay_connection_assistant_start_authorize_content_left_form %}\\n                {% block bf_ebay_connection_assistant_start_authorize_content_left_form_button_connect %}\\n                <sw-button\\n                    @click=\\\"authorizeOAuth\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"primary\\\"\\n                    :block=\\\"true\\\">\\n                    {{ $tc('button.connect') }}\\n                </sw-button>\\n                {% endblock %}\\n                {% endblock %}\\n            </div>\\n        </sw-card-section>\\n        {% endblock %}\\n    </sw-container>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_cahnnel_detail_unit_mapping %}\\n<div>\\n    <sw-card\\n        class=\\\"bf-card\\\"\\n        :title=\\\"$tc('unitMapping.card-title')\\\"\\n        :showHelpTextIcon=\\\"true\\\"\\n        :helpTextDescription=\\\"$tc('unitMapping.infoText')\\\"\\n        :helpTextWidth=\\\"500\\\"\\n        >\\n        {% block bf_sales_cahnnel_detail_property_list_grid %}\\n            <bf-sales-channel-unit-mapping-grid\\n                v-if=\\\"units\\\"\\n                :dataSource=\\\"units\\\"\\n                :columns=\\\"columns\\\"\\n                ref=\\\"unitMappingGrid\\\"\\n                identifier=\\\"unitMappingGrid\\\"\\n                :showSelection=\\\"false\\\"\\n                :fullPage=\\\"false\\\"\\n                :sortBy=\\\"sortBy\\\"\\n                :sortDirection=\\\"sortDirection\\\"\\n                :isLoading=\\\"isLoading\\\"\\n                :compactMode=\\\"false\\\"\\n                :unitMappings=\\\"unitMappings\\\"\\n                @load-unit-mapping=\\\"getList('*')\\\">\\n            </bf-sales-channel-unit-mapping-grid>\\n        {% endblock %}\\n        {% block swag_markets_category_mapping_empty_state %}\\n            <sw-empty-state\\n                style=\\\"position: relative;\\\"\\n                v-if=\\\"unitMappings == null || unitMappings.length == 0\\\"\\n                :title=\\\"$tc('unitMapping.noScaleUnit')\\\"\\n                :showDescription=\\\"false\\\">\\n            </sw-empty-state>\\n        {% endblock %}\\n    </sw-card>\\n</div>\\n{% endblock %}\\n\";","module.exports = \"<sw-card v-if=\\\"showTokenCard\\\" :title=\\\"$tc('bf-sales-channel.detail.ebayExpireTokenTitle')\\\" :isLoading=\\\"isLoading\\\">\\n    <sw-alert variant=\\\"info\\\" appearance=\\\"system\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" v-if=\\\"!clientRdy && !errorLoadingTokens\\\">\\n        {{ $tc('bf-sales-channel.detail.ebayTokenSystemInfo') }}\\n    </sw-alert>\\n    <sw-alert variant=\\\"error\\\" appearance=\\\"system\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" v-if=\\\"errorLoadingTokens\\\">\\n        {{ $tc('bf-sales-channel.detail.ebayErrorLoadingTokens') }}\\n    </sw-alert>\\n    <sw-container columns=\\\"1fr 1fr\\\">\\n        <sw-description-list>\\n            <dt style=\\\"text-align: center\\\">{{ $tc('bf-sales-channel.detail.ebayExpireTokenOAuthTitle') }}\\n                <span v-html=\\\"oAuthTokenDate\\\" style=\\\"color: #2a8844\\\"></span>\\n            </dt>\\n            <dd>\\n                <sw-button\\n                    :disabled=\\\"!clientRdy || errorLoadingTokens || errorOAuthTokenLink\\\"\\n                    variant=\\\"ghost\\\" size=\\\"small\\\"\\n                    :square=\\\"false\\\" :block=\\\"true\\\"\\n                    :isLoading=\\\"false\\\"\\n                    @click=\\\"authorizeOAuthToken\\\">\\n                    {{ $tc('bf-sales-channel.detail.ebayExtendTokenOAuthBtn') }}\\n                </sw-button>\\n            </dd>\\n        </sw-description-list>\\n        <sw-description-list>\\n            <dt style=\\\"text-align: center\\\">{{ $tc('bf-sales-channel.detail.ebayExpireTokenAuthTitle') }}\\n                <span v-html=\\\"authTokenDate\\\"></span>\\n            </dt>\\n            <dd>\\n                <sw-button\\n                    :disabled=\\\"!clientRdy || errorLoadingTokens || errorAuthTokenLink\\\"\\n                    variant=\\\"ghost\\\" size=\\\"small\\\"\\n                    :square=\\\"false\\\"\\n                    :block=\\\"true\\\"\\n                    :isLoading=\\\"false\\\"\\n                    @click=\\\"authorizeAuthToken\\\">\\n                    {{$tc('bf-sales-channel.detail.ebayExtendTokenAuthBtn')}}\\n                </sw-button>\\n            </dd>\\n        </sw-description-list>\\n    </sw-container>\\n</sw-card>\\n\";","module.exports = \"{% block swag_markets_mapping_content %}\\n    <div class=\\\"bf-sales-channel-detail-mapping-content\\\">\\n        {% block swag_markets_mapping_segment %}\\n            <bf-sales-channel-segment-mapping\\n                :clientExists=\\\"clientExists\\\"\\n                :clientInProgress=\\\"clientInProgress\\\"\\n                :currentContractName=\\\"currentContract.name\\\">\\n            </bf-sales-channel-segment-mapping>\\n        {% endblock %}\\n\\n        {% block swag_markets_category_mapping_grid_component %}\\n            <bf-sales-channel-category-mapping :salesChannelType=\\\"marketplaceName\\\"\\n                                               :categoriesReloadTriggerEvent=\\\"categoriesReloadTriggerEvent\\\">\\n            </bf-sales-channel-category-mapping>\\n        {% endblock %}\\n\\n        {% block swag_markets_attributes_mapping %}\\n            <bf-sales-channel-attributes-mapping\\n                :salesChannelType=\\\"marketplaceName\\\"\\n                :amazonSegment=\\\"amazonSegment\\\"\\n                :amazonProductType=\\\"amazonProductType\\\">\\n            </bf-sales-channel-attributes-mapping>\\n        {% endblock %}\\n        {% block swag_markets_variations_properties %}\\n            <bf-sales-channel-variation-properties-grid\\n                v-if=\\\"marketplaceName == 'amazon'\\\">\\n            </bf-sales-channel-variation-properties-grid>\\n        {% endblock %}\\n\\n        {% block swag_markets_mapping_unit %}\\n            <bf-sales-channel-detail-unit-mapping></bf-sales-channel-detail-unit-mapping>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-category-mapping.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"b9f188ea\", content, true, {});","module.exports = \"<sw-card :title=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimeShippingMethodsTitle')\\\" :isLoading=\\\"isLoading\\\">\\n    <sw-alert v-if=\\\"isDisabled\\\" variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('salesChannelSettings.invalidContractInfo') }}\\n    </sw-alert>\\n    {% block bf_sales_channel_amazon_fba_shipping_methods_matching %}\\n        <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0px 30px\\\">\\n            <sw-single-select\\n                :label=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimeFbaLabel')\\\"\\n                :options=\\\"shippingMethods\\\"\\n                v-model=\\\"amazonFbaPrimeShippingMethods.fba.shippingMethodId\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimeFbaHelpText')\\\"\\n                :disabled=\\\"isDisabled\\\"\\n                @change=\\\"changedItem(arguments, 'fba')\\\">\\n            </sw-single-select>\\n            <sw-single-select\\n                :label=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeLabel')\\\"\\n                v-model=\\\"amazonFbaPrimeShippingMethods.prime.shippingMethodId\\\"\\n                :options=\\\"shippingMethods\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeHelpText')\\\"\\n                :disabled=\\\"isDisabled\\\"\\n                @change=\\\"changedItem(arguments, 'prime')\\\">\\n            </sw-single-select>\\n            <sw-single-select\\n                :label=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeNextDayLabel')\\\"\\n                v-model=\\\"amazonFbaPrimeShippingMethods.primeNextDay.shippingMethodId\\\"\\n                :options=\\\"shippingMethods\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeNextDayHelpText')\\\"\\n                :disabled=\\\"isDisabled\\\"\\n                @change=\\\"changedItem(arguments, 'primeNextDay')\\\">\\n            </sw-single-select>\\n            <sw-single-select\\n                :label=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeSecondDayLabel')\\\"\\n                v-model=\\\"amazonFbaPrimeShippingMethods.primeSecondDay.shippingMethodId\\\"\\n                :options=\\\"shippingMethods\\\"\\n                :helpText=\\\"$tc('bf-sales-channel.detail.amazonFbaPrimePrimeSecondDayHelpText')\\\"\\n                :disabled=\\\"isDisabled\\\"\\n                @change=\\\"changedItem(arguments, 'primeSecondDay')\\\">\\n            </sw-single-select>\\n        </sw-container>\\n    {% endblock %}\\n</sw-card>\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-account-marketplace.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"515e7ab7\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-logo.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c548639e\", content, true, {});","Shopware.State.registerModule('bfCategoryMapping', {\n    namespaced: true,\n    state: {\n        selectedCategories: null,\n        shopwareCategories: null,\n        marketplaceCategories: null,\n        marketplace: null,\n        categoriesMappingStorage: {}\n    },\n    mutations: {\n        setSelectedCategories(state, selectedCategories) {\n            state.selectedCategories = selectedCategories;\n        },\n        setShopwareCategories(state, shopwareCategories) {\n            state.shopwareCategories = shopwareCategories;\n        },\n        setMarketplaceCategories(state, marketplaceCategories) {\n            state.marketplaceCategories = marketplaceCategories;\n        },\n        setMarketplace(state, marketplace) {\n            state.marketplace = marketplace;\n        },\n        setCategoriesMappingStorage(state, categoriesMappingStorage) {\n            state.categoriesMappingStorage = categoriesMappingStorage;\n        }\n    },\n    actions: {\n    },\n\n    getters: {\n        getSelectedCategories: (state) => {\n            return state.selectedCategories;\n        },\n        getShopwareCategories: (state) => {\n            return state.shopwareCategories;\n        },\n        getMarketplaceCategories: (state) => {\n            return state.marketplaceCategories;\n        },\n        getMarketplace: (state) => {\n            return state.marketplace;\n        },\n        getCategoriesMappingStorage: (state) => {\n            return state.categoriesMappingStorage;\n        }\n    }\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-start-success.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"ec303af8\", content, true, {});","module.exports = \"{% block bf_sales_channel_product_detail %}\\n    <div class=\\\"bf-sales-channel-detail-category-content\\\">\\n        {% block bf_sales_channel_product_detail_content %}\\n            <sw-card class=\\\"bf-card\\\" :title=\\\"$tc('products.title')\\\" large>\\n                <div class=\\\"bf-product-detail__toolbar\\\">\\n                    <sw-container\\n                        columns=\\\"1fr\\\"\\n                        v-if=\\\"!userAuthorised\\\">\\n                        <sw-alert\\n                            variant=\\\"warning\\\"\\n                            appearance=\\\"notification\\\"\\n                            :closable=\\\"false\\\">\\n                            {{ $tc('bf-sales-channel.detail.notAuthorisedText') }}\\n                            <sw-button\\n                                :disabled=\\\"false\\\"\\n                                variant=\\\"ghost\\\"\\n                                size=\\\"small\\\"\\n                                :square=\\\"false\\\"\\n                                :block=\\\"false\\\"\\n                                :isLoading=\\\"false\\\"\\n                                @click=\\\"showLoginModal = true\\\">\\n                                {{ $tc('global.login') }}\\n                            </sw-button>\\n                        </sw-alert>\\n                    </sw-container>\\n                    <sw-container\\n                        columns=\\\"1fr minmax(50px, max-content)\\\"\\n                        gap=\\\"0 10px\\\"\\n                        v-if=\\\"userAuthorised && currentContract.name === undefined\\\">\\n                        <b>{{ $tc('products.no-license') }}</b>\\n                    </sw-container>\\n                    <sw-container>\\n                        <bf-collapse @item-expand=\\\"expand\\\">\\n                            <div slot=\\\"header\\\">Filter\\n                                <sw-icon name=\\\"default-action-filter\\\"></sw-icon>\\n                                <sw-icon name=\\\"default-arrow-head-down\\\" size=\\\"10\\\" v-if=\\\"!isExpanded\\\"></sw-icon>\\n                                <sw-icon name=\\\"default-arrow-head-up\\\" size=\\\"10\\\" v-else></sw-icon>\\n                            </div>\\n                            <div slot=\\\"content\\\">\\n                                <sw-container columns=\\\"1fr\\\">\\n                                    <bf-filter-panel\\n                                        entity=\\\"product\\\"\\n                                        :storeKey=\\\"storeKey\\\"\\n                                        :filters=\\\"listFilter\\\"\\n                                        :defaults=\\\"defaultFilters\\\"\\n                                        @criteria-changed=\\\"criteriaChanged\\\">\\n                                    </bf-filter-panel>\\n                                </sw-container>\\n                            </div>\\n                        </bf-collapse>\\n                    </sw-container>\\n                    <sw-container\\n                        columns=\\\"1fr\\\"\\n                        gap=\\\"0 10px\\\"\\n                        v-if=\\\"userAuthorised && currentContract.name\\\">\\n                        <br>\\n                        <span :class=\\\"dangerZone ? 'danger' : warningZone ? 'warning' : 'success'\\\">\\n                            <b style=\\\"color: #5a6d80\\\">{{ currentContract.name }}:</b>\\n                            {{ total ?? 0 }} <span v-if=\\\"channelLimit > 0\\\">/ {{ channelLimit }}</span>\\n                        </span>\\n                    </sw-container>\\n                    <sw-container v-else>\\n                        <br><span>&nbsp;</span>\\n                    </sw-container>\\n                    <sw-container>\\n                        <sw-simple-search-field\\n                            v-model=\\\"searchWord\\\"\\n                            variant=\\\"form\\\"\\n                            :delay=\\\"50\\\"\\n                            @change=\\\"getList\\\"\\n                        ></sw-simple-search-field>\\n                    </sw-container>\\n                </div>\\n\\n                {% block bf_sales_channel_product_grid %}\\n                    <bf-sales-channel-product-grid\\n                        :items=\\\"products\\\"\\n                        :shopProductData=\\\"shopProductData\\\"\\n                        :columns=\\\"columns\\\"\\n                        :repository=\\\"productRepository\\\"\\n                        :showSelection=\\\"false\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        :fullPage=\\\"false\\\"\\n                        :sortBy=\\\"sortBy\\\"\\n                        :sortDirection=\\\"sortDirection\\\"\\n                        :naturalSorting=\\\"naturalSorting\\\"\\n                        :criteriaLimit=\\\"limit\\\"\\n                        :allowColumnEdit=\\\"false\\\"\\n                        :marketplace=\\\"marketplace\\\"\\n                        :marketplaceName=\\\"marketplaceName\\\"\\n                        :currentContract=\\\"currentContract\\\"\\n                        @onOpenProductErrorsModal=\\\"openProductErrorsModal\\\"\\n                        @paginateBf=\\\"paginateBf\\\"\\n                    >\\n                        <template #column-name=\\\"{ item }\\\">\\n                            <sw-media-preview-v2 :source=\\\"item.cover ? item.cover.media : null\\\"></sw-media-preview-v2>\\n                            <router-link :to=\\\"{ name: 'sw.product.detail', params: { id: item.id } }\\\">\\n                                {{ item.translated ? item.translated.name : item.name }}\\n                            </router-link>\\n                        </template>\\n                    </bf-sales-channel-product-grid>\\n                {% endblock %}\\n\\n                <sw-modal\\n                    v-if=\\\"showProductsErrorsModal\\\"\\n                    class=\\\"bf-sales-channel-product-errors-modal\\\"\\n                    ref=\\\"modal\\\"\\n                    variant=\\\"large\\\"\\n                    :title=\\\"$tc('products.modalErrors.title')\\\"\\n                    @modal-close=\\\"showProductsErrorsModal = false\\\">\\n                    {% block bf_sales_channel_product_grid_errors_modal_text %}\\n                        <p>\\n                            {{ $tc('products.modalErrors.text') }}\\n                        </p>\\n                    {% endblock %}\\n\\n                    {% block bf_sales_channel_product_grid_errors_modal_table %}\\n                        <sw-data-grid\\n                            :dataSource=\\\"shopProductsErrors\\\"\\n                            :columns=\\\"getErrorColumns()\\\"\\n                            :showSelection=\\\"false\\\"\\n                            :showActions=\\\"false\\\"\\n                        >\\n                        </sw-data-grid>\\n                    {% endblock %}\\n\\n                    {% block bf_sales_channel_product_grid_errors_modal_footer %}\\n                        <template slot=\\\"modal-footer\\\">\\n                            {% block bf_sales_channel_product_grid_errors_modal_footer_abort %}\\n                                <sw-button size=\\\"small\\\" @click=\\\"showProductsErrorsModal = false\\\">\\n                                    {{ $tc('sw-sales-channel.detail.buttonCloseDeleteModal') }}\\n                                </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                    {% endblock %}\\n                </sw-modal>\\n\\n            </sw-card>\\n        {% endblock %}\\n        {% block sw_plugin_store_login_status_login_modal %}\\n            <sw-modal :title=\\\"$tc('sw-extension.my-extensions.tabs.shopwareAccount')\\\" v-if=\\\"showLoginModal\\\"\\n                      @modal-close=\\\"closeLoginModal\\\">\\n                <sw-extension-my-extensions-account></sw-extension-my-extensions-account>\\n            </sw-modal>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_start_authorize_content %}\\n    <sw-container >\\n        {% block bf_amazon_connection_assistant_modal_content_descritpion %}\\n            <sw-card-section class=\\\"bf-amazon-connection-assistant-modal__content-description\\\">\\n                {{ $tc('amazon.authoriseDescription') }}\\n            </sw-card-section>\\n        {% endblock %}\\n        {% block bf_amazon_connection_assistant_start_authorize_content_right %}\\n            <sw-card-section>\\n                <h6 class=\\\"bf-amazon-connection-assistant-start-authorize__content-title\\\">{{ $tc('amazon.manualConnect') }}</h6>\\n                {% block bf_amazon_connection_assistant_start_authorize_content_right_form %}\\n                    <sw-card :hero=\\\"true\\\" class=\\\"bf-amazon-connection-assistant-start-authorize__content-card\\\">\\n                        {% block bf_amazon_connection_assistant_start_authorize_content_righ_form_input_retailer %}\\n                            <sw-text-field\\n                                :placeholder=\\\"$tc('amazon.retailerIdPlaceHolderInput')\\\"\\n                                :label=\\\"$tc('amazon.retailerId')\\\"\\n                                v-model=\\\"retailerId\\\"\\n                                validation=\\\"required\\\"\\n                                required\\n                            ></sw-text-field>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_start_authorize_content_right_form_input_token %}\\n                            <sw-text-field\\n                                :placeholder=\\\"$tc('amazon.mwsTokenPlaceHolderInput')\\\"\\n                                :label=\\\"$tc('amazon.mwsToken')\\\"\\n                                v-model=\\\"mwsToken\\\"\\n                                validation=\\\"required\\\"\\n                                required\\n                            ></sw-text-field>\\n                        {% endblock %}\\n                        {% block bf_amazon_connection_assistant_start_authorize_content_right_form_button_connect %}\\n                        <sw-button\\n                            @click=\\\"authorizeManual\\\"\\n                            size=\\\"small\\\"\\n                            variant=\\\"primary\\\"\\n                            :block=\\\"true\\\">\\n                            {{$tc('button.connect')}}\\n                        </sw-button>\\n                        {% endblock %}\\n                        <br>\\n                        {% block bf_amazon_connection_assistant_start_authorize_mws_notification %}\\n                            <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n                                <sw-collapse>\\n                                    <div slot=\\\"header\\\"><strong>{{ $tc('amazon.howTo.mwsNotificationHowToTitle') }}</strong></div>\\n                                    <div slot=\\\"content\\\">\\n                                        <p>\\n                                            <span v-html=\\\"howToFirstPart\\\"></span><br>\\n                                            {{ $tc('amazon.howTo.mwsNotificationHowToSecondPart') }}<br><br>\\n                                            <ul>\\n                                                    <li><strong>{{ $tc('amazon.howTo.mwsNotificationHowToUser') }}</strong></li>\\n                                                    <li><strong>{{ $tc('amazon.howTo.mwsNotificationHowToPassword') }}</strong></li>\\n                                            </ul><br>\\n                                            {{ $tc('amazon.howTo.mwsNotificationHowToLastPart') }}\\n                                        </p>\\n                                    </div>\\n                                </sw-collapse>\\n                            </sw-alert>\\n                        {% endblock %}\\n                    </sw-card>\\n                {% endblock %}\\n            </sw-card-section>\\n        {% endblock %}\\n    </sw-container>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-detail-custom-fields.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"34d19d06\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_modal %}\\n<div>\\n    <sw-modal :title=\\\"title\\\"\\n              class=\\\"bf-ebay-connection-assistant-modal\\\"\\n              v-if=\\\"showModal\\\"\\n              @modal-close=\\\"closeModal\\\"\\n              :isLoading=\\\"isLoading\\\">\\n        {% block bf_ebay_connection_assistant_modal_content %}\\n            {% block bf_ebay_connection_assistant_modal_content_title %}\\n                <bf-ebay-connection-assistant-logo/>\\n            {% endblock %}\\n            <div class=\\\"bf-ebay-connection-assistant-modal__content\\\">\\n                {% block bf_ebay_connection_assistant_modal_content_page %}\\n                    <div class=\\\"bf-ebay-connection-assistant-modal__content-page\\\">\\n                        <router-view\\n                            @set-title=\\\"setTitle\\\"\\n                            @ca-redirect=\\\"redirect\\\"\\n                            @ca-stepsToGetBack=\\\"addStepsToGetBack\\\"\\n                            @ca-setAccountData=\\\"setAccountData\\\"\\n                            @ca-setNextBtnState=\\\"setNextBtnState\\\"\\n                            @ca-isLoading=\\\"setIsLoadingState\\\"\\n                            @ca-resetNextBtnIsClicked=\\\"resetNextBtnIsClicked\\\"\\n                            @modal-close=\\\"closeModal\\\"\\n                            @ca-sleep=\\\"sleep\\\"\\n                            @ca-startCheckTokenState=\\\"startCheckTokenState\\\"\\n                            @showSupportModal=\\\"showSupportModal = true\\\"\\n                            @ca-startCheckOAuthTokenState=\\\"startCheckOAuthTokenState\\\"\\n                            :showSupportModal=\\\"showSupportModal\\\"\\n                            :nextBtnIsClicked=\\\"nextBtnIsClicked\\\">\\n                        </router-view>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n        {% block bf_ebay_connection_assistant_modal_footer %}\\n        <template #modal-footer>\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"closeModal\\\">\\n                {{ $tc('button.cancel') }}\\n            </sw-button>\\n            <sw-button :disabled=\\\"nextIsDisabled\\\" size=\\\"small\\\" variant=\\\"primary\\\" @click=\\\"onClickNext\\\">\\n                {{ $tc('button.next') }}\\n            </sw-button>\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n\\n    <bf-support\\n        marketplace=\\\"ebay\\\"\\n        requestType=\\\"product_migration_request\\\"\\n        :showSupportModal=\\\"showSupportModal\\\"\\n        :supportTitle=\\\"$tc('bf-support.modal.titleTransferProducts')\\\"\\n        @closeSupportModal=\\\"showSupportModal = false\\\"\\n    ></bf-support>\\n</div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_ebay_connection_assistant_account %}\\n    <div class=\\\"bf-ebay-connection-assistant-account\\\">\\n        {% block bf_ebay_connection_assistant_account_content %}\\n            <div class=\\\"bf-ebay-connection-assistant-account__content\\\">\\n                <sw-card title=\\\"Account connected\\\" large>\\n                    <sw-container columns=\\\"auto 1fr auto\\\">\\n                        <sw-card-section slim>\\n                            {% block bf_ebay_connection_assistant_account_content_avatar %}\\n                                <div class=\\\"bf-ebay-connection-assistant-account__content-avatar\\\">\\n                                    <sw-avatar\\n                                        color=\\\"#189eff\\\"\\n                                        size=\\\"40px\\\"\\n                                        :firstName=\\\"user.firstName\\\"\\n                                        :lastName=\\\"user.lastName\\\"\\n                                        style=\\\"margin: 0 10px\\\"></sw-avatar>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                        <sw-card-section>\\n                            {% block bf_ebay_connection_assistant_account_content_user_details %}\\n                                <div class=\\\"bf-ebay-connection-assistant-account__content-user-details\\\">\\n                                    <h6>{{ user.firstName }} {{ user.lastName }}</h6>\\n                                    <p>{{ user.email }}</p>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                        <sw-card-section>\\n                            {% block bf_ebay_connection_assistant_account_content_button_group %}\\n                                <div class=\\\"bf-ebay-connection-assistant-account__content-button-group\\\">\\n                                    <sw-button size=\\\"small\\\">Disconnect</sw-button>\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card-section>\\n                    </sw-container>\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","const {Application} = Shopware;\nconst { ApiService } = Shopware.Classes;\n\nclass BfContractService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint) {\n        super(httpClient, loginService, apiEndpoint);\n\n        this.localStorageKey = 'SwagMarketsBearerToken';\n        this.config = {};\n        this.headers = {};\n    }\n\n    getSbpHeaders(credentials) {\n        return {\n            'X-Shopware-Platform-Token': credentials.longLifeToken,\n            'X-Shopware-Shop-Secret': credentials.shopSecret\n        }\n    }\n\n    getSwQueryParams() {\n        return this.getUserInformation('user-information')\n            .then((response) => {\n                return this.serialiseObjectInQueryParameters(response);\n            });\n    }\n\n    serialiseObjectInQueryParameters(object) {\n        let result = [];\n\n        for (let key in object) {\n            if (object.hasOwnProperty(key)) {\n                result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]));\n            }\n        }\n\n        return '?' + result.join(\"&\");\n    }\n\n    getUserInformation(url) {\n        return this.httpClient.get(\n            'swagMarkets/config/' + url,\n            {\n                headers: this.getBasicHeaders()\n            })\n            .then((response) => {\n                return response.data.data;\n            })\n            .catch((error) => {\n                return error.response;\n            });\n    }\n\n    setUserShopId(shopId) {\n        return this.httpClient.post(\n            'swagMarkets/config/set-shop-id',\n            {\n                shopId: shopId\n            },\n            {\n                headers: this.getBasicHeaders()\n            })\n            .then((response) => {\n                return response.data.data;\n            })\n            .catch((error) => {\n                return error.response;\n            });\n    }\n\n    getContracts() {\n        return this.getUserInformation('user-token').then((credentials) => {\n            return this.getSwQueryParams().then((params) => {\n                return this.httpClient.get(\n                    credentials.url + this.apiEndpoint + params,\n                    {\n                        headers: this.getSbpHeaders(credentials)\n                    }\n                ).then((response) => {\n                    return response.data;\n                });\n            });\n        });\n    }\n\n    setContract(contractName) {\n        return this.getUserInformation('user-token').then((credentials) => {\n            return this.getSwQueryParams().then((params) => {\n                return this.httpClient.post(\n                    credentials.url + this.apiEndpoint + params,\n                    {\n                        contractName: contractName\n                    },\n                    {\n                        headers: this.getSbpHeaders(credentials)\n                    }\n                ).then((response) => {\n                    return response;\n                });\n            });\n        });\n    }\n\n    cancelContract(identifier) {\n        return this.getUserInformation('user-token').then((credentials) => {\n            return this.getSwQueryParams().then((params) => {\n                return this.httpClient.post(\n                    credentials.url + this.apiEndpoint + '/' + identifier + '/cancellation'  + params,\n                    {},\n                    {\n                        headers: this.getSbpHeaders(credentials)\n                    }\n                ).then((response) => {\n                    return response;\n                });\n            });\n        });\n    }\n}\n\nApplication.addServiceProvider('bfContractService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new BfContractService(\n        initContainer.httpClient,\n        container.loginService,\n        '/swplatform/plugin/SwagMarkets/servicecontracts'\n    );\n});\n","module.exports = \"{% block bf_sales_channel_detail %}\\n    <sw-page class=\\\"bf-sales-channel-detail\\\">\\n        {% block bf_sales_channel_detail_header %}\\n            <template slot=\\\"smart-bar-header\\\">\\n                {% block bf_sales_channel_detail_header_headline %}\\n                    <h2>{{ placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.textHeadline')) }}</h2>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_actions %}\\n            <template slot=\\\"smart-bar-actions\\\">\\n                {% block bf_sales_channel_detail_action_save %}\\n                    <sw-button-process\\n                        class=\\\"bf-sales-channel-detail__save-action\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        :processSuccess=\\\"isSaveSuccessful\\\"\\n                        :disabled=\\\"isLoading\\\"\\n                        variant=\\\"primary\\\"\\n                        @process-finish=\\\"saveFinish\\\"\\n                        v-tooltip.bottom=\\\"toolTipSave\\\"\\n                        @click.prevent=\\\"onSave\\\">\\n                        {{ $tc('sw-sales-channel.detail.buttonSave') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_language_switch %}\\n            <sw-language-switch\\n                slot=\\\"language-switch\\\"\\n                @on-change=\\\"onChangeLanguage\\\"\\n                :saveChangesFunction=\\\"saveOnLanguageChange\\\"\\n                :abortChangeFunction=\\\"abortOnLanguageChange\\\">\\n            </sw-language-switch>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_content %}\\n            <sw-card-view slot=\\\"content\\\">\\n\\n                {% block bf_saels_channel_detail_content_language_info %}\\n                    <sw-language-info\\n                        :entityDescription=\\\"placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.textHeadline'))\\\">\\n                    </sw-language-info>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_content_tabs %}\\n                    <sw-tabs class=\\\"bf-sales-channel-detail__tabs\\\">\\n                        {% block bf_sales_channel_detail_content_tab_general %}\\n                            <sw-tabs-item\\n                                :route=\\\"{name: 'bf.sales.channel.detail', params: {id: $route.params.id} }\\\">\\n                                {{ $tc('tabs.general') }}\\n                            </sw-tabs-item>\\n                        {% endblock %}\\n                        <!-- TODO - the following must inject new elements somehow -->\\n                        {% block bf_sales_channel_detail_content_tab %}{% endblock %}\\n                    </sw-tabs>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_content_view %}\\n                    <router-view\\n                        :salesChannel=\\\"salesChannel\\\"\\n                        class=\\\"bf-sales-channel-detail-content-view\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        :key=\\\"$route.params.id\\\"\\n                        :salesChannelType=\\\"salesChannelType\\\"\\n                        @setPolicy=\\\"setPolicy\\\">\\n                    </router-view>\\n                {% endblock %}\\n            </sw-card-view>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_bookable_contracts %}\\n    <sw-container columns=\\\"1fr\\\" gap=\\\"20px\\\" class=\\\"bf-bookable-contracts\\\">\\n        <table>\\n            <tr>\\n                <td>\\n                    {% block swag_markets_terms_and_conditions__content %}\\n                        <div>\\n                            <sw-checkbox-field\\n                                class=\\\"swag-markets-contract-checkbox__terms\\\"\\n                                v-model=\\\"acceptTermsAndConditions\\\">\\n                            </sw-checkbox-field>\\n                            <div class=\\\"swag-markets-contract-terms\\\" style=\\\"float: left;\\\">\\n                                <span>\\n                                    {{ $tc('bf-sales-channel.contractModal.table.contractTermsAndConditionsBegin') }}\\n                                </span>\\n                                <sw-external-link icon=\\\"small-arrow-small-external\\\" @click=\\\"openTermsAndConditions\\\">\\n                                    {{ $tc('bf-sales-channel.contractModal.table.contractTermsAndConditionsEnd') }}\\n                                </sw-external-link>\\n                            </div>\\n                        </div>\\n                        <div style=\\\"clear: both;\\\"></div>\\n                        <div>\\n                            <sw-checkbox-field class=\\\"swag-markets-contract-checkbox__terms\\\"\\n                                               v-model=\\\"acceptSubProcessor\\\"></sw-checkbox-field>\\n                            <div class=\\\"swag-markets-contract-terms\\\" style=\\\"float: left;\\\">\\n                                <span>{{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorBegin') }}</span>\\n                                <sw-external-link icon=\\\"small-arrow-small-external\\\"\\n                                                  @click=\\\"openPermissionModal\\\">\\n                                    {{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorLink1') }}\\n                                </sw-external-link>\\n                                <span>{{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorMiddle') }}</span>\\n                                <sw-external-link\\n                                    icon=\\\"small-arrow-small-external\\\" @click=\\\"openSubProcessorModal\\\">\\n                                    {{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorLink2') }}\\n                                </sw-external-link>\\n                                <span>{{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorEnd') }}</span>\\n                            </div>\\n                        </div>\\n                    {% endblock %}\\n                </td>\\n                <td v-for=\\\"contract in bookableContracts\\\">\\n                <span v-if=\\\"currentContract.name === contract.name\\\" class=\\\"current-contract\\\">\\n                    {{ $tc('bf-sales-channel.contractModal.currentContractText') }}\\n                </span>\\n                    <br>\\n                    <strong class=\\\"contract-name\\\">{{ contract.label }}</strong>\\n                    <br>\\n                    <strong class=\\\"contract-price\\\">&euro; {{ contract.minPricePerMonth }}</strong>\\n                    / {{ $tc('bf-sales-channel.contractModal.month') }}\\n\\n                    {% block bf_radio_panel_body_actions %}\\n                        <sw-button\\n                            v-if=\\\"currentContract.name === contract.name\\\"\\n                            @click=\\\"$emit('onRemoveContract', contract.name)\\\">\\n                            {{ $tc('bf-sales-channel.contractModal.buttonRemove') }}\\n                        </sw-button>\\n\\n                        <sw-button\\n                            v-else\\n                            @click=\\\"$emit('setNewContract', contract, 'change')\\\"\\n                            variant=\\\"primary\\\"\\n                            :disabled=\\\"!acceptTermsAndConditions || !acceptSubProcessor\\\">\\n                            {{ $tc('bf-sales-channel.contractModal.buttonChooseContract') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </td>\\n            </tr>\\n\\n            <tr v-for=\\\"row in tableData\\\">\\n                <td>\\n                    <div style=\\\"float:left;\\\">\\n                        {{ row[0] }}\\n                    </div>\\n                    <div style=\\\"float:right;\\\">\\n                        <sw-help-text :text=\\\"row[1]\\\" :width=\\\"200\\\" tooltipPosition=\\\"top\\\"></sw-help-text>\\n                    </div>\\n                </td>\\n                <td>\\n                    <span v-if=\\\"typeof row[2] === 'string'\\\">{{ row[2] }}</span>\\n                    <sw-icon v-else-if=\\\"row[2] === 1\\\" name=\\\"default-basic-checkmark-line\\\" :small=\\\"true\\\"></sw-icon>\\n                </td>\\n                <td>\\n                    <span v-if=\\\"typeof row[3] === 'string'\\\">{{ row[3] }}</span>\\n                    <sw-icon v-else-if=\\\"row[3] === 1\\\" name=\\\"default-basic-checkmark-line\\\" :small=\\\"true\\\"></sw-icon>\\n                </td>\\n                <td>\\n                    <span v-if=\\\"typeof row[4] === 'string'\\\">{{ row[4] }}</span>\\n                    <sw-icon v-else-if=\\\"row[4] === 1\\\" name=\\\"default-basic-checkmark-line\\\" :small=\\\"true\\\"></sw-icon>\\n                </td>\\n            </tr>\\n        </table>\\n\\n        <span class=\\\"additional-text\\\">{{ $tc('bf-sales-channel.contractModal.bfSpecialProposal') }}</span>\\n    </sw-container>\\n{% endblock %}\\n\";","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","module.exports = \"{% block bf_sales_channel_defaults_select_only %}\\n    <sw-container class=\\\"sw-sales-channel-defaults-select\\\">\\n        <template v-if=\\\"salesChannel\\\">\\n            <sw-entity-single-select\\n                :disabled=\\\"disabled\\\"\\n                :class=\\\"singleSelectClass\\\"\\n                :label=\\\"defaultPropertyLabel\\\"\\n                :helpText=\\\"helpText\\\"\\n                required\\n                :entity=\\\"propertyEntityName\\\"\\n                :value=\\\"defaultId\\\"\\n                :error=\\\"defaultsValueError\\\"\\n                @change=\\\"updateDefault\\\">\\n            </sw-entity-single-select>\\n        </template>\\n    </sw-container>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_content_tabs %}{% endblock %}\\n\\n{% block bf_sales_channel_detail_language_switch %}\\n    <sw-language-switch slot=\\\"language-switch\\\" disabled></sw-language-switch>\\n{% endblock %}\\n\\n{% block bf_sales_channel_detail_content_language_info %}\\n    <sw-language-info\\n        :entityDescription=\\\"placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.textHeadline'))\\\"\\n        isNewEntity\\n    ></sw-language-info>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_sales_channel_grid_columns_actions %}\\n<sw-grid-column flex=\\\"auto\\\"\\n                align=\\\"center\\\"\\n                dataIndex=\\\"actions\\\"\\n                class=\\\"sw-sales-channel-modal-grid__actions\\\"\\nv-if=\\\"salesChannelTypes\\\">\\n    <sw-button\\n            class=\\\"sw-sales-channel-modal__add-channel-action\\\"\\n            size=\\\"small\\\"\\n            variant=\\\"primary\\\"\\n            @click=\\\"onAddChannel(item.id)\\\"\\n            :isLoading=\\\"isProductComparisonSalesChannelType(item.id) && productStreamsLoading\\\"\\n            :disabled=\\\"isProductComparisonSalesChannelType(item.id) && !productStreamsExist || item.isCreated\\\"\\n\\n            v-tooltip=\\\"{\\n                            message: $tc('sw-sales-channel.modal.messageNoProductStreams'),\\n                            showOnDisabledElements: true,\\n                            disabled: !isProductComparisonSalesChannelType(item.id) && !productStreamsExist\\n                        }\\\">\\n        {{ $tc('sw-sales-channel.modal.buttonAddChannel') }}\\n    </sw-button>\\n</sw-grid-column>\\n{% endblock %}\";","module.exports = \"{% block bf_amazon_connection_assistant_logo %}\\n    <img class=\\\"bf-amazon-connection-assistant__logo\\\"\\n         :src=\\\"'swagmarkets/static/img/amazon_logo_final.svg' | asset\\\"/>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_ebay_connection_assistant_account_marketplace %}\\n    <div class=\\\"bf-ebay-connection-assistant-account-marketplace__content\\\">\\n\\n        {% block bf_ebay_connection_assistant_account_marketplace_content_information %}\\n            <sw-card-section class=\\\"bf-ebay-connection-assistant-modal__content-description\\\">\\n                {{ $tc('ebay.validateMarketplaceDescription') }}\\n            </sw-card-section>\\n            <div class=\\\"bf-ebay-connection-assistant-account__content-information\\\">\\n                {% block bf_ebay_connection_assistant_account_marketplace_content_information_error %}\\n                    <sw-alert variant=\\\"error\\\" v-if=\\\"canRetailerSell !== null && !canRetailerSell\\\">\\n                        {{$tc('error.ebay.validateMarketplaceError')}}\\n                    </sw-alert>\\n                {% endblock %}\\n                {% block bf_ebay_connection_assistant_account_marketplace_content_information_success %}\\n                    <sw-alert variant=\\\"success\\\" v-if=\\\"canRetailerSell !== null && canRetailerSell\\\">\\n                        {{$tc('success.ebay.validateMarketplaceSuccess')}}\\n                    </sw-alert>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        <sw-container align=\\\"end\\\" justify=\\\"end\\\"\\n                      class=\\\"bf-ebay-connection-assistant-account-marketplace__content-button-check\\\">\\n            {% block bf_ebay_connection_assistant_accout_marketplace_check_button %}\\n                <sw-button\\n                    v-if=\\\"canRetailerSell === null || !canRetailerSell\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"primary\\\"\\n                    :block=\\\"true\\\"\\n                    @click=\\\"siteIdCheck\\\"\\n                    v-tooltip=\\\"tooltip\\\">\\n                    {{$tc('ebay.validateMarketplaceBtnTitle')}}\\n                </sw-button>\\n            {% endblock %}\\n        </sw-container>\\n    </div>\\n{% endblock %}\\n\";","const { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.override('sw-sales-channel-modal', {\n    name: 'bf-sales-channel-modal',\n    methods: {\n        onAddChannel(id) {\n            if (id === '26a9ece25bd14b288b30c3d71e667d2c' || id === '7ff39608fed04e4bbcc62710b7223966') {\n                this.$router.push({ name: 'bf.sales.channel.create', params: { typeId: id } });\n            } else if(id) {\n                this.$super('onAddChannel', id);\n            }\n\n            this.onCloseModal();\n        }\n    }\n});\n","module.exports = \"{% block bf_sales_channel_detail_base %}\\n    <div class=\\\"bf-sales-channel-detail-base sw-sales-channel-detail-base\\\">\\n        {% block bf_sales_channel_detail_base_general %}\\n            <sw-container\\n                v-if=\\\"clientExists && clientInProgress\\\"\\n                columns=\\\"1fr\\\"\\n                class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n                {% block bf_sales_channel_base_general_client_system_state %}\\n                    <sw-alert\\n                        variant=\\\"warning\\\"\\n                        appearance=\\\"system\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                        {{ $tc('error.global.systemSettingUp') }}\\n                    </sw-alert>\\n                {% endblock %}\\n            </sw-container>\\n            <sw-container\\n                v-if=\\\"bfBpUnauthorized\\\"\\n                columns=\\\"1fr\\\"\\n                class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n                <sw-alert\\n                    variant=\\\"error\\\"\\n                    appearance=\\\"notification\\\"\\n                    :closable=\\\"false\\\">\\n                    {{ $tc('error.global.bfBpUnauthorized') }}\\n                </sw-alert>\\n            </sw-container>\\n            {% block bf_sales_channel_detail_base_contract %}\\n                <bf-contract\\n                    v-if=\\\"!creatingNewSalesChannel && salesChannel\\\"\\n                    ref=\\\"bfContract\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    :clientExists=\\\"clientExists\\\"\\n                    :currentContract=\\\"currentContract\\\"\\n                    :bookableContracts=\\\"bookableContracts\\\"\\n                    :subProcessorData=\\\"subProcessorData\\\"\\n                    :userAuthorised=\\\"userAuthorised\\\"\\n                    @onSetNewContract=\\\"onSetNewContract\\\"\\n                    @onCancelContract=\\\"onCancelContract\\\"\\n                    @refreshContractData=\\\"getContract\\\"\\n                ></bf-contract>\\n            {% endblock %}\\n            <sw-container\\n                v-if=\\\"clientExists && !isConnected\\\"\\n                columns=\\\"1fr\\\"\\n                class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\"\\n                v-show=\\\"showNotificationBox\\\">\\n                {% block bf_sales_channel_base_general_connection_asisstant %}\\n                    <sw-alert\\n                        variant=\\\"info\\\"\\n                        appearance=\\\"notification\\\"\\n                        :closable=\\\"false\\\"\\n                    >\\n                        {{ $tc('salesChannel-connectionAssistant.connectionAvailable') }} <br><br>\\n                        <sw-button\\n                            :disabled=\\\"connectionAssistantBtnStartDisabled\\\"\\n                            variant=\\\"ghost\\\"\\n                            size=\\\"small\\\"\\n                            :square=\\\"false\\\"\\n                            :block=\\\"false\\\"\\n                            :isLoading=\\\"false\\\"\\n                            :routerLink=connectionAssistantRouterLink\\n                        >\\n                            {{ $tc('salesChannel-connectionAssistant.startConnectionAssistant') }}\\n                        </sw-button>\\n                    </sw-alert>\\n                {% endblock %}\\n            </sw-container>\\n\\n            {% block bf_sales_channel_detail_base_account %}{% endblock %}\\n\\n            {% block bf_sales_channel_detail_base_ebay_token_expires %}\\n                <bf-sales-channel-ebay-token-expires\\n                    v-if=\\\"salesChannel && isSalesChannelEbay\\\"\\n                    :salesChannel=\\\"salesChannel\\\"\\n                    :clientRdy=\\\"clientExists && !clientInProgress && isConnected\\\">\\n                </bf-sales-channel-ebay-token-expires>\\n            {% endblock %}\\n\\n            <sw-card v-if=\\\"salesChannel\\\" :isLoading=\\\"isLoadingBaseData\\\"\\n                     :title=\\\"$tc('sw-sales-channel.detail.titleGeneralSettings')\\\">\\n                {% block bf_sales_channel_base_general_input_name %}\\n                    <sw-field\\n                        type=\\\"text\\\"\\n                        validation=\\\"required\\\"\\n                        required\\n                        :placeholder=\\\"placeholder(salesChannel, 'name')\\\"\\n                        :label=\\\"$tc('sw-sales-channel.detail.labelInputName')\\\"\\n                        :error=\\\"salesChannelNameError\\\"\\n                        v-model=\\\"salesChannel.name\\\"></sw-field>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_select_marketplace %}\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_marketplace_settings %}\\n                    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"20px\\\">\\n\\n                        {% block bf_sales_channel_detail_base_general_marketplace_settings_select_currency %}\\n                            <sw-entity-single-select\\n                                :label=\\\"$tc('bf-sales-channel.create.labelCurrency')\\\"\\n                                v-model=\\\"salesChannel.currencyId\\\"\\n                                :error=\\\"salesChannelCurrencyIdError\\\"\\n                                entity=\\\"currency\\\"\\n                                validation=\\\"required\\\"\\n                                required\\n                            >\\n                            </sw-entity-single-select>\\n                        {% endblock %}\\n                        {% block bf_sales_channel_detail_base_general_marketplace_settings_select_language %}\\n                            <sw-entity-single-select\\n                                :label=\\\"$tc('bf-sales-channel.create.labelLanguage')\\\"\\n                                v-model=\\\"salesChannel.languageId\\\"\\n                                :error=\\\"salesChannelCurrencyIdError\\\"\\n                                entity=\\\"language\\\"\\n                                validation=\\\"required\\\"\\n                                required\\n                            >\\n                            </sw-entity-single-select>\\n                        {% endblock %}\\n                    </sw-container>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_marketplace_settings_select_country %}\\n                    <sw-sales-channel-defaults-select\\n                        :salesChannel=\\\"salesChannel\\\"\\n                        propertyName=\\\"countries\\\"\\n                        :propertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputCountries')\\\"\\n                        :helpText=\\\"$tc('sw-sales-channel.detail.countryMultiSelectHelpText')\\\"\\n                        defaultPropertyName=\\\"countryId\\\"\\n                        :defaultPropertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputDefaultCountry')\\\">\\n                    </sw-sales-channel-defaults-select>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_select_payment_method %}\\n                    {% block bf_sales_channel_detail_base_ebay_payment_method %}\\n                        <bf-sales-channel-ebay-payment-method\\n                            v-if=\\\"salesChannel && isSalesChannelEbay && !creatingNewSalesChannel\\\"\\n                            propertyName=\\\"paymentMethods\\\"\\n                            defaultPropertyName=\\\"paymentMethodId\\\"\\n                            :clientExists=\\\"clientExists\\\"\\n                            :clientInProgress=\\\"clientInProgress\\\"\\n                            :salesChannel=\\\"salesChannel\\\"\\n                            :propertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputPaymentMethods')\\\"\\n                            :defaultPropertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputDefaultPaymentMethod')\\\"\\n                        ></bf-sales-channel-ebay-payment-method>\\n                    {% endblock %}\\n\\n                    <sw-container\\n                        v-if=\\\"salesChannel && isSalesChannelAmazon\\\"\\n                        columns=\\\"1fr\\\"\\n                        class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\"\\n                    >\\n                        <sw-alert variant=\\\"warning\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n                            {{ $tc('bf-sales-channel.detail.amazonPaymentMethodInfoText') }}\\n                        </sw-alert>\\n                    </sw-container>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_select_shippment_method %}\\n                    <sw-sales-channel-defaults-select\\n                        v-if=\\\"isSalesChannelAmazon === false\\\"\\n                        :salesChannel=\\\"salesChannel\\\"\\n                        propertyName=\\\"shippingMethods\\\"\\n                        :propertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputShippingMethods')\\\"\\n                        defaultPropertyName=\\\"shippingMethodId\\\"\\n                        :defaultPropertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputDefaultShippingMethod')\\\">\\n                    </sw-sales-channel-defaults-select>\\n                {% endblock %}\\n                {% block bf_sales_channel_details_base_general_select_shipping_method_create_amazon %}\\n                    <bf-sales-channel-defaults-select-only\\n                            v-if=\\\"isSalesChannelAmazon && creatingNewSalesChannel\\\"\\n                            :salesChannel=\\\"salesChannel\\\"\\n                            propertyName=\\\"shippingMethods\\\"\\n                            :propertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputShippingMethods')\\\"\\n                            defaultPropertyName=\\\"shippingMethodId\\\"\\n                            :defaultPropertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputDefaultShippingMethod')\\\"\\n                    ></bf-sales-channel-defaults-select-only>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_general_select_customer_group %}\\n                    <sw-container columns=\\\"1fr 1fr 1fr\\\" gap=\\\"20px\\\"\\n                                  v-if=\\\"salesChannel && isSalesChannelAmazon && !creatingNewSalesChannel\\\">\\n                            <sw-text-field\\n                                type=\\\"text\\\"\\n                                :label=\\\"$tc('salesChannelSettings.amazon.label.merchantShippingGroupName')\\\"\\n                                :placeholder=\\\"$tc('salesChannelSettings.amazon.placeholder.merchantShippingGroupName')\\\"\\n                                :value=\\\"salesChannel.merchantShippingGroupName\\\"\\n                                :helpText=\\\"$tc('salesChannelSettings.amazon.helpText.merchantShippingGroup')\\\"\\n                                name=\\\"merchantShippingGroupName\\\"\\n                                @change=\\\"salesChannel.merchantShippingGroupName = $event\\\"\\n                            >\\n                            </sw-text-field>\\n                            <bf-sales-channel-defaults-select-only\\n                                :salesChannel=\\\"salesChannel\\\"\\n                                propertyName=\\\"shippingMethods\\\"\\n                                :propertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputShippingMethods')\\\"\\n                                defaultPropertyName=\\\"shippingMethodId\\\"\\n                                :defaultPropertyLabel=\\\"$tc('sw-sales-channel.detail.labelInputDefaultShippingMethod')\\\"\\n                            ></bf-sales-channel-defaults-select-only>\\n                            <sw-number-field\\n                                :label=\\\"$tc('bf-sales-channel.detail.labelProcessingTime')\\\"\\n                                v-model=\\\"salesChannel.processingTime\\\"\\n                                placeholder=\\\"1\\\"\\n                                numberType=\\\"int\\\"\\n                                :step=\\\"1\\\"\\n                                :min=\\\"1\\\"\\n                                :max=\\\"99\\\"\\n                                :value=\\\"1\\\"\\n                                :digits=\\\"2\\\"\\n                            ></sw-number-field>\\n                    </sw-container>\\n                    <sw-entity-single-select v-else\\n                                             :label=\\\"$tc('sw-sales-channel.detail.customerGroup')\\\"\\n                                             entity=\\\"customer_group\\\"\\n                                             :error=\\\"salesChannelCustomerGroupIdError\\\"\\n                                             v-model=\\\"salesChannel.customerGroupId\\\"\\n                                             validation=\\\"required\\\"\\n                                             required\\n                    >\\n                    </sw-entity-single-select>\\n\\n                <sw-container columns=\\\"1fr\\\" v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelEbay\\\">\\n                    <sw-switch-field\\n                        :label=\\\"$tc('salesChannelSettings.ebay.label.manufacturerAsBrands')\\\"\\n                        :value=\\\"salesChannel.useBrandAsManufacturer\\\"\\n                        :ghostValue=\\\"false\\\"\\n                        :noMarginTop=\\\"true\\\"\\n                        :size=\\\"'small'\\\"\\n                        @change=\\\"salesChannel.useBrandAsManufacturer = $event\\\"\\n                        class=\\\"manufacturerAsBrandService\\\">\\n                    </sw-switch-field>\\n                </sw-container>\\n\\n                    {% block bf_sales_channel_detail_base_general_amazon_settings %}\\n                        <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"20px\\\" v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelAmazon\\\">\\n                            <sw-entity-single-select\\n                                :label=\\\"$tc('sw-sales-channel.detail.customerGroup')\\\"\\n                                entity=\\\"customer_group\\\"\\n                                :error=\\\"salesChannelCustomerGroupIdError\\\"\\n                                v-model=\\\"salesChannel.customerGroupId\\\"\\n                                validation=\\\"required\\\"\\n                                required>\\n                            </sw-entity-single-select>\\n                            <sw-switch-field\\n                                :label=\\\"$tc('salesChannelSettings.amazon.label.vatCalculationService')\\\"\\n                                :value=\\\"salesChannel.useAmazonTaxCalculationService\\\"\\n                                :ghostValue=\\\"false\\\"\\n                                :noMarginTop=\\\"true\\\"\\n                                :size=\\\"'small'\\\"\\n                                @change=\\\"salesChannel.useAmazonTaxCalculationService = $event\\\"\\n                                class=\\\"vatCalculationService\\\">\\n                            </sw-switch-field>\\n                            <sw-entity-single-select\\n                                :label=\\\"$tc('salesChannelSettings.amazon.label.fcShelfLifeAttribute')\\\"\\n                                entity=\\\"custom_field\\\"\\n                                :criteria=\\\"customFieldCriteria\\\"\\n                                v-model=\\\"salesChannel.amazonFcShelfLifeAttribute\\\"\\n                                validation=\\\"required\\\">\\n                            </sw-entity-single-select>\\n                        </sw-container>\\n                    {% endblock %}\\n                {% endblock %}\\n            </sw-card>\\n            <sw-card :title=\\\"$tc('bf-sales-channel.detail.prices')\\\"\\n                     v-if=\\\"salesChannel && !creatingNewSalesChannel && (isSalesChannelAmazon || isSalesChannelEbay)\\\">\\n                {% block bf_sales_channel_net_price_general_settings %}\\n                    <sw-alert\\n                        variant=\\\"info\\\"\\n                        appearance=\\\"notification\\\"\\n                        :closable=\\\"false\\\"\\n                    >{{ $tc('global.globalConfigInfo') }}</sw-alert>\\n                    <sw-switch-field v-if=\\\"salesChannel\\\"\\n                                     :label=\\\"$tc('bf-sales-channel.detail.netPriceSwitchLabel')\\\"\\n                                     :ghostValue=\\\"false\\\"\\n                                     :noMarginTop=\\\"true\\\"\\n                                     :size=\\\"'small'\\\"\\n                                     :value=\\\"salesChannel.useNetPrice\\\"\\n                                     @change=\\\"salesChannel.useNetPrice = $event\\\">\\n                    </sw-switch-field>\\n                {% endblock %}\\n            </sw-card>\\n            <template v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelEbay\\\">\\n                <sw-card :title=\\\"$tc('bf-sales-channel.detail.ebayAccountCardTitle')\\\" :isLoading=\\\"isLoadingBaseData\\\">\\n                    <sw-alert variant=\\\"info\\\" appearance=\\\"system\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\"\\n                              v-if=\\\"!clientExists || clientInProgress\\\">\\n                        {{ $tc('bf-sales-channel.detail.ebayAccountInfo') }}\\n                    </sw-alert>\\n                    {% block bf_sales_channel_detail_base_general_ebay_settings %}\\n                    <sw-email-field\\n                        :label=\\\"$tc('salesChannelSettings.ebay.label.payPalEmail')\\\"\\n                        :value=\\\"salesChannel.payPalEmail\\\"\\n                        @change=\\\"salesChannel.payPalEmail = $event\\\"\\n                        :disabled=\\\"!clientExists || clientInProgress\\\" required>\\n                    </sw-email-field>\\n                    <sw-text-field\\n                        :label=\\\"$tc('salesChannelSettings.ebay.label.ebayLogo')\\\"\\n                        :value=\\\"salesChannel.ebayLogo\\\"\\n                        placeholder=\\\"https://example.com/logo.jpg\\\"\\n                        @change=\\\"salesChannel.ebayLogo = $event\\\"\\n                        :disabled=\\\"!clientExists || clientInProgress\\\" required>\\n                    </sw-text-field>\\n                    <sw-container columns=\\\"auto 1fr\\\" gap=\\\"20px\\\">\\n                        <sw-text-field\\n                            :label=\\\"$tc('salesChannelSettings.ebay.label.sellerZip')\\\"\\n                            :value=\\\"salesChannel.sellerZip\\\"\\n                            @change=\\\"salesChannel.sellerZip = $event\\\"\\n                            :disabled=\\\"!clientExists || clientInProgress\\\" required>\\n                        </sw-text-field>\\n                        <sw-text-field\\n                            :label=\\\"$tc('salesChannelSettings.ebay.label.sellerCity')\\\"\\n                            :value=\\\"salesChannel.sellerCity\\\"\\n                            @change=\\\"salesChannel.sellerCity = $event\\\"\\n                            :disabled=\\\"!clientExists || clientInProgress\\\" required>\\n                        </sw-text-field>\\n                    </sw-container>\\n                    <sw-text-field\\n                        :label=\\\"$tc('salesChannelSettings.ebay.label.feedbackComment')\\\"\\n                        :value=\\\"salesChannel.feedbackComment\\\"\\n                        @change=\\\"salesChannel.feedbackComment = $event\\\"\\n                        :disabled=\\\"!clientExists || clientInProgress\\\" required>\\n                    </sw-text-field>\\n                </sw-card>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_ebay_extended_content %}\\n            <bf-sales-channel-ebay-extended-configuration\\n                v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelEbay\\\"\\n                :salesChannel=\\\"salesChannel\\\"\\n                :clientExists=\\\"clientExists\\\"\\n                :clientInProgress=\\\"clientInProgress\\\"\\n                :currentContractName=\\\"currentContractName\\\"\\n                :isSalesChannelEbay=\\\"isSalesChannelEbay\\\">\\n            </bf-sales-channel-ebay-extended-configuration>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_ebay_best_offer %}\\n            <sw-card v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelEbay\\\"\\n                     :title=\\\"$tc('bf-sales-channel.detail.ebayBestOffers')\\\"\\n                     :isLoading=\\\"!salesChannel\\\">\\n                <bf-sales-channel-ebay-best-offer\\n                    v-if=\\\"salesChannel\\\"\\n                    :isGeneralPage=\\\"true\\\"\\n                    :clientExists=\\\"clientExists\\\"\\n                    :clientInProgress=\\\"clientInProgress\\\"\\n                    :currentContractName=\\\"currentContractName\\\"\\n                    :ebayBestOfferActive=\\\"salesChannel.ebayBestOfferActive\\\"\\n                    :ebayBestOfferAbsolute=\\\"salesChannel.ebayBestOfferAbsolute\\\"\\n                    :ebayBestOfferRelative=\\\"salesChannel.ebayBestOfferRelative\\\"\\n                    :ebayBestOfferAutoAccept=\\\"salesChannel.ebayBestOfferAutoAccept\\\"\\n                    :ebayBestOfferAbsoluteAutoAccept=\\\"salesChannel.ebayBestOfferAbsoluteAutoAccept\\\"\\n                    :ebayBestOfferRelativeAutoAccept=\\\"salesChannel.ebayBestOfferRelativeAutoAccept\\\"\\n                    :ebayBestOfferFix=\\\"salesChannel.ebayBestOfferFix\\\"\\n                    @change=\\\"setSalesChannelAttributeValue\\\">\\n                </bf-sales-channel-ebay-best-offer>\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_ebay_policies %}\\n            <bf-sales-channel-ebay-policy\\n                v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelEbay\\\"\\n                :salesChannel=\\\"salesChannel\\\"\\n                @setPolicy=\\\"setPolicy\\\"\\n                :clientRdy=\\\"clientExists && !clientInProgress  && isConnected\\\">\\n            </bf-sales-channel-ebay-policy>\\n        {% endblock %}\\n        <sw-card\\n            v-if=\\\"salesChannel && !creatingNewSalesChannel && isSalesChannelAmazon\\\"\\n            :title=\\\"$tc('bf-category-segment-mapping.title')\\\"\\n            :isLoading=\\\"isSegmentLoading\\\">\\n            {% block bf_sales_channel_detail_segment_dropdown %}\\n                <bf-sales-channel-amazon-segment-dropdown\\n                    ref=\\\"segmentDropdown\\\"\\n                    :clientExists=\\\"clientExists\\\"\\n                    :clientInProgress=\\\"clientInProgress\\\"\\n                    :currentContractName=\\\"currentContractName\\\"\\n                    @onSetCurrentSegment=\\\"setCurrentSegment\\\"\\n                    @onStartLoading=\\\"isSegmentLoading = true\\\"\\n                    @onStopLoading=\\\"isSegmentLoading = false\\\">\\n                </bf-sales-channel-amazon-segment-dropdown>\\n            {% endblock %}\\n        </sw-card>\\n\\n        {% block sw_sales_channel_detail_base_options_domains %}\\n            {# Kept in the Code for debuging if something not working or we have to check if the Domain setting works #}\\n\\n{#            <sw-sales-channel-detail-domains#}\\n{#                v-if=\\\"salesChannel && isDomainAware\\\"#}\\n{#                :salesChannel=\\\"salesChannel\\\"#}\\n{#                :isLoading=\\\"isLoading\\\">#}\\n{#            </sw-sales-channel-detail-domains>#}\\n        {% endblock %}\\n\\n        {% block sw_sales_channel_detail_base_options_status %}\\n            <sw-card\\n                :title=\\\"$tc('sw-sales-channel.detail.titleStatus')\\\"\\n                v-if=\\\"!creatingNewSalesChannel && salesChannel\\\"\\n                :isLoading=\\\"isLoading\\\">\\n                {% block bf_sales_channel_deactivate_info_msg %}\\n                    <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n                        {{ $tc('bf-sales-channel.detail.infoActivateDeactivateSalesChannel') }}\\n                    </sw-alert>\\n                {% endblock %}\\n                {% block bf_sales_channel_ebay_activate_alerts__content %}\\n                    <sw-alert\\n                        v-if=\\\"isSalesChannelEbay && !salesChannel.active && salesChannel.noPaymentMethodMatching\\\"\\n                        variant=\\\"error\\\"\\n                        appearance=\\\"notification\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                        {{ $tc('bf-sales-channel.detail.noPaymentMethodsSelected') }}\\n                    </sw-alert>\\n                    <sw-alert\\n                        v-if=\\\"isSalesChannelEbay && !salesChannel.active && !salesChannel.shippingPolicy && (!salesChannel.paymentPolicy || !salesChannel.returnPolicy)\\\"\\n                        variant=\\\"error\\\"\\n                        appearance=\\\"notification\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                        {{ $tc('bf-sales-channel.detail.noPoliciesSelected') }}\\n                    </sw-alert>\\n                {% endblock %}\\n\\n                {% block sw_sales_channel_detail_base_status_input_active %}\\n                    <sw-field\\n                        type=\\\"switch\\\"\\n                        :label=\\\"$tc('sw-sales-channel.detail.labelInputActive')\\\"\\n                        @change=\\\"onToggleActive\\\"\\n                        v-model=\\\"salesChannel.active\\\"\\n                        :disabled=\\\"!isSalesChannelActivationSwitchEnabled()\\\">\\n                    </sw-field>\\n                {% endblock %}\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_base_api %}\\n            <sw-card v-if=\\\"salesChannel\\\" :isLoading=\\\"isLoadingBaseData\\\"\\n                     :title=\\\"$tc('sw-sales-channel.detail.titleOptionsApiKey')\\\">\\n                {% block bf_sales_channel_detail_base_api_description %}\\n                    <div class=\\\"bf-sales-channel-detail-base__description-text\\\"\\n                         v-html=\\\"$tc('sw-sales-channel.detail.textApiAccessDescription')\\\"></div>\\n                {% endblock %}\\n\\n                {% block bf_sales_channel_detail_base_api_input_access_key %}\\n                    <sw-field\\n                        :label=\\\"$tc('sw-sales-channel.detail.labelAccessKeyField')\\\"\\n                        :disabled=\\\"true\\\"\\n                        v-model=\\\"salesChannel.accessKey\\\"\\n                    ></sw-field>\\n                {% endblock %}\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block bf_sales_channel_detail_base_delete %}\\n            <sw-card v-if=\\\"salesChannel\\\" :isLoading=\\\"isLoadingBaseData\\\"\\n                     :title=\\\"$tc('sw-sales-channel.detail.deleteModalTitle')\\\">\\n                <sw-container columns=\\\"1fr 175px\\\" gap=\\\"0 30px\\\"\\n                              class=\\\"bf-sales-channel-detail-base__delete-sales-cahnnel\\\">\\n                    {% block bf_sales_channel_detail_base_delete_description %}\\n                        <div class=\\\"bf-sales-channel-detail-base__description-text\\\">\\n                            {{ $tc('bf-sales-channel.detail.delete') }}\\n                        </div>\\n                    {% endblock %}\\n\\n                    {% block bf_sales_channel_detail_base_delete_button %}\\n                        <sw-button\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\"\\n                            @click=\\\"showDeleteModal=true\\\"\\n                        >{{ $tc('sw-sales-channel.detail.buttonDelete') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </sw-container>\\n\\n                {% block bf_sales_channel_detail_base_delete_modal %}\\n                    <sw-modal\\n                        v-if=\\\"showDeleteModal\\\"\\n                        class=\\\"bf-sales-channel-detail-base__delete-modal\\\"\\n                        ref=\\\"modal\\\"\\n                        variant=\\\"small\\\"\\n                        :title=\\\"$tc('sw-sales-channel.detail.deleteModalTitle')\\\"\\n                        @modal-close=\\\"onCloseDeleteModal\\\"\\n                    >\\n                        {% block bf_sales_channel_detail_base_delete_modal_confirm_text %}\\n                            <p class=\\\"bf-sales-channel-detail-base-__delete-modal-confirm-text\\\">\\n                                {{ $tc('sw-sales-channel.detail.textConfirmDelete') }}\\n                            </p>\\n                            <p class=\\\"bf-sales-channel-detail-base__delete-modal-name\\\">\\n                                <strong>{{ placeholder(salesChannel, 'name') }}</strong>\\n                            </p>\\n                            <p>{{ $tc('sw-sales-channel.detail.textDeleteInfo') }}</p>\\n                        {% endblock %}\\n\\n                        {% block bf_sales_channel_detail_base_delete_modal_footer %}\\n                            <template slot=\\\"modal-footer\\\">\\n                                {% block bf_sales_channel_detail_base_modal_footer_abort %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"onCloseDeleteModal\\\">\\n                                        {{ $tc('sw-sales-channel.detail.buttonCloseDeleteModal') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                                {% block bf_sales_channel_detail_base_modal_footer_confirm %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"onConfirmDelete\\\" variant=\\\"danger\\\">\\n                                        {{ $tc('sw-sales-channel.detail.buttonConfirmDelete') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n                            </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                {% endblock %}\\n            </sw-card>\\n        {% endblock %}\\n        <router-view></router-view>\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-account-product.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0019a7db\", content, true, {});","const {Component} = Shopware;\n\nComponent.extend('bf-collapse', 'sw-collapse', {\n    props: {\n        expandOnLoading: {\n            type: Boolean,\n            required: false,\n            default: false\n        }\n    },\n\n    data() {\n        return {\n            expanded: this.expandOnLoading,\n        };\n    },\n\n    methods: {\n        collapseItem() {\n            this.expanded = !this.expanded;\n            this.$emit('item-expand', this.expanded);\n        }\n    }\n});\n","module.exports = \"{% block swag_markets_sub_processor_modal__content %}\\n    <div v-html=\\\"subProcessorData\\\" class=\\\"swag_markets_sub_processor\\\"></div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_custom_fields %}\\n<div>\\n    <sw-container columns=\\\"1fr\\\" class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n        <sw-alert variant=\\\"warning\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n            {{ $tc('bf-property-transfer.tab.warningText') }}\\n        </sw-alert>\\n        <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :closable=\\\"false\\\">\\n            {{ $tc('bf-custom-fields-transfer.tab.text') }}\\n        </sw-alert>\\n    </sw-container>\\n\\n    <sw-card class=\\\"bf-card\\\" title=\\\"Custom field transfer\\\">\\n        <div class=\\\"bf_property_mapping\\\">\\n            {% block sw_property_list_grid %}\\n            <sw-entity-listing :items=\\\"propertyGroup\\\"\\n                               :columns=\\\"getPropertyColumns()\\\"\\n                               :repository=\\\"customFieldsRepository\\\"\\n                               ref=\\\"propertyList\\\"\\n                               :showSelection=\\\"false\\\"\\n                               :showActions=\\\"false\\\"\\n                               :fullPage=\\\"false\\\"\\n                               :sortBy=\\\"sortBy\\\"\\n                               :sortDirection=\\\"sortDirection\\\"\\n                               :isLoading=\\\"isLoading\\\"\\n                               :allowColumnEdit=\\\"false\\\"\\n                               :compactMode=\\\"true\\\"\\n                               identifier=\\\"sw-properties-list\\\"\\n                               @column-sort=\\\"onSortColumn\\\">\\n\\n                {% block sw_property_list_grid_bound %}\\n                <template slot=\\\"column-transfer\\\" slot-scope=\\\"{ item }\\\">\\n                    <sw-field\\n                        :disabled=\\\"false\\\"\\n                        @change=\\\"toggleItemCheck($event, item)\\\"\\n                        type=\\\"checkbox\\\"\\n                        :value=\\\"checked(item)\\\">\\n                    </sw-field>\\n                </template>\\n                {% endblock %}\\n\\n            </sw-entity-listing>\\n            {% endblock %}\\n        </div>\\n    </sw-card>\\n</div>\\n{% endblock %}\\n\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-start-authorize.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"779e892a\", content, true, {});","module.exports = \"{% block swag_markets_permissions_modal__content %}\\n    <div>\\n        <img style=\\\"margin: auto;display: block\\\" :src=\\\"'swagmarkets/static/img/permission_asset.png' | asset\\\"/>\\n        <div style=\\\"text-align: center;margin-top: 5px;font-size:0.8rem\\\">\\n            {{ $tc('bf-sales-channel.contractModal.permissionsSharedData.contentText') }}\\n            <sw-external-link\\n                icon=\\\"small-arrow-small-external\\\" @click=\\\"closePermissionModal\\\">\\n                {{ $tc('bf-sales-channel.contractModal.table.contractSubProcessorLink2') }}\\n            </sw-external-link>\\n            {{ $tc('bf-sales-channel.contractModal.permissionsSharedData.contentTextEnd') }}\\n        </div>\\n        <div style=\\\"margin-top: 60px;\\\">\\n            <sw-description-list>\\n                <dt>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.headLine') }}</dt>\\n                <dd>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.name') }}</dd>\\n                <dd>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.email') }}</dd>\\n                <dd>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.phone') }}</dd>\\n                <dd>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.birthdate') }}</dd>\\n                <dd>{{ $tc('bf-sales-channel.contractModal.permissionsSharedData.address') }}</dd>\\n            </sw-description-list>\\n        </div>\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-ebay-payment-method.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"497af57a\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-product-grid.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"48c8f6fc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-contract.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"60b9c493\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-detail-base.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"08e31aad\", content, true, {});","module.exports = \"{% block bf_sales_channel_marketplace_category_tree %}\\n    <sw-tree\\n            :searchable=\\\"true\\\"\\n            :disableContextMenu=\\\"true\\\"\\n            :items=\\\"categories\\\"\\n            :sortable=\\\"false\\\"\\n            @check-item=\\\"checkItem\\\"\\n            @get-tree-items=\\\"getTreeItems\\\"\\n            @search-tree-items=\\\"searchTreeItems\\\">\\n        <template #headline>\\n            <div class=\\\"sw-tree-actions__headline\\\">\\n                <span>{{ title }}</span>\\n                <div class=\\\"sw-category-tree-field\\\" v-if=\\\"activeCategories\\\">\\n                    <sw-label v-for=\\\"category in activeCategories\\\"\\n                              :key=\\\"category.item.id\\\"\\n                              selected=\\\"\\\"\\n                              @dismiss=\\\"removeItem(category)\\\"\\n                              class=\\\"sw-category-tree-field__selected-label\\\">\\n\\n                        {% block sw_category_tree_field_input_labels_property %}\\n                            <span class=\\\"sw-category-tree-field__label-property\\\">\\n                                        <slot name=\\\"labelProperty\\\">\\n                                            {{ category.item.name }}\\n                                        </slot>\\n                                    </span>\\n                        {% endblock %}\\n\\n                        {% block sw_category_tree_field_input_labels_dismiss_icon %}\\n                            <template slot=\\\"dismiss-icon\\\">\\n                                <sw-icon name=\\\"small-default-x-line-medium\\\"></sw-icon>\\n                            </template>\\n                        {% endblock %}\\n\\n                    </sw-label>\\n                </div>\\n            </div>\\n        </template>\\n\\n        <template slot=\\\"items\\\"\\n                  slot-scope=\\\"{ treeItems, sortable, draggedItem, disableContextMenu, onChangeRoute, clickItem }\\\">\\n            {% block sw_tree_slot_items %}\\n                <sw-tree-item\\n                        v-if=\\\"!isLoading\\\"\\n                        v-for=\\\"item in treeItems\\\"\\n                        :key=\\\"item.id\\\"\\n                        :item=\\\"item\\\"\\n                        :active=\\\"item.active\\\"\\n                        :activeItemIds=\\\"activeCategories\\\"\\n                        :onChangeRoute=\\\"onChangeRoute\\\"\\n                        :sortable=\\\"sortable\\\"\\n                        :draggedItem=\\\"draggedItem\\\"\\n                        :disableContextMenu=\\\"disableContextMenu\\\"\\n                        @check-item=\\\"checkItem\\\">\\n                    {% block sw_category_tree_field_input_results_tree_item_actions %}\\n                        <template #actions><span></span></template>\\n                    {% endblock %}\\n                </sw-tree-item>\\n            {% endblock %}\\n        </template>\\n    </sw-tree>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-start.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1c7b63e8\", content, true, {});","module.exports = \"{% block bf_tree_item %}\\n    <div class=\\\"sw-tree-item bf-tree-item\\\" :class=\\\"styling\\\">\\n        {% block bf_tree_item_element %}\\n            <div class=\\\"sw-tree-item__element bf-tree-item__element\\\">\\n                {% block bf_tree_item_leaf_icon %}\\n                    <div class=\\\"sw-tree-item__leaf\\\" v-if=\\\"item.childCount <= 0\\\"></div>\\n                {% endblock %}\\n\\n                {% block bf_tree_item_element_toggle %}\\n                    <div class=\\\"sw-tree-item__toggle\\\" @click=\\\"openTreeItem(); getTreeItemChildren(item)\\\" v-else>\\n                        {% block bf_tree_item_element_toggle_loader %}\\n                            <sw-loader v-if=\\\"isLoading\\\" size=\\\"14\\\"></sw-loader>\\n                        {% endblock %}\\n\\n                        {% block bf_tree_item_element_toggle_icon %}\\n                            <sw-icon :name=\\\"opened ? 'small-arrow-small-down' : 'small-arrow-small-right'\\\" size=\\\"18\\\"\\n                                     v-else></sw-icon>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block bf_tree_item_element_grip %}\\n                    <div v-if=\\\"item.childCount > 0\\\" class=\\\"sw-tree-item__icon\\\">\\n                        <sw-icon name=\\\"multicolor-folder-tree-open\\\" multicolor small v-if=\\\"opened\\\"></sw-icon>\\n                        <sw-icon name=\\\"multicolor-folder-tree\\\" multicolor small v-else></sw-icon>\\n                    </div>\\n                    <div v-else class=\\\"sw-tree-item__icon\\\">\\n                        <sw-icon name=\\\"small-default-circle-small\\\" size=\\\"18\\\"></sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block bf_tree_item_element_selection %}\\n                    <div class=\\\"sw-tree-item__selection\\\">\\n                        <sw-field type=\\\"radio\\\"\\n                                  name=\\\"category\\\"\\n                                  checked=\\\"currentSelected == item.id ? 'checked' : false\\\"\\n                                  :options=\\\"[{value: item.id, name: item.data.translated.name}]\\\"\\n                                  @change=\\\"onChangeItem\\\"\\n                        ></sw-field>\\n                    </div>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n\\n        {% block bf_tree_item_children_transition %}\\n            <transition name=\\\"fade\\\">\\n                {% block bf_tree_item_children_content %}\\n                    <div class=\\\"sw-tree-item__children\\\" v-if=\\\"isOpened && item.children.length > 0\\\">\\n                        <bf-tree-item v-for=\\\"child in item.children\\\"\\n                                      :key=\\\"child.id\\\"\\n                                      :item=\\\"child\\\"\\n                                      @on-change=\\\"emitCheckedItem\\\"\\n                        ></bf-tree-item>\\n                    </div>\\n                {% endblock %}\\n            </transition>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-account-product.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"16561059\", content, true, {});","module.exports = \"{% block sw_data_grid_columns_render_value %}\\n    <span class=\\\"sw-data-grid__cell-value\\\">\\n        <template v-if=\\\"column.property === 'active'\\\">\\n            <sw-icon v-if=\\\"item.active\\\" name=\\\"small-default-checkmark-line-medium\\\" small class=\\\"is--active\\\"></sw-icon>\\n            <sw-icon v-else name=\\\"small-default-x-line-medium\\\" small class=\\\"is--inactive\\\"></sw-icon>\\n        </template>\\n        <template v-else-if=\\\"column.property === 'category'\\\">\\n            <span v-if=\\\"shopProductData[item.id]\\\">\\n                <span v-for=\\\"(category, index) in shopProductData[item.id].categories\\\" :key=\\\"category.id\\\">\\n                {{ category.name }} <span v-if=\\\"index < shopProductData[item.id].categories.length - 1\\\"> | </span>\\n                </span>\\n            </span>\\n{# {{ typeof shopProductData[item.id] !== 'undefined' ? shopProductData[item.id].category.name : '' }} #}\\n        </template>\\n        <template v-else-if=\\\"column.property === 'online'\\\">\\n            <sw-color-badge\\n                :class=\\\"!shopProductData[item.id] || shopProductData[item.id].marketplaceProductId === '' || shopProductData[item.id].stock === 0 ? 'is--error' : 'is--success'\\\"></sw-color-badge>\\n        </template>\\n        <template v-else-if=\\\"column.property === 'error'\\\">\\n            <sw-color-badge\\n                :class=\\\"!shopProductData[item.id] || shopProductData[item.id].errors.length > 0 ? 'is--error' : 'is--success'\\\"></sw-color-badge>\\n        </template>\\n        <template v-else>\\n            {{ renderColumn(item, column) }}\\n        </template>\\n    </span>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_actions %}\\n    <slot name=\\\"detail-action\\\" v-bind=\\\"{ item }\\\">\\n        <sw-context-menu-item\\n            :disabled=\\\"!shopProductData[item.id]\\\"\\n            class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n            @click=\\\"onEditProductClick(item)\\\">\\n            {{ $tc('global.default.edit') }}\\n        </sw-context-menu-item>\\n\\n        <sw-context-menu-item v-if=\\\"getMarketplaceName == 'amazon' && clientExists\\\"\\n                              :disabled=\\\"!shopProductData[item.id]\\\"\\n                              class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n                              @click=\\\"onAsinManagement(item)\\\">\\n            {{ $tc('products.table-headers.asinManagement') }}\\n        </sw-context-menu-item>\\n\\n        <sw-context-menu-item\\n            :disabled=\\\"shopProductData[item.id] === undefined || getProductId(shopProductData[item.id]) === ''\\\"\\n            class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n            @click=\\\"onOpenMarketplaceProductClick(shopProductData[item.id])\\\">\\n            {{ $tc('products.action.openMarketplaceProduct') }}\\n        </sw-context-menu-item>\\n\\n        <sw-context-menu-item\\n            :disabled=\\\"shopProductData[item.id] && shopProductData[item.id].errors.length === 0\\\"\\n            class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n            @click=\\\"$emit('onOpenProductErrorsModal', item)\\\">\\n            {{ $tc('products.showErrorsButton') }}\\n        </sw-context-menu-item>\\n    </slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_pagination %}\\n    <sw-pagination v-bind=\\\"{ page, limit, total }\\\" :total-visible=\\\"7\\\" @page-change=\\\"paginate\\\"></sw-pagination>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_bulk_modals %}\\n    <bf-sales-channel-product-modal\\n        v-if=\\\"showProductDetailModal\\\"\\n        :product=\\\"selectedProduct\\\"\\n        :shopProductData=\\\"shopProductData\\\"\\n        :clientExists=\\\"clientExists\\\"\\n        :clientInProgress=\\\"clientInProgress\\\"\\n        :currentContract=\\\"currentContract\\\"\\n        @modal-close=\\\"showProductDetailModal = false\\\"\\n    >\\n    </bf-sales-channel-product-modal>\\n    <bf-sales-channel-amazon-asin-management\\n        v-if=\\\"showAsinManagement\\\"\\n        :shopProductData=\\\"shopProductData\\\"\\n        :product=\\\"selectedProduct\\\"\\n        @modal-close=\\\"showAsinManagement = false\\\">\\n    </bf-sales-channel-amazon-asin-management>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_content_tab %}\\n    {% parent() %}\\n\\n    {% block bf_sales_channel_detail_content_tab_amazon_fba_prime %}\\n        <sw-tabs-item\\n            v-if=\\\"isSalesChannelAmazon\\\"\\n            :disabled=\\\"!clientExists || clientInProgress\\\"\\n            :route=\\\"{ name: 'bf.sales.channel.detail.amazon-fba-prime', params: { id: $route.params.id } }\\\"\\n            :title=\\\"$tc('sw-sales-channel.detail.tabProductComparison')\\\">\\n            {{ $tc('amazonFbaPrime.tab-title') }}\\n        </sw-tabs-item>\\n    {% endblock %}\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_content_tab %}\\n    {% parent() %}\\n\\n    {% block bf_sales_channel_detail_content_tab_mapping %}\\n        <sw-tabs-item\\n            :disabled=\\\"!clientExists || clientInProgress\\\"\\n            :route=\\\"{ name: 'bf.sales.channel.detail.mapping', params: { id: $route.params.id } }\\\"\\n            :title=\\\"$tc('sw-sales-channel.detail.tabProductComparison')\\\">\\n            {{ $tc('propertyMapping.tab-title') }}\\n        </sw-tabs-item>\\n    {% endblock %}\\n{% endblock %}\\n{% block bf_sales_channel_detail_content_view %}\\n    <router-view :salesChannel=\\\"salesChannel\\\"\\n                 class=\\\"bf-sales-channel-detail-content-view\\\"\\n                 :isLoading=\\\"isLoading\\\"\\n                 :key=\\\"$route.params.id\\\"\\n                 :salesChannelType=\\\"salesChannelType\\\"\\n                 @setPolicy=\\\"setPolicy\\\"\\n                 :categoriesReloadTriggerEvent=\\\"categoriesReloadTriggerEvent\\\">\\n    </router-view>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_ebay_connection_assistant_start_success_content %}\\n    <div class=\\\"bf-ebay-connection-assistant-start-success__content\\\">\\n        <bf-ebay-connection-assistant-account-status />\\n    </div>\\n{% endblock %}\\n\";","const {Component} = Shopware;\n\nComponent.override('sw-sales-channel-menu', {\n    name: 'bf-sales-channel-menu',\n    computed: {\n        buildMenuTree(){\n            const menuItems = this.$super('buildMenuTree');\n\n            const salesChannelIdsToManufacturers = {};\n            this.salesChannels.forEach((salesChannel) => {\n                if (\n                    salesChannel.type.id === '26a9ece25bd14b288b30c3d71e667d2c' ||\n                    salesChannel.type.id === '7ff39608fed04e4bbcc62710b7223966'\n                ) {\n                    salesChannelIdsToManufacturers[salesChannel.id] = salesChannel.type.manufacturer;\n                }\n            });\n\n            menuItems.forEach((menuItem) => {\n                if (Object.keys(salesChannelIdsToManufacturers).includes(menuItem.id)) {\n                    menuItem.path = 'bf.sales.channel.detail';\n                    menuItem.color = '#8a8f98';\n                    menuItem.manufacturer = salesChannelIdsToManufacturers[menuItem.id];\n                }\n            });\n\n            return menuItems;\n        }\n    }\n});\n","module.exports = \"{% block bf_sales_channel_detail_base_delete %}{% endblock %}\\n{% block bf_sales_channel_detail_base_ebay_token_expires %}{% endblock %}\\n{% block bf_sales_channel_detail_base_general_select_marketplace %}\\n    <sw-single-select\\n            :label=\\\"$tc('bf-sales-channel.create.labelMarketplace')\\\"\\n            v-model=\\\"salesChannel.marketplaceId\\\"\\n            @change=\\\"onUpdateMarketplace\\\"\\n            :options=\\\"marketplaces\\\"\\n            required\\n            validation=\\\"required\\\"\\n            :error=\\\"salesChannelCountryIdError\\\"\\n    >\\n    </sw-single-select>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_category_tree_field_input_results_search_results %}\\n    <ul v-else-if=\\\"searchResult.length > 0 && term.length > 0\\\"\\n        class=\\\"sw-category-tree-field__search-results swag-markets-category-tree-field__search-results\\\">\\n        {% block sw_category_tree_field_input_results_search_results_item %}\\n            <li v-for=\\\"item in searchResult\\\"\\n                class=\\\"sw-category-tree-field__search-result swag-markets-category-tree-field__search-result\\\"\\n                :class=\\\"{ 'is--focus': isSearchResultInFocus(item)}\\\"\\n                @click.stop=\\\"onCheckSearchItem(item)\\\">\\n\\n                {% block sw_category_tree_field_input_results_search_results_item_checkbox %}\\n                    <sw-field type=\\\"checkbox\\\"\\n                              :value=\\\"isSearchItemChecked(item.id)\\\"\\n                              class=\\\"sw-category-tree-field__search-results-checkbox\\\">\\n                    </sw-field>\\n                {% endblock %}\\n\\n                {% block sw_category_tree_field_input_results_search_results_item_folder %}\\n                    <div v-if=\\\"item.childCount > 0\\\" class=\\\"sw-category-tree-field__search-results-icon\\\">\\n                        {% block sw_category_tree_field_input_results_search_results_item_folder_icon %}\\n                            <sw-icon name=\\\"multicolor-folder-tree\\\" multicolor small></sw-icon>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block sw_category_tree_field_input_results_search_results_item_endpoint %}\\n                    <div v-else class=\\\"sw-category-tree-field__search-results-icon\\\">\\n                        {% block sw_category_tree_field_input_results_search_results_item_endpoint_icon %}\\n                            <sw-icon name=\\\"small-default-circle-small\\\" size=\\\"18\\\"></sw-icon>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block sw_category_tree_field_input_results_search_results_item_name %}\\n                    <span class=\\\"sw-category-tree-field__search-results-name\\\">\\n                        {% block sw_category_tree_field_input_results_search_results_item_name_highlight %}\\n                            <sw-highlight-text :searchTerm=\\\"term\\\"\\n                                               :text=\\\"getBreadcrumb(item)\\\">\\n                            </sw-highlight-text>\\n                        {% endblock %}\\n                    </span>\\n                {% endblock %}\\n            </li>\\n        {% endblock %}\\n    </ul>\\n{% endblock %}\\n\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./sw-category-tree-field-override.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"74c2915f\", content, true, {});","module.exports = \"{% block swag_markets_category_mapping %}\\n<sw-card class=\\\"bf-card\\\"\\n         :title=\\\"$tc('bf-category-segment-mapping.categoriesMappingTitle')\\\"\\n         :isLoading=\\\"isLoading\\\"\\n         :showHelpTextIcon=\\\"true\\\"\\n         :helpTextDescription=\\\"$tc('bf-category-segment-mapping.categoriesMappingDescription')\\\"\\n         :helpTextWidth=\\\"500\\\">\\n    <div class=\\\"sw-property-assignment\\\">\\n        {% block swag_markets_category_mapping_search_field %}\\n            <sw-inherit-wrapper v-model=\\\"swCategories\\\"\\n                                :inheritedValue=\\\"null\\\"\\n                                isAssociation>\\n                <template #content=\\\"{ currentValue, isInherited }\\\">\\n                    <sw-category-tree-field\\n                        :showLabelName=\\\"false\\\"\\n                        :categoriesCollection=\\\"currentValue ? currentValue : []\\\"\\n                        class=\\\"sw-product-detail__select-category\\\"\\n                        :disabled=\\\"isInherited\\\"\\n                        :key=\\\"isInherited\\\"\\n                        :placeholder=\\\"$tc('sw-product.categoryForm.placeholderCategory')\\\"\\n                        @selection-add=\\\"swSelectionAdd\\\">\\n                    </sw-category-tree-field>\\n                </template>\\n            </sw-inherit-wrapper>\\n        {% endblock %}\\n        {% block swag_markets_category_mapping_grid %}\\n        <sw-grid\\n            class=\\\"swag_markets_property_assignment__grid\\\"\\n            :selectable=\\\"false\\\"\\n            :items=\\\"gridItems\\\"\\n            :isFullpage=\\\"false\\\"\\n            v-if=\\\"!showEmptyState\\\"\\n            table>\\n            {% block swag_markets_category_mapping_grid_columns %}\\n                <template slot=\\\"columns\\\" slot-scope=\\\"{ item }\\\">\\n                    {% block swag_markets_category_mapping_grid_columns_category_name %}\\n                        <sw-grid-column flex=\\\"200px\\\" dataIndex=\\\"item.swCategoriesId\\\" :label=\\\"$tc('categories.shopware-tree-title')\\\" class=\\\"sw-property-assignment__grid_group_column\\\">\\n                            <sw-label size=\\\"default\\\" appearance=\\\"default\\\" :ghost=\\\"false\\\" :caps=\\\"false\\\" :dismissable=\\\"false\\\" variant=\\\"info\\\"\\n                                      v-tooltip=\\\"{message: item.breadCrumb, width: 300}\\\">\\n                                {{ $tc(item.shopwareCategory) }}\\n                            </sw-label>\\n                        </sw-grid-column>\\n                    {% endblock %}\\n                    {% block swag_markets_category_mapping_grid_columns_category_marketplace %}\\n                        <sw-grid-column\\n                            :label=\\\"createColumnHeaderLabelForMarketplaceColumn()\\\"\\n                            flex=\\\"minmax(100px, 1fr)\\\"\\n                            class=\\\"sw-property-assignment__grid_option_column\\\">\\n                            {% block swag_markets_grid_column_tree_field %}\\n                                <bf-grid-column-tree-field\\n                                    :marketplaceCategoriesIds=\\\"item.marketplaceCategoriesIds\\\"\\n                                    :swCategoryId=\\\"item.swCategoriesId\\\"\\n                                    :channelsId=\\\"channelsId\\\">\\n                                </bf-grid-column-tree-field>\\n                            {% endblock %}\\n                        </sw-grid-column>\\n                    {% endblock %}\\n                    {% block swag_markets_category_mapping_asction_column %}\\n                        <sw-grid-column flex=\\\"minmax(100px, 100px)\\\" align=\\\"center\\\">\\n                            {% block swag_markets_category_mapping_delete %}\\n                                <sw-context-button\\n                                    :showMenuOnStartup=\\\"false\\\"\\n                                    :menuWidth=\\\"220\\\"\\n                                    menuHorizontalAlign=\\\"right\\\"\\n                                    menuVerticalAlign=\\\"bottom\\\"\\n                                    icon=\\\"small-more\\\"\\n                                    :disabled=\\\"false\\\"\\n                                    :autoClose=\\\"true\\\"\\n                                    :zIndex=\\\"9000\\\">\\n                                    <sw-context-menu-item variant=\\\"danger\\\" @click=\\\"showDeleteModal(item.swCategoriesId)\\\">{{ $tc('bf-category-segment-mapping.deleteCategoryMapping') }}</sw-context-menu-item>\\n                                </sw-context-button>\\n                            {% endblock %}\\n                        </sw-grid-column>\\n                    {% endblock %}\\n                </template>\\n            {% endblock %}\\n        </sw-grid>\\n            {% block swag_markets_categories_mapping_pagination %}\\n            <sw-pagination :total=\\\"total\\\" :limit=\\\"limit\\\" :page=\\\"page\\\" @page-change=\\\"pageChange\\\" :steps=\\\"[5]\\\"></sw-pagination>\\n            {% endblock %}\\n            {% block swag_markets_categories_mapping_delete_modal %}\\n            <sw-modal\\n                v-if=\\\"showModal\\\"\\n                class=\\\"bf-sales-channel-product-errors-modal\\\"\\n                ref=\\\"modal\\\"\\n                :title=\\\"$tc('bf-category-segment-mapping.deleteModalWarning')\\\"\\n                @modal-close=\\\"showModal = false\\\">\\n                {{ $tc('bf-category-segment-mapping.deleteModalWarningMsg') }}\\n                <template slot=\\\"modal-footer\\\">\\n                    {% block swag_markets_categories_mapping_footer_cancel %}\\n                        <sw-button\\n                            @click=\\\"closeShowModal\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalCancelBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                    {% block swag_markets_categories_mapping_footer_delete %}\\n                        <sw-button\\n                            @click=\\\"removeCategoryAssignment\\\"\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\">\\n                            {{ $tc('bf-category-segment-mapping.deleteModalDeleteBtn') }}\\n                        </sw-button>\\n                    {% endblock %}\\n                </template>\\n            </sw-modal>\\n            {% endblock %}\\n        {% endblock %}\\n        {% block swag_markets_category_mapping_empty_state %}\\n            <sw-empty-state\\n                v-if=\\\"showEmptyState\\\"\\n                :title=\\\"$tc('bf-category-segment-mapping.categoriesMappingEmptyState')\\\"\\n                :showDescription=\\\"false\\\">\\n            </sw-empty-state>\\n        {% endblock %}\\n    </div>\\n</sw-card>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_start %}\\n    <div class=\\\"bf-amazon-connection-assistant-start\\\">\\n        <router-view v-on=\\\"$listeners\\\"></router-view>\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block sw_category_tree_field_input_labels %}\\n    <sw-label v-for=\\\"selectedCategory in visibleTags\\\"\\n              :key=\\\"selectedCategory.id\\\"\\n              selected=\\\"\\\"\\n              @dismiss=\\\"removeItem(selectedCategory)\\\"\\n              v-tooltip=\\\"{\\n                                        message: getBreadcrumb(selectedCategory),\\n                                        width: 300\\n                                    }\\\"\\n              class=\\\"sw-category-tree-field__selected-label\\\"\\n              v-if=\\\"showLabelName\\\">\\n        {% block sw_category_tree_field_input_labels_property %}\\n            <span class=\\\"sw-category-tree-field__label-property\\\">\\n                <slot name=\\\"labelProperty\\\">\\n                    {{ getLabelName(selectedCategory) }}\\n                </slot>\\n            </span>\\n        {% endblock %}\\n\\n        {% block sw_category_tree_field_input_labels_dismiss_icon %}\\n            <template slot=\\\"dismiss-icon\\\">\\n                <sw-icon name=\\\"small-default-x-line-medium\\\"></sw-icon>\\n            </template>\\n        {% endblock %}\\n\\n    </sw-label>\\n{% endblock %}\\n{% block sw_category_tree_field_input_labels_hidden_tag %}\\n    <sw-label v-if=\\\"numberOfHiddenTags > 0 && showLabelName\\\"\\n              :dismissAble=\\\"true\\\"\\n              @selected=\\\"removeTagLimit\\\"\\n              class=\\\"sw-category-tree-field__label-more\\\">\\n\\n            <span class=\\\"sw-category-tree-field__label-more-property\\\">\\n                <slot name=\\\"labelProperty\\\">+{{ numberOfHiddenTags }}</slot>\\n            </span>\\n    </sw-label>\\n{% endblock %}\\n\\n{% block sw_category_tree_field_input_field %}\\n    <input type=\\\"text\\\"\\n           class=\\\"sw-category-tree__input-field-bf\\\"\\n           v-model=\\\"term\\\"\\n           :placeholder=\\\"placeholder\\\"\\n           ref=\\\"searchInput\\\"\\n           :disabled=\\\"disabled\\\"\\n           @focus=\\\"openDropdown({ setFocusClass, removeFocusClass });\\\"\\n           @keydown.delete=\\\"onDeleteKeyup\\\">\\n{% endblock %}\\n\";","module.exports = \"{% block bf_tree %}\\n    <div class=\\\"sw-tree\\\">\\n        {% block bf_tree_search %}\\n            <slot name=\\\"search\\\">\\n                <div class=\\\"sw-tree__search bf-tree-search\\\" v-if=\\\"searchable\\\">\\n                    <sw-field\\n                        name=\\\"categoryTreeSearch\\\"\\n                        :placeholder=\\\"$tc('sw-tree.general.placeholderSearch')\\\"\\n                        v-model=\\\"currentTreeSearch\\\"\\n                        @input=\\\"searchItems\\\"\\n                        size=\\\"small\\\">\\n                        <template #prefix>\\n                            <sw-icon name=\\\"default-action-search\\\"></sw-icon>\\n                        </template>\\n                    </sw-field>\\n                </div>\\n            </slot>\\n        {% endblock %}\\n\\n        {% block bf_tree_actions_headline %}\\n            <slot name=\\\"headline\\\">\\n                <div class=\\\"sw-tree-actions__headline\\\">\\n                    {{ title }}\\n                </div>\\n            </slot>\\n        {% endblock %}\\n\\n        {% block bf_tree_content %}\\n            <div class=\\\"sw-tree__content\\\">\\n                <div class=\\\"tree-items\\\">\\n                    {% block bf_tree_items %}\\n                        <div class=\\\"sw-tree__content-no-items\\\" v-if=\\\"hasNoItems\\\">\\n                            <p>No categories to show</p>\\n                        </div>\\n                        <slot v-else\\n                              name=\\\"items\\\"\\n                              :treeItems=\\\"treeItems\\\"\\n                              :onChangeItem=\\\"onChange\\\">\\n                            <bf-tree-item\\n                                    v-for=\\\"item in treeItems\\\"\\n                                    :key=\\\"item.id\\\"\\n                                    :item=\\\"item\\\">\\n                            </bf-tree-item>\\n                        </slot>\\n                    {% endblock %}\\n\\n                    {% block bf_tree_loader %}\\n                        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                    {% endblock %}\\n                </div>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    {#                    <h1>Items</h1>#}\\n    {#                    <pre>{{ items }}</pre>#}\\n    {#                    <h1>Tree Items</h1>#}\\n    {#                    <pre>{{ treeItems }}</pre>#}\\n    {#                    <ul>#}\\n    {#                        <li v-for=\\\"item in items\\\" :key=\\\"item.id\\\">#}\\n    {#                            <sw-loader v-if=\\\"isLoading\\\" size=\\\"14\\\"></sw-loader>#}\\n    {#                            <p>#}\\n    {#                                {{ item.name }}#}\\n    {#                                {{ item.children }}#}\\n    {#                                <br>#}\\n    {#                                <button type=\\\"button\\\" @click=\\\"getItems(item.id)\\\" v-if=\\\"item.childCount > 0\\\">Load child#}\\n    {#                                    categories for {{ item.name }}</button>#}\\n    {#                            </p>#}\\n    {#                            <p v-if=\\\"categories\\\">#}\\n    {#                            <pre>{{ categories }}</pre>#}\\n    {#                                I am here#}\\n    {#                                {{ item.name }}#}\\n    {#                            </p>#}\\n    {#                            <li v-if=\\\"item.children.length > 0\\\">#}\\n\\n    {#                                <ul>#}\\n    {#                                    <li v-for=\\\"child in item.children\\\" :key=\\\"child.id\\\">#}\\n    {#                                        {{ child.name }}#}\\n    {#                                        <button type=\\\"button\\\" @click=\\\"getItems(child.id)\\\" v-if=\\\"child.childCount > 0\\\">Load child#}\\n    {#                                            categories for {{ child.name }}</button>#}\\n    {#                                    </li>#}\\n    {#                                </ul>#}\\n    {#                            </li>#}\\n    {#                        </li>#}\\n    {#                    </ul>#}\\n    {#                    <ul>#}\\n    {#                        <li v-for=\\\"item in items\\\">#}\\n    {#                        <li class=\\\"\\\" v-if=\\\"item.children.length > 0\\\">#}\\n    {#                            <ul>#}\\n    {#                                <li v-for=\\\"child in item.children\\\">#}\\n    {#                                    <p>{{ child.name }}</p>#}\\n    {#                                </li>#}\\n    {#                            </ul>#}\\n    {#                        </li>#}\\n    {#                        </li>#}\\n    {#                        #}{#                     <slot v-else#}\\n    {#                        #}{#                           name=\\\"options\\\"#}\\n    {#                        #}{#                           :treeItems=\\\"items\\\"#}\\n    {#                        #}{#                           :name=\\\"name\\\"#}\\n    {#                        #}{#                           @check-item=\\\"checkItem\\\"#}\\n    {#                        #}{#                           @change=\\\"changeItem\\\">#}\\n    {#                        #}{#                         {% block bf_tree_slot_items %}#}\\n    {#                        #}{#                             <bf-tree-item#}\\n    {#                        #}{#                                     :items=\\\"items\\\"#}\\n    {#                        #}{#                                     :disabled=\\\"true\\\"#}\\n    {#                        #}{#                                     :name=\\\"name\\\"#}\\n    {#                        #}{#                                     @change=\\\"changeItem\\\"#}\\n    {#                        #}{#                             ></bf-tree-item>#}\\n    {#                        #}{#                         {% endblock %}#}\\n    {#                        #}{#                     </slot>#}\\n    {#                    </ul>#}\\n\";","module.exports = \"<sw-card v-if=\\\"showPolicies\\\"\\n         :title=\\\"$tc('bf-sales-channel.detail.titleGeneralEbayPolicies')\\\"\\n         :isLoading=\\\"shippingPolicy.shippingPoliciesIsLoading ||\\n          paymentPolicy.paymentPoliciesIsLoading || returnPolicy.returnPoliciesIsLoading\\\">\\n    {% block bf_sales_channel_ebay_policies_info %}\\n    <sw-alert variant=\\\"info\\\" appearance=\\\"system\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" v-if=\\\"!clientRdy\\\">\\n        {{ $tc('bf-sales-channel.detail.ebayPoliciesSystemInfo') }}\\n    </sw-alert>\\n    <sw-alert variant=\\\"error\\\" appearance=\\\"system\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\" v-if=\\\"errorLoadingPolicies\\\">\\n        {{ $tc('bf-sales-channel.detail.ebayErrorLoadingPolicies') }}\\n    </sw-alert>\\n    <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :showIcon=\\\"true\\\" :closable=\\\"false\\\">\\n        {{ $tc('bf-sales-channel.detail.ebayPoliciesInfo') }}\\n        <a href=\\\"https://www.ebay.de/help/selling/business-policies/rahmenbedingungen-fr-ihre-angebote?id=4212\\\" target=\\\"_blank\\\">{{ $tc('bf-sales-channel.detail.ebayPoliciesLinkName') }}</a>\\n    </sw-alert>\\n    {% endblock %}\\n    {% block bf_sales_channel_ebay_policies_shipping_single_select %}\\n        <sw-single-select\\n            :options=\\\"shippingPolicy.shippingPolicies\\\"\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayShippingPolicyLabel')\\\"\\n            :value=\\\"shippingPolicy.selectedShippingPolicy\\\"\\n            v-model=\\\"shippingPolicy.selectedShippingPolicy\\\"\\n            :disabled=\\\"!clientRdy || errorLoadingPolicies\\\"\\n            required>\\n        </sw-single-select>\\n    {% endblock %}\\n    {% block bf_sales_channel_ebay_policies_payment_single_select %}\\n        <sw-single-select\\n            :options=\\\"paymentPolicy.paymentPolicies\\\"\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayPaymentPolicyLabel')\\\"\\n            :value=\\\"paymentPolicy.selectedPaymentPolicy\\\"\\n            v-model=\\\"paymentPolicy.selectedPaymentPolicy\\\"\\n            :disabled=\\\"!clientRdy || errorLoadingPolicies\\\"\\n            required>\\n        </sw-single-select>\\n    {% endblock %}\\n    {% block bf_sales_channel_ebay_policies_return_single_select %}\\n        <sw-single-select\\n            :options=\\\"returnPolicy.returnPolicies\\\"\\n            :label=\\\"$tc('bf-sales-channel.detail.ebayReturnPolicyLabel')\\\"\\n            :value=\\\"returnPolicy.selectedReturnPolicy\\\"\\n            v-model=\\\"returnPolicy.selectedReturnPolicy\\\"\\n            :disabled=\\\"!clientRdy || errorLoadingPolicies\\\"\\n            required>\\n        </sw-single-select>\\n    {% endblock %}\\n</sw-card>\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-logo.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3a35e6f3\", content, true, {});","module.exports = \"{% block bf_ebay_connection_assistant_start_authorize_content %}\\n    <sw-container>\\n        {% block bf_amazon_connection_assistant_modal_content_descritpion %}\\n        <sw-card-section class=\\\"bf-ebay-connection-assistant-modal__content-description\\\">\\n            {{ $tc('ebay.authoriseDescription') }}\\n        </sw-card-section>\\n        {% endblock %}\\n        {% block bf_ebay_connection_assistant_start_authorize_content_left %}\\n            <sw-card-section divider=\\\"right\\\">\\n                <div class=\\\"bf-ebay-connection-assistant-start-authorize__content-left\\\">\\n                    {% block bf_ebay_connection_assistant_start_authorize_content_left_form %}\\n                        {% block bf_ebay_connection_assistant_start_authorize_content_left_form_button_connect %}\\n                            <sw-button\\n                                @click=\\\"authorize\\\"\\n                                size=\\\"small\\\"\\n                                variant=\\\"primary\\\"\\n                                :block=\\\"true\\\"\\n                                :disabled=\\\"btnDisabled\\\">\\n{#                                :link=\\\"irpLink\\\">#}\\n                                {{ $tc('button.connect') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    {% endblock %}\\n                </div>\\n            </sw-card-section>\\n        {% endblock %}\\n    </sw-container>\\n{% endblock %}\\n\";","module.exports = \"{% block swag_markets_attributes_mapping__container %}\\n    <sw-card class=\\\"bf-card\\\"\\n             :title=\\\"$tc('propertyMapping.card-title.transferredProperties')\\\"\\n             :showHelpTextIcon=\\\"true\\\"\\n             :helpTextDescription=\\\"$tc('propertyMapping.information.message')\\\"\\n             :helpTextWidth=\\\"500\\\">\\n        {% block swag_markets_properties_mapping_component__container %}\\n            <properties-mapping\\n                :salesChannelType=\\\"salesChannelType\\\"\\n                :amazonSegment=\\\"amazonSegment\\\"\\n                :amazonProductType=\\\"amazonProductType\\\">\\n            </properties-mapping>\\n        {% endblock %}\\n        {% block swag_markets_custom_fields_mapping_component__container %}\\n            <custom-fields-mapping\\n                :salesChannelType=\\\"salesChannelType\\\"\\n                :amazonSegment=\\\"amazonSegment\\\"\\n                :amazonProductType=\\\"amazonProductType\\\">\\n            </custom-fields-mapping>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_segment_category_tree_item %}\\n    <div class=\\\"sw-tree-item bf-tree-item\\\" :class=\\\"styling\\\">\\n        {% block bf_segment_category_tree_item_element %}\\n            <div class=\\\"sw-tree-item__element bf-tree-item__element\\\">\\n                {% block bf_segment_category_tree_item_leaf_icon %}\\n                    <div class=\\\"sw-tree-item__leaf\\\" v-if=\\\"item.childCount <= 0\\\"></div>\\n                {% endblock %}\\n\\n                {% block bf_segment_category_tree_item_element_toggle %}\\n                    <div class=\\\"sw-tree-item__toggle\\\" @click=\\\"openTreeItem(); getTreeItemChildren(item)\\\" v-else>\\n                        {% block bf_segment_category_tree_item_element_toggle_loader %}\\n                            <sw-loader v-if=\\\"isLoading\\\" size=\\\"14\\\"></sw-loader>\\n                        {% endblock %}\\n\\n                        {% block bf_segment_category_tree_item_element_toggle_icon %}\\n                            <sw-icon :name=\\\"opened ? 'small-arrow-small-down' : 'small-arrow-small-right'\\\" size=\\\"18\\\"\\n                                     v-else></sw-icon>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block bf_segment_category_tree_item_element_grip %}\\n                    <div v-if=\\\"item.childCount > 0\\\" class=\\\"sw-tree-item__icon\\\">\\n                        <sw-icon name=\\\"multicolor-folder-tree-open\\\" multicolor small v-if=\\\"opened\\\"></sw-icon>\\n                        <sw-icon name=\\\"multicolor-folder-tree\\\" multicolor small v-else></sw-icon>\\n                    </div>\\n                    <div v-else class=\\\"sw-tree-item__icon\\\">\\n                        <sw-icon name=\\\"small-default-circle-small\\\" size=\\\"18\\\"></sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block bf_segment_category_tree_item_element_selection %}\\n                    <div class=\\\"sw-tree-item__selection\\\">\\n                        <sw-field type=\\\"radio\\\"\\n                                  name=\\\"segmentCategory\\\"\\n                                  checked=\\\"currentSelected == item.id ? 'checked' : false\\\"\\n                                  :options=\\\"[{value: item.id, name: item.data.translated.name}]\\\"\\n                                  @change=\\\"onChangeItem\\\"\\n                        ></sw-field>\\n                    </div>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n\\n        {% block bf_segment_category_tree_item_children_transition %}\\n            <transition name=\\\"fade\\\">\\n                {% block bf_segment_category_tree_item_children_content %}\\n                    <div class=\\\"sw-tree-item__children\\\" v-if=\\\"isOpened && item.children.length > 0\\\">\\n                        <bf-segment-category-tree-item\\n                            v-for=\\\"child in item.children\\\"\\n                            :key=\\\"child.id\\\"\\n                            :item=\\\"child\\\"\\n                            @on-change=\\\"emitCheckedItem\\\"\\n                        ></bf-segment-category-tree-item>\\n                    </div>\\n                {% endblock %}\\n            </transition>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-account-marketplace.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4dea3235\", content, true, {});","module.exports = \"{% block bf_sales_channel_shopware_segment_category_tree %}\\n    <div class=\\\"bf-sales-channel-shopware-category-tree\\\">\\n        {% block bf_sales_channel_shopware_segment_category_tree_content %}\\n            <div class=\\\"bf-sales-channel-shopware-category-tree__content\\\">\\n                {% block bf_sales_channel_shopware_segment_category_tree_content_tree %}\\n                    <div class=\\\"bf-sales-channel-shopware-category-tree__content-tree\\\">\\n                        <div class=\\\"bf-tree\\\">\\n                            <bf-segment-category-tree\\n                                    :title=\\\"$tc('categories.shopware-tree-title')\\\"\\n                                    :items=\\\"categories\\\"\\n                                    @get-tree-items=\\\"onGetTreeItems\\\"\\n                                    @on-change=\\\"onChangeCategory\\\"\\n                                    @search-tree-items=\\\"searchTreeItems\\\"\\n                            >\\n                                <template #items=\\\"{treeItems, onChangeItem}\\\">\\n                                    <bf-segment-category-tree-item\\n                                        v-for=\\\"item in treeItems\\\"\\n                                        :key=\\\"item.id\\\"\\n                                        :item=\\\"item\\\"\\n                                        @on-change=\\\"onChangeCategory\\\"\\n                                    ></bf-segment-category-tree-item>\\n                                </template>\\n                            </bf-segment-category-tree>\\n                        </div>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block swag_markets_amazon_asin_management %}\\n    <sw-modal\\n        @modal-close=\\\"$emit('modal-close')\\\"\\n        title=\\\"ASIN management\\\"\\n        :variant=\\\"'large'\\\"\\n        class=\\\"bf-modal\\\">\\n        <sw-data-grid style=\\\"min-height: 300px;\\\"\\n            :dataSource=\\\"dataSource\\\"\\n            :columns=\\\"getColumns\\\"\\n            :allowInlineEdit=\\\"true\\\"\\n            itemIdentifierProperty=\\\"shopsProductsVariationsId\\\"\\n            :showSelection=\\\"false\\\"\\n            @inline-edit-save=\\\"inlineEditSave\\\">\\n            <template #column-asin=\\\"{ item, column, isInlineEdit, compact }\\\">\\n                <sw-text-field\\n                    v-if=\\\"isInlineEdit\\\"\\n                    :placeholder=\\\"$tc('products.table-headers.asin')\\\"\\n                    v-model=\\\"item.asin\\\"\\n                    size=\\\"small\\\">\\n                </sw-text-field>\\n                <template v-else>\\n                    {{ item.asin }}\\n                </template>\\n            </template>\\n        </sw-data-grid>\\n        {% block swag_markets_asin_matching_pagination %}\\n            <sw-pagination :total=\\\"total\\\" :limit=\\\"limit\\\" :page=\\\"page\\\" :steps=\\\"[5]\\\" @page-change=\\\"paginate\\\"></sw-pagination>\\n        {% endblock %}\\n        <template slot=\\\"modal-footer\\\">\\n            {% block bf_sales_channel_product_detail__footer_cancel %}\\n                <sw-button\\n                    @click=\\\"$emit('modal-close')\\\"\\n                    size=\\\"small\\\">\\n                    {{ $tc('products.edit.cancel') }}\\n                </sw-button>\\n            {% endblock %}\\n        </template>\\n    </sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-amazon-connection-assistant-start.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"897dfbe4\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-plugin-configuration.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"19a57575\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-ebay-best-offer.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7c15498f\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-detail-product-list.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"089820f8\", content, true, {});","module.exports = \"{% block sw_filter_panel %}\\n    <div class=\\\"sw-filter-panel bf-filter-panel\\\">\\n        {% block sw_filter_panel_item %}\\n            <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0 25px\\\">\\n                <div class=\\\"sw-filter-panel__item bf-filter-panel__item\\\" v-for=\\\"filter in listFilters\\\" :key=\\\"filter.name\\\" :id=\\\"filter.name\\\">\\n                    <div v-if=\\\"false\\\"></div>\\n\\n                    {% block sw_filter_panel_extension_point %}{% endblock %}\\n\\n                    <sw-boolean-filter\\n                        v-else-if=\\\"showFilter(filter, 'boolean-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                    </sw-boolean-filter>\\n\\n                    <sw-existence-filter\\n                        v-else-if=\\\"showFilter(filter, 'existence-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                    </sw-existence-filter>\\n\\n                    <sw-multi-select-filter\\n                        v-else-if=\\\"showFilter(filter, 'multi-select-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                        {% block sw_multi_select_filter_content_variant_label %}\\n                            <template v-if=\\\"filter.displayVariants\\\" #selection-label-property=\\\"{ item, index }\\\">\\n                                <sw-product-variant-info :variations=\\\"item.variation\\\">\\n                                    {{ item.translated.name || item.name }}\\n                                </sw-product-variant-info>\\n                            </template>\\n                        {% endblock %}\\n\\n                        {% block sw_multi_select_filter_content_path_label %}\\n                            <template v-else-if=\\\"filter.displayPath\\\" #selection-label-property=\\\"{ item, index }\\\">\\n                                <sw-highlight-text\\n                                    v-tooltip=\\\"{\\n                                            message: getBreadcrumb(item),\\n                                            width: 300\\n                                        }\\\"\\n                                    selected=\\\"\\\"\\n                                    :key=\\\"item.id\\\"\\n                                    :text=\\\"getLabelName(item)\\\">\\n                                </sw-highlight-text>\\n                            </template>\\n                        {% endblock %}\\n\\n                        {% block sw_multi_select_filter_content_variant_result_item %}\\n                            <template v-if=\\\"filter.displayVariants\\\" #result-item=\\\"{ item, index }\\\">\\n                                <li is=\\\"sw-select-result\\\" v-bind=\\\"{ item, index }\\\">\\n                                    {% block sw_multi_select_filter_content_variant_result_label %}\\n                                        <span class=\\\"sw-select-result__result-item-text\\\">\\n                                            <sw-product-variant-info :variations=\\\"item.variation\\\">\\n                                                {{ item.translated.name || item.name }}\\n                                            </sw-product-variant-info>\\n                                        </span>\\n                                    {% endblock %}\\n                                </li>\\n                            </template>\\n                        {% endblock %}\\n\\n                        {% block sw_multi_select_filter_content_path_result_item %}\\n                            <template v-else-if=\\\"filter.displayPath\\\" #result-item=\\\"{ item, index }\\\">\\n                                <li is=\\\"sw-select-result\\\" v-bind=\\\"{ item, index }\\\">\\n                                    {% block sw_multi_select_filter_content_path_result_label %}\\n                                        <span class=\\\"sw-select-result__result-item-text\\\">\\n                                            <sw-highlight-text\\n                                                v-tooltip=\\\"{\\n                                                    message: getBreadcrumb(item),\\n                                                    width: 300\\n                                                }\\\"\\n                                                selected=\\\"\\\"\\n                                                :key=\\\"item.id\\\"\\n                                                :text=\\\"getLabelName(item)\\\">\\n                                            </sw-highlight-text>\\n                                        </span>\\n                                    {% endblock %}\\n                                </li>\\n                            </template>\\n                        {% endblock %}\\n                    </sw-multi-select-filter>\\n\\n                    <sw-date-filter\\n                        v-else-if=\\\"showFilter(filter, 'date-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        :config=\\\"filter.config\\\"\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                    </sw-date-filter>\\n\\n                    <sw-string-filter\\n                        v-else-if=\\\"showFilter(filter, 'string-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                    </sw-string-filter>\\n\\n                    <sw-number-filter\\n                        v-else-if=\\\"showFilter(filter, 'number-filter')\\\"\\n                        :filter=\\\"filter\\\"\\n                        :active=\\\"!!activeFilters[filter.name]\\\"\\n                        :step=\\\"filter.step\\\"\\n                        :digits=\\\"filter.digits\\\"\\n                        :numberType=\\\"filter.numberType\\\"\\n                        :min=\\\"filter.min\\\"\\n                        :max=\\\"filter.max\\\"\\n                        allowEmpty\\n                        @filter-update=\\\"updateFilter\\\"\\n                        @filter-reset=\\\"resetFilter\\\">\\n                    </sw-number-filter>\\n                </div>\\n            </sw-container>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_product_detail %}\\n    <sw-modal\\n        class=\\\"bf-modal\\\"\\n        :title=\\\"title\\\"\\n        @modal-close=\\\"$emit('modal-close')\\\">\\n        {% block bf_sales_channel_product_detail__content %}\\n            {% block bf_sales_channel_product_detail__content_base %}\\n                <sw-data-grid\\n                    ref=\\\"unitGrid\\\"\\n                    :dataSource=\\\"unitData\\\"\\n                    :columns=\\\"columns\\\"\\n                    :showActions=\\\"false\\\"\\n                    :fullPage=\\\"false\\\"\\n                    :compect=\\\"true\\\"\\n                >\\n                </sw-data-grid>\\n            {% endblock %}\\n        {% endblock %}\\n        {% block bf_sales_channel_product_detail__footer %}\\n            <template slot=\\\"modal-footer\\\">\\n                {% block bf_sales_channel_product_detail__footer_cancel %}\\n                    <sw-button\\n                        @click=\\\"$emit('modal-close')\\\"\\n                        size=\\\"small\\\">\\n                        Cancel\\n                    </sw-button>\\n                {% endblock %}\\n                {% block bf_sales_channel_product_detail__footer_save %}\\n                    <sw-button\\n                        @click=\\\"saveData\\\"\\n                        variant=\\\"primary\\\"\\n                        size=\\\"small\\\">\\n                        Save\\n                    </sw-button>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n    </sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-ebay-connection-assistant-start-authorize.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"ca03feb0\", content, true, {});","module.exports = \"{% block bf_sales_channel_detail_category_segment_content %}\\n    <div v-if=\\\"marketplaceName === 'amazon'\\\">\\n        <sw-card\\n            :isLoading=\\\"isSegmentLoading\\\"\\n            class=\\\"swag_markets_card_mapping__content\\\"\\n            :title=\\\"$tc('bf-category-segment-mapping.title')\\\"\\n            :showHelpTextIcon=\\\"true\\\"\\n            :helpTextDescription=\\\"$tc('bf-category-segment-mapping.description')\\\"\\n            :helpTextWidth=\\\"500\\\">\\n            {% block bf_sales_channel_detail_category_segment_content_container %}\\n                <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"20px\\\">\\n                    <sw-card-section>\\n                        {% block bf_sales_channel_detail_category_segment_content_shopware_category_tree %}\\n                            <bf-sales-channel-shopware-segment-category-tree @onSelectCategory=\\\"onSelectCategory\\\"/>\\n                        {% endblock %}\\n                    </sw-card-section>\\n\\n                    <sw-card-section>\\n                        {% block bf_sales_channel_detail_category_segment_content_dropdown %}\\n                            <div class=\\\"bf-sales-channel-shopware-category-tree\\\">\\n                                <div class=\\\"bf-sales-channel-shopware-category-tree__content\\\">\\n                                    <div class=\\\"bf-sales-channel-shopware-category-tree__content-tree\\\">\\n                                        <div class=\\\"bf-tree\\\" v-if=\\\"activeCategoryId\\\">\\n                                            {% block bf_sales_channel_detail_category_segment_content_dropdown_fields %}\\n                                                <sw-container class=\\\"sw-tree\\\">\\n                                                    {% block bf_sales_channel_shopware_segment_dropdown_headline %}\\n                                                        <div class=\\\"sw-tree-actions__headline\\\">\\n                                                            {{ $tc('bf-category-segment-mapping.title') }}\\n                                                        </div>\\n                                                    {% endblock %}\\n\\n                                                    <bf-sales-channel-amazon-segment-dropdown\\n                                                        ref=\\\"segmentDropdown\\\"\\n                                                        :clientExists=\\\"clientExists\\\"\\n                                                        :clientInProgress=\\\"clientInProgress\\\"\\n                                                        :currentContractName=\\\"currentContractName\\\"\\n                                                        @onSetCurrentSegment=\\\"setCurrentCategorySegment\\\"\\n                                                        @onStartLoading=\\\"isSegmentLoading = true\\\"\\n                                                        @onStopLoading=\\\"isSegmentLoading = false\\\"\\n                                                    />\\n                                                </sw-container>\\n                                            {% endblock %}\\n                                        </div>\\n\\n                                        <div v-else>\\n                                            <sw-alert variant=\\\"info\\\" appearance=\\\"notification\\\" :closable=\\\"false\\\">\\n                                                {{ $tc('bf-category-segment-mapping.information') }}\\n                                            </sw-alert>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        {% endblock %}\\n                    </sw-card-section>\\n                </sw-container>\\n            {% endblock %}\\n        </sw-card>\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_segment_category_tree %}\\n    <div class=\\\"sw-tree\\\">\\n        {% block bf_segment_category_tree_search %}\\n            <slot name=\\\"search\\\">\\n                <div class=\\\"sw-tree__search bf-tree-search\\\">\\n                    <sw-field\\n                        name=\\\"segmentCategoryTreeSearch\\\"\\n                        :placeholder=\\\"$tc('sw-tree.general.placeholderSearch')\\\"\\n                        v-model=\\\"currentTreeSearch\\\"\\n                        @input=\\\"searchItems\\\"\\n                        size=\\\"small\\\">\\n                        <template #prefix>\\n                            <sw-icon name=\\\"default-action-search\\\"></sw-icon>\\n                        </template>\\n                    </sw-field>\\n                </div>\\n            </slot>\\n        {% endblock %}\\n\\n        {% block bf_segment_category_tree_actions_headline %}\\n            <slot name=\\\"headline\\\">\\n                <div class=\\\"sw-tree-actions__headline\\\">\\n                    {{ title }}\\n                </div>\\n            </slot>\\n        {% endblock %}\\n\\n        {% block bf_segment_category_tree_content %}\\n            <div class=\\\"sw-tree__content\\\">\\n                <div class=\\\"tree-items\\\">\\n                    {% block bf_segment_category_tree_items %}\\n                        <div class=\\\"sw-tree__content-no-items\\\" v-if=\\\"hasNoItems\\\">\\n                            <p>No categories to show</p>\\n                        </div>\\n                        <slot v-else\\n                              name=\\\"items\\\"\\n                              :treeItems=\\\"treeItems\\\"\\n                              :onChangeItem=\\\"onChange\\\">\\n                            <bf-segment-category-tree-item\\n                                    v-for=\\\"item in treeItems\\\"\\n                                    :key=\\\"item.id\\\"\\n                                    :item=\\\"item\\\">\\n                            </bf-segment-category-tree-item>\\n                        </slot>\\n                    {% endblock %}\\n\\n                    {% block bf_segment_category_tree_loader %}\\n                        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                    {% endblock %}\\n                </div>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_property_mapping %}\\n    <sw-modal\\n        :isLoading=\\\"isLoading\\\"\\n        variant=\\\"large\\\"\\n        :title=\\\"title\\\"\\n        @modal-close=\\\"$emit('modal-close')\\\">\\n        {% block bf_sales_channel_property_mapping__content %}\\n            {% block bf_sales_channel_property_mapping__content_base %}\\n                <sw-text-field\\n                    type=\\\"text\\\"\\n                    :label=\\\"$tc('propertyMapping.labels.search')\\\"\\n                    :placeholder=\\\"$tc('propertyMapping.placeholder.search')\\\"\\n                    v-model=\\\"searchString\\\"\\n                    :name=\\\"property.productsAttributesId + '-search'\\\"\\n                    @keyup.enter=\\\"loadAttributeData\\\"\\n                >\\n                </sw-text-field>\\n                <bf-sales-channel-property-mapping-grid\\n                    :dataSource=\\\"attributeData\\\"\\n                    :columns=\\\"columns\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    :showActions=\\\"false\\\"\\n                    ref=\\\"attributeGrid\\\"\\n                    @colum-sort=\\\"sortList\\\"\\n                >\\n                </bf-sales-channel-property-mapping-grid>\\n            {% endblock %}\\n        {% endblock %}\\n        {% block bf_sales_channel_property_mapping__footer %}\\n            <template slot=\\\"modal-footer\\\">\\n                {% block bf_sales_channel_property_mapping__footer_cancel %}\\n                    <sw-button\\n                        @click=\\\"$emit('modal-close')\\\"\\n                        size=\\\"small\\\">\\n                        {{ $tc('propertyMapping.buttons.cancel') }}\\n                    </sw-button>\\n                {% endblock %}\\n                {% block bf_sales_channel_property_mapping__footer_save %}\\n                    <sw-button\\n                        @click=\\\"saveData\\\"\\n                        variant=\\\"primary\\\"\\n                        size=\\\"small\\\">\\n                        {{ $tc('propertyMapping.buttons.save') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n    </sw-modal>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_ebay_connection_assistant_account %}\\n    <div class=\\\"bf-ebay-connection-assistant-account\\\">\\n        {% block bf_ebay_connection_assistant_account %}\\n{#            <bf-ebay-connection-assistant-account-status/>#}\\n        {% endblock %}\\n\\n        {% block bf_ebay_connection_assistant_account_content %}\\n            <div class=\\\"bf-ebay-connection-assistant-account__content\\\">\\n                <router-view v-on=\\\"$listeners\\\" :nextBtnIsClicked=\\\"nextBtnIsClicked\\\"></router-view>\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_ebay_connection_assistant_start %}\\n    <div class=\\\"bf-ebay-connection-assistant-start\\\">\\n        <router-view v-on=\\\"$listeners\\\"></router-view>\\n    </div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--14-2!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--14-3!./bf-sales-channel-segment-mapping.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/platform/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1d2d0586\", content, true, {});","module.exports = \"{% block swag_markets_grid_column_tree_field_content %}\\n    <sw-inherit-wrapper v-model=\\\"marketplaceCategories.categories\\\"\\n                        :inheritedValue=\\\"null\\\"\\n                        isAssociation\\n                        >\\n        <template #content=\\\"{ currentValue, isInherited }\\\">\\n            <bf-sales-channel-category-mapping-tree-field\\n                :marketplaceCategories=\\\"marketplaceCategories\\\"\\n                :categoriesCollection=\\\"currentValue ? currentValue : []\\\"\\n                class=\\\"sw-product-detail__select-category\\\"\\n                :disabled=\\\"isInherited\\\"\\n                :key=\\\"isInherited\\\"\\n                :placeholder=\\\"$tc('sw-product.categoryForm.placeholderCategory')\\\"\\n                @selection-add=\\\"marketplaceCategorySelectionAdd\\\"\\n                @selection-remove=\\\"marketplaceCategoriesSelectionRemove\\\">\\n            </bf-sales-channel-category-mapping-tree-field>\\n        </template>\\n    </sw-inherit-wrapper>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_amazon_connection_assistant_account_marketplace %}\\n    <div class=\\\"bf-amazon-connection-assistant-account-marketplace__content\\\">\\n\\n        {% block bf_amazon_connection_assistant_account_marketplace_content_information %}\\n            <sw-card-section class=\\\"bf-amazon-connection-assistant-modal__content-description\\\">\\n                {{ $tc('amazon.validateMarketplaceDescription') }}\\n            </sw-card-section>\\n            <div class=\\\"bf-amazon-connection-assistant-account__content-information\\\">\\n                {% block bf_amazon_connection_assistant_account_marketplace_content_information_error %}\\n                    <sw-alert variant=\\\"error\\\" v-if=\\\"canRetailerSell !== null && !canRetailerSell\\\">\\n                        {{$tc('error.amazon.validateMarketplaceError')}}\\n                    </sw-alert>\\n                {% endblock %}\\n                {% block bf_amazon_connection_assistant_account_marketplace_content_information_success %}\\n                    <sw-alert variant=\\\"success\\\" v-if=\\\"canRetailerSell !== null && canRetailerSell\\\">\\n                        {{$tc('success.amazon.validateMarketplaceSuccess')}}\\n                    </sw-alert>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        <sw-container align=\\\"end\\\" justify=\\\"end\\\"\\n                      class=\\\"bf-amazon-connection-assistant-account-marketplace__content-button-check\\\">\\n            {% block bf_amazon_connection_assistant_accout_marketplace_check_button %}\\n                <sw-button\\n                    v-if=\\\"canRetailerSell === null || !canRetailerSell\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"primary\\\"\\n                    :block=\\\"true\\\"\\n                    @click=\\\"marketplaceCheck\\\"\\n                    v-tooltip=\\\"tooltip\\\">\\n                    {{$tc('amazon.validateMarketplaceBtnTitle')}}\\n                </sw-button>\\n            {% endblock %}\\n        </sw-container>\\n    </div>\\n{% endblock %}\\n\";","module.exports = \"{% block bf_sales_channel_detail_base_contract %}\\n    <div class=\\\"bf-plugin-configuration\\\">\\n        <sw-container\\n            columns=\\\"1fr\\\"\\n            class=\\\"bf-sales-channel-detail-base__connection-assistant-warning\\\">\\n\\n            <sw-alert\\n                variant=\\\"warning\\\"\\n                appearance=\\\"notification\\\"\\n                :closable=\\\"false\\\">\\n\\n                <p>\\n                    {{ $tc('bf-plugin-configuration.integration.repair-description') }}\\n                </p>\\n\\n                <sw-button\\n                    class=\\\"repair-button\\\"\\n                    :disabled=\\\"false\\\"\\n                    variant=\\\"ghost\\\"\\n                    size=\\\"small\\\"\\n                    :square=\\\"false\\\"\\n                    :block=\\\"false\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    @click=\\\"repairIntegrationUser\\\"\\n                >\\n                    {{ $tc('bf-plugin-configuration.integration.repair-integration-button') }}\\n                </sw-button>\\n            </sw-alert>\\n        </sw-container>\\n    </div>\\n{% endblock %}\\n\";"],"sourceRoot":""}